// Generated by purs bundle 0.14.1
var PS = {};
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Alt"] = $PS["Control.Alt"] || {};
  var exports = $PS["Control.Alt"];                          
  var Alt = function (Functor0, alt) {
      this.Functor0 = Functor0;
      this.alt = alt;
  };                                                       
  var alt = function (dict) {
      return dict.alt;
  };
  exports["Alt"] = Alt;
  exports["alt"] = alt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Alternative"] = $PS["Control.Alternative"] || {};
  var exports = $PS["Control.Alternative"];        
  var Alternative = function (Applicative0, Plus1) {
      this.Applicative0 = Applicative0;
      this.Plus1 = Plus1;
  };
  exports["Alternative"] = Alternative;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayApply = function (fs) {
    return function (xs) {
      var l = fs.length;
      var k = xs.length;
      var result = new Array(l*k);
      var n = 0;
      for (var i = 0; i < l; i++) {
        var f = fs[i];
        for (var j = 0; j < k; j++) {
          result[n++] = f(xs[j]);
        }
      }
      return result;
    };
  };
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["compose"] = compose;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];                    
  var on = function (f) {
      return function (g) {
          return function (x) {
              return function (y) {
                  return f(g(x))(g(y));
              };
          };
      };
  };
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  var applyFlipped = function (x) {
      return function (f) {
          return f(x);
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
  exports["applyFlipped"] = applyFlipped;
  exports["on"] = on;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var $foreign = $PS["Data.Functor"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];                  
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var mapFlipped = function (dictFunctor) {
      return function (fa) {
          return function (f) {
              return map(dictFunctor)(f)(fa);
          };
      };
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var voidRight = function (dictFunctor) {
      return function (x) {
          return map(dictFunctor)(Data_Function["const"](x));
      };
  }; 
  var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["mapFlipped"] = mapFlipped;
  exports["void"] = $$void;
  exports["voidRight"] = voidRight;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var $foreign = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];            
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  }; 
  var applyArray = new Apply(function () {
      return Data_Functor.functorArray;
  }, $foreign.arrayApply);
  var apply = function (dict) {
      return dict.apply;
  };
  var applyFirst = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"])(a))(b);
          };
      };
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applyFirst"] = applyFirst;
  exports["applySecond"] = applySecond;
  exports["applyArray"] = applyArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Unit = $PS["Data.Unit"];                  
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var when = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v) {
                  return v1;
              };
              if (!v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative (line 61, column 1 - line 61, column 63): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
  exports["when"] = when;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var $foreign = $PS["Control.Bind"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Function = $PS["Data.Function"];          
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };
  var Discard = function (discard) {
      this.discard = discard;
  };
  var discard = function (dict) {
      return dict.discard;
  }; 
  var bindArray = new Bind(function () {
      return Control_Apply.applyArray;
  }, $foreign.arrayBind);
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  var composeKleisliFlipped = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bindFlipped(dictBind)(f)(g(a));
              };
          };
      };
  }; 
  var discardUnit = new Discard(function (dictBind) {
      return bind(dictBind);
  });
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["discard"] = discard;
  exports["composeKleisliFlipped"] = composeKleisliFlipped;
  exports["bindArray"] = bindArray;
  exports["discardUnit"] = discardUnit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Lazy"] = $PS["Control.Lazy"] || {};
  var exports = $PS["Control.Lazy"];               
  var Lazy = function (defer) {
      this.defer = defer;
  }; 
  var defer = function (dict) {
      return dict.defer;
  };
  var fix = function (dictLazy) {
      return function (f) {
          var go = defer(dictLazy)(function (v) {
              return f(go);
          });
          return go;
      };
  };
  exports["defer"] = defer;
  exports["Lazy"] = Lazy;
  exports["fix"] = fix;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];                
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];          
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 230, column 1 - line 230, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var isNothing = maybe(true)(Data_Function["const"](false));
  var isJust = maybe(false)(Data_Function["const"](true));
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
  };
  var fromJust = function (dictPartial) {
      return function (v) {
          if (v instanceof Just) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 281, column 1 - line 281, column 46): " + [ v.constructor.name ]);
      };
  };
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 68, column 1 - line 70, column 30): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Control_Bind.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 126, column 1 - line 128, column 28): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["fromMaybe"] = fromMaybe;
  exports["isJust"] = isJust;
  exports["isNothing"] = isNothing;
  exports["fromJust"] = fromJust;
  exports["functorMaybe"] = functorMaybe;
  exports["bindMaybe"] = bindMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Either"] = $PS["Data.Either"] || {};
  var exports = $PS["Data.Either"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];              
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var note = function (a) {
      return Data_Maybe.maybe(new Left(a))(Right.create);
  }; 
  var functorEither = new Data_Functor.Functor(function (f) {
      return function (m) {
          if (m instanceof Left) {
              return new Left(m.value0);
          };
          if (m instanceof Right) {
              return new Right(f(m.value0));
          };
          throw new Error("Failed pattern match at Data.Either (line 31, column 1 - line 31, column 52): " + [ m.constructor.name ]);
      };
  });
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either (line 208, column 1 - line 208, column 64): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var hush = either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create);
  var applyEither = new Control_Apply.Apply(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Left) {
              return new Left(v.value0);
          };
          if (v instanceof Right) {
              return Data_Functor.map(functorEither)(v.value0)(v1);
          };
          throw new Error("Failed pattern match at Data.Either (line 70, column 1 - line 72, column 30): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindEither = new Control_Bind.Bind(function () {
      return applyEither;
  }, either(function (e) {
      return function (v) {
          return new Left(e);
      };
  })(function (a) {
      return function (f) {
          return f(a);
      };
  }));
  var applicativeEither = new Control_Applicative.Applicative(function () {
      return applyEither;
  }, Right.create);
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["note"] = note;
  exports["hush"] = hush;
  exports["functorEither"] = functorEither;
  exports["applicativeEither"] = applicativeEither;
  exports["bindEither"] = bindEither;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Monad.Error.Class"] = $PS["Control.Monad.Error.Class"] || {};
  var exports = $PS["Control.Monad.Error.Class"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];                        
  var MonadThrow = function (Monad0, throwError) {
      this.Monad0 = Monad0;
      this.throwError = throwError;
  };
  var MonadError = function (MonadThrow0, catchError) {
      this.MonadThrow0 = MonadThrow0;
      this.catchError = catchError;
  };
  var throwError = function (dict) {
      return dict.throwError;
  };                                                      
  var catchError = function (dict) {
      return dict.catchError;
  };
  var $$try = function (dictMonadError) {
      return function (a) {
          return catchError(dictMonadError)(Data_Functor.map(((((dictMonadError.MonadThrow0()).Monad0()).Bind1()).Apply0()).Functor0())(Data_Either.Right.create)(a))((function () {
              var $17 = Control_Applicative.pure(((dictMonadError.MonadThrow0()).Monad0()).Applicative0());
              return function ($18) {
                  return $17(Data_Either.Left.create($18));
              };
          })());
      };
  };
  exports["throwError"] = throwError;
  exports["MonadThrow"] = MonadThrow;
  exports["MonadError"] = MonadError;
  exports["try"] = $$try;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Tuple"] = $PS["Data.Tuple"] || {};
  var exports = $PS["Data.Tuple"];                 
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var uncurry = function (f) {
      return function (v) {
          return f(v.value0)(v.value1);
      };
  };
  var snd = function (v) {
      return v.value1;
  };                                                                                                    
  var fst = function (v) {
      return v.value0;
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
  exports["uncurry"] = uncurry;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Monad.State.Class"] = $PS["Control.Monad.State.Class"] || {};
  var exports = $PS["Control.Monad.State.Class"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];                
  var MonadState = function (Monad0, state) {
      this.Monad0 = Monad0;
      this.state = state;
  };
  var state = function (dict) {
      return dict.state;
  };
  var modify_ = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              return new Data_Tuple.Tuple(Data_Unit.unit, f(s));
          });
      };
  };
  var gets = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              return new Data_Tuple.Tuple(f(s), s);
          });
      };
  };
  exports["state"] = state;
  exports["MonadState"] = MonadState;
  exports["gets"] = gets;
  exports["modify_"] = modify_;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Monad.Trans.Class"] = $PS["Control.Monad.Trans.Class"] || {};
  var exports = $PS["Control.Monad.Trans.Class"];
  var MonadTrans = function (lift) {
      this.lift = lift;
  };
  var lift = function (dict) {
      return dict.lift;
  };
  exports["lift"] = lift;
  exports["MonadTrans"] = MonadTrans;
})(PS);
(function(exports) {
  "use strict";

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Symbol"] = $PS["Data.Symbol"] || {};
  var exports = $PS["Data.Symbol"];
  var IsSymbol = function (reflectSymbol) {
      this.reflectSymbol = reflectSymbol;
  };
  var reflectSymbol = function (dict) {
      return dict.reflectSymbol;
  };
  exports["IsSymbol"] = IsSymbol;
  exports["reflectSymbol"] = reflectSymbol;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeGet = function (label) {
    return function (rec) {
      return rec[label];
    };
  };

  exports.unsafeSet = function (label) {
    return function (value) {
      return function (rec) {
        var copy = {};
        for (var key in rec) {
          if ({}.hasOwnProperty.call(rec, key)) {
            copy[key] = rec[key];
          }
        }
        copy[label] = value;
        return copy;
      };
    };
  };
})(PS["Record.Unsafe"] = PS["Record.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Record.Unsafe"] = $PS["Record.Unsafe"] || {};
  var exports = $PS["Record.Unsafe"];
  var $foreign = $PS["Record.Unsafe"];
  exports["unsafeGet"] = $foreign.unsafeGet;
  exports["unsafeSet"] = $foreign.unsafeSet;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Type.Proxy"] = $PS["Type.Proxy"] || {};
  var exports = $PS["Type.Proxy"];
  var $$Proxy = (function () {
      function $$Proxy() {

      };
      $$Proxy.value = new $$Proxy();
      return $$Proxy;
  })();
  exports["Proxy"] = $$Proxy;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var $foreign = $PS["Data.Semigroup"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var SemigroupRecord = function (appendRecord) {
      this.appendRecord = appendRecord;
  };
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupString = new Semigroup($foreign.concatString);
  var semigroupRecordNil = new SemigroupRecord(function (v) {
      return function (v1) {
          return function (v2) {
              return {};
          };
      };
  });
  var semigroupArray = new Semigroup($foreign.concatArray);
  var appendRecord = function (dict) {
      return dict.appendRecord;
  };
  var semigroupRecord = function (dictRowToList) {
      return function (dictSemigroupRecord) {
          return new Semigroup(appendRecord(dictSemigroupRecord)(Type_Proxy["Proxy"].value));
      };
  };
  var append = function (dict) {
      return dict.append;
  };
  var semigroupFn = function (dictSemigroup) {
      return new Semigroup(function (f) {
          return function (g) {
              return function (x) {
                  return append(dictSemigroup)(f(x))(g(x));
              };
          };
      });
  };
  var semigroupRecordCons = function (dictIsSymbol) {
      return function (dictCons) {
          return function (dictSemigroupRecord) {
              return function (dictSemigroup) {
                  return new SemigroupRecord(function (v) {
                      return function (ra) {
                          return function (rb) {
                              var tail = appendRecord(dictSemigroupRecord)(Type_Proxy["Proxy"].value)(ra)(rb);
                              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                              var insert = Record_Unsafe.unsafeSet(key);
                              var get = Record_Unsafe.unsafeGet(key);
                              return insert(append(dictSemigroup)(get(ra))(get(rb)))(tail);
                          };
                      };
                  });
              };
          };
      };
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupString"] = semigroupString;
  exports["semigroupFn"] = semigroupFn;
  exports["semigroupArray"] = semigroupArray;
  exports["semigroupRecord"] = semigroupRecord;
  exports["semigroupRecordNil"] = semigroupRecordNil;
  exports["semigroupRecordCons"] = semigroupRecordCons;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Monad.Except.Trans"] = $PS["Control.Monad.Except.Trans"] || {};
  var exports = $PS["Control.Monad.Except.Trans"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Semigroup = $PS["Data.Semigroup"];            
  var ExceptT = function (x) {
      return x;
  };
  var runExceptT = function (v) {
      return v;
  }; 
  var monadTransExceptT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      return function (m) {
          return Control_Bind.bind(dictMonad.Bind1())(m)(function (a) {
              return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(a));
          });
      };
  });
  var mapExceptT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorExceptT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));
      });
  };
  var monadExceptT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeExceptT(dictMonad);
      }, function () {
          return bindExceptT(dictMonad);
      });
  };
  var bindExceptT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyExceptT(dictMonad);
      }, function (v) {
          return function (k) {
              return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either((function () {
                  var $91 = Control_Applicative.pure(dictMonad.Applicative0());
                  return function ($92) {
                      return $91(Data_Either.Left.create($92));
                  };
              })())(function (a) {
                  var v1 = k(a);
                  return v1;
              }));
          };
      });
  };
  var applyExceptT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadExceptT(dictMonad)));
  };
  var applicativeExceptT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyExceptT(dictMonad);
      }, (function () {
          var $93 = Control_Applicative.pure(dictMonad.Applicative0());
          return function ($94) {
              return ExceptT($93(Data_Either.Right.create($94)));
          };
      })());
  };
  var monadStateExceptT = function (dictMonadState) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadExceptT(dictMonadState.Monad0());
      }, function (f) {
          return Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadState.Monad0())(Control_Monad_State_Class.state(dictMonadState)(f));
      });
  };
  var monadThrowExceptT = function (dictMonad) {
      return new Control_Monad_Error_Class.MonadThrow(function () {
          return monadExceptT(dictMonad);
      }, (function () {
          var $103 = Control_Applicative.pure(dictMonad.Applicative0());
          return function ($104) {
              return ExceptT($103(Data_Either.Left.create($104)));
          };
      })());
  };
  var altExceptT = function (dictSemigroup) {
      return function (dictMonad) {
          return new Control_Alt.Alt(function () {
              return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
          }, function (v) {
              return function (v1) {
                  return Control_Bind.bind(dictMonad.Bind1())(v)(function (rm) {
                      if (rm instanceof Data_Either.Right) {
                          return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(rm.value0));
                      };
                      if (rm instanceof Data_Either.Left) {
                          return Control_Bind.bind(dictMonad.Bind1())(v1)(function (rn) {
                              if (rn instanceof Data_Either.Right) {
                                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(rn.value0));
                              };
                              if (rn instanceof Data_Either.Left) {
                                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Left(Data_Semigroup.append(dictSemigroup)(rm.value0)(rn.value0)));
                              };
                              throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 87, column 9 - line 89, column 49): " + [ rn.constructor.name ]);
                          });
                      };
                      throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 83, column 5 - line 89, column 49): " + [ rm.constructor.name ]);
                  });
              };
          });
      };
  };
  exports["ExceptT"] = ExceptT;
  exports["runExceptT"] = runExceptT;
  exports["functorExceptT"] = functorExceptT;
  exports["applyExceptT"] = applyExceptT;
  exports["applicativeExceptT"] = applicativeExceptT;
  exports["bindExceptT"] = bindExceptT;
  exports["altExceptT"] = altExceptT;
  exports["monadThrowExceptT"] = monadThrowExceptT;
  exports["monadStateExceptT"] = monadStateExceptT;
})(PS);
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Unsafe.Coerce"] = $PS["Unsafe.Coerce"] || {};
  var exports = $PS["Unsafe.Coerce"];
  var $foreign = $PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Safe.Coerce"] = $PS["Safe.Coerce"] || {};
  var exports = $PS["Safe.Coerce"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var coerce = function (dictCoercible) {
      return Unsafe_Coerce.unsafeCoerce;
  };
  exports["coerce"] = coerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Newtype"] = $PS["Data.Newtype"] || {};
  var exports = $PS["Data.Newtype"];
  var Safe_Coerce = $PS["Safe.Coerce"];
  var wrap = function (dictNewtype) {
      return Safe_Coerce.coerce();
  };
  var unwrap = function (dictNewtype) {
      return Safe_Coerce.coerce();
  };
  var alaF = function (dictCoercible) {
      return function (dictCoercible1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return Safe_Coerce.coerce();
                  };
              };
          };
      };
  };
  exports["wrap"] = wrap;
  exports["unwrap"] = unwrap;
  exports["alaF"] = alaF;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Monad.Except"] = $PS["Control.Monad.Except"] || {};
  var exports = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Newtype = $PS["Data.Newtype"];                                                
  var runExcept = (function () {
      var $0 = Data_Newtype.unwrap();
      return function ($1) {
          return $0(Control_Monad_Except_Trans.runExceptT($1));
      };
  })();
  exports["runExcept"] = runExcept;
})(PS);
(function(exports) {
  "use strict";

  exports.map_ = function (f) {
    return function (a) {
      return function () {
        return f(a());
      };
    };
  };

  exports.pure_ = function (a) {
    return function () {
      return a;
    };
  };

  exports.bind_ = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.foreach = function (as) {
    return function (f) {
      return function () {
        for (var i = 0, l = as.length; i < l; i++) {
          f(as[i])();
        }
      };
    };
  };
})(PS["Control.Monad.ST.Internal"] = PS["Control.Monad.ST.Internal"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Monad.ST.Internal"] = $PS["Control.Monad.ST.Internal"] || {};
  var exports = $PS["Control.Monad.ST.Internal"];
  var $foreign = $PS["Control.Monad.ST.Internal"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];
  var functorST = new Data_Functor.Functor($foreign.map_);
  var monadST = new Control_Monad.Monad(function () {
      return applicativeST;
  }, function () {
      return bindST;
  });
  var bindST = new Control_Bind.Bind(function () {
      return applyST;
  }, $foreign.bind_);
  var applyST = new Control_Apply.Apply(function () {
      return functorST;
  }, Control_Monad.ap(monadST));
  var applicativeST = new Control_Applicative.Applicative(function () {
      return applyST;
  }, $foreign.pure_);
  exports["functorST"] = functorST;
  exports["applicativeST"] = applicativeST;
  exports["monadST"] = monadST;
  exports["foreach"] = $foreign.foreach;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Monad.State.Trans"] = $PS["Control.Monad.State.Trans"] || {};
  var exports = $PS["Control.Monad.State.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];                      
  var StateT = function (x) {
      return x;
  };
  var runStateT = function (v) {
      return v;
  };
  var lazyStateT = new Control_Lazy.Lazy(function (f) {
      return function (s) {
          var v = f(Data_Unit.unit);
          return v(s);
      };
  });
  var functorStateT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return function (s) {
                  return Data_Functor.map(dictFunctor)(function (v1) {
                      return new Data_Tuple.Tuple(f(v1.value0), v1.value1);
                  })(v(s));
              };
          };
      });
  };
  var evalStateT = function (dictFunctor) {
      return function (v) {
          return function (s) {
              return Data_Functor.map(dictFunctor)(Data_Tuple.fst)(v(s));
          };
      };
  };
  var monadStateT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeStateT(dictMonad);
      }, function () {
          return bindStateT(dictMonad);
      });
  };
  var bindStateT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyStateT(dictMonad);
      }, function (v) {
          return function (f) {
              return function (s) {
                  return Control_Bind.bind(dictMonad.Bind1())(v(s))(function (v1) {
                      var v3 = f(v1.value0);
                      return v3(v1.value1);
                  });
              };
          };
      });
  };
  var applyStateT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorStateT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadStateT(dictMonad)));
  };
  var applicativeStateT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyStateT(dictMonad);
      }, function (a) {
          return function (s) {
              return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(a, s));
          };
      });
  };
  var monadStateStateT = function (dictMonad) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadStateT(dictMonad);
      }, function (f) {
          return StateT((function () {
              var $113 = Control_Applicative.pure(dictMonad.Applicative0());
              return function ($114) {
                  return $113(f($114));
              };
          })());
      });
  };
  exports["StateT"] = StateT;
  exports["runStateT"] = runStateT;
  exports["evalStateT"] = evalStateT;
  exports["functorStateT"] = functorStateT;
  exports["monadStateT"] = monadStateT;
  exports["lazyStateT"] = lazyStateT;
  exports["monadStateStateT"] = monadStateStateT;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Parallel.Class"] = $PS["Control.Parallel.Class"] || {};
  var exports = $PS["Control.Parallel.Class"];       
  var Parallel = function (Applicative1, Monad0, parallel, sequential) {
      this.Applicative1 = Applicative1;
      this.Monad0 = Monad0;
      this.parallel = parallel;
      this.sequential = sequential;
  };
  var sequential = function (dict) {
      return dict.sequential;
  };
  var parallel = function (dict) {
      return dict.parallel;
  };
  exports["parallel"] = parallel;
  exports["sequential"] = sequential;
  exports["Parallel"] = Parallel;
})(PS);
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };

  exports.eqBooleanImpl = refEq;
  exports.eqIntImpl = refEq;   
  exports.eqCharImpl = refEq;
  exports.eqStringImpl = refEq;

  exports.eqArrayImpl = function (f) {
    return function (xs) {
      return function (ys) {
        if (xs.length !== ys.length) return false;
        for (var i = 0; i < xs.length; i++) {
          if (!f(xs[i])(ys[i])) return false;
        }
        return true;
      };
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];
  var Eq = function (eq) {
      this.eq = eq;
  }; 
  var eqString = new Eq($foreign.eqStringImpl);
  var eqInt = new Eq($foreign.eqIntImpl);
  var eqChar = new Eq($foreign.eqCharImpl);
  var eqBoolean = new Eq($foreign.eqBooleanImpl);
  var eq = function (dict) {
      return dict.eq;
  };
  var eqArray = function (dictEq) {
      return new Eq($foreign.eqArrayImpl(eq(dictEq)));
  };
  var notEq = function (dictEq) {
      return function (x) {
          return function (y) {
              return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
          };
      };
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["notEq"] = notEq;
  exports["eqInt"] = eqInt;
  exports["eqChar"] = eqChar;
  exports["eqString"] = eqString;
  exports["eqArray"] = eqArray;
})(PS);
(function(exports) {
  "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.HeytingAlgebra"] = $PS["Data.HeytingAlgebra"] || {};
  var exports = $PS["Data.HeytingAlgebra"];
  var $foreign = $PS["Data.HeytingAlgebra"];
  var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
      this.conj = conj;
      this.disj = disj;
      this.ff = ff;
      this.implies = implies;
      this.not = not;
      this.tt = tt;
  };
  var not = function (dict) {
      return dict.not;
  };
  var ff = function (dict) {
      return dict.ff;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
      return function (b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
  }, $foreign.boolNot, true);
  exports["ff"] = ff;
  exports["disj"] = disj;
  exports["not"] = not;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var MonoidRecord = function (SemigroupRecord0, memptyRecord) {
      this.SemigroupRecord0 = SemigroupRecord0;
      this.memptyRecord = memptyRecord;
  };
  var Monoid = function (Semigroup0, mempty) {
      this.Semigroup0 = Semigroup0;
      this.mempty = mempty;
  };                 
  var monoidString = new Monoid(function () {
      return Data_Semigroup.semigroupString;
  }, "");
  var monoidRecordNil = new MonoidRecord(function () {
      return Data_Semigroup.semigroupRecordNil;
  }, function (v) {
      return {};
  });                        
  var monoidArray = new Monoid(function () {
      return Data_Semigroup.semigroupArray;
  }, [  ]);
  var memptyRecord = function (dict) {
      return dict.memptyRecord;
  };
  var monoidRecord = function (dictRowToList) {
      return function (dictMonoidRecord) {
          return new Monoid(function () {
              return Data_Semigroup.semigroupRecord()(dictMonoidRecord.SemigroupRecord0());
          }, memptyRecord(dictMonoidRecord)(Type_Proxy["Proxy"].value));
      };
  };
  var mempty = function (dict) {
      return dict.mempty;
  };
  var monoidFn = function (dictMonoid) {
      return new Monoid(function () {
          return Data_Semigroup.semigroupFn(dictMonoid.Semigroup0());
      }, function (v) {
          return mempty(dictMonoid);
      });
  };
  var monoidRecordCons = function (dictIsSymbol) {
      return function (dictMonoid) {
          return function (dictCons) {
              return function (dictMonoidRecord) {
                  return new MonoidRecord(function () {
                      return Data_Semigroup.semigroupRecordCons(dictIsSymbol)()(dictMonoidRecord.SemigroupRecord0())(dictMonoid.Semigroup0());
                  }, function (v) {
                      var tail = memptyRecord(dictMonoidRecord)(Type_Proxy["Proxy"].value);
                      var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                      var insert = Record_Unsafe.unsafeSet(key);
                      return insert(mempty(dictMonoid))(tail);
                  });
              };
          };
      };
  };
  var guard = function (dictMonoid) {
      return function (v) {
          return function (v1) {
              if (v) {
                  return v1;
              };
              if (!v) {
                  return mempty(dictMonoid);
              };
              throw new Error("Failed pattern match at Data.Monoid (line 94, column 1 - line 94, column 49): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["guard"] = guard;
  exports["monoidFn"] = monoidFn;
  exports["monoidString"] = monoidString;
  exports["monoidArray"] = monoidArray;
  exports["monoidRecord"] = monoidRecord;
  exports["monoidRecordNil"] = monoidRecordNil;
  exports["monoidRecordCons"] = monoidRecordCons;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Monoid.Disj"] = $PS["Data.Monoid.Disj"] || {};
  var exports = $PS["Data.Monoid.Disj"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Disj = function (x) {
      return x;
  };
  var semigroupDisj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var monoidDisj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDisj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.ff(dictHeytingAlgebra));
  };
  exports["Disj"] = Disj;
  exports["monoidDisj"] = monoidDisj;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Monoid_Disj = $PS["Data.Monoid.Disj"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];                
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)((function () {
                  var $311 = Control_Apply.applySecond(dictApplicative.Apply0());
                  return function ($312) {
                      return $311(f($312));
                  };
              })())(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var intercalate = function (dictFoldable) {
      return function (dictMonoid) {
          return function (sep) {
              return function (xs) {
                  var go = function (v) {
                      return function (x) {
                          if (v.init) {
                              return {
                                  init: false,
                                  acc: x
                              };
                          };
                          return {
                              init: false,
                              acc: Data_Semigroup.append(dictMonoid.Semigroup0())(v.acc)(Data_Semigroup.append(dictMonoid.Semigroup0())(sep)(x))
                          };
                      };
                  };
                  return (foldl(dictFoldable)(go)({
                      init: true,
                      acc: Data_Monoid.mempty(dictMonoid)
                  })(xs)).acc;
              };
          };
      };
  }; 
  var foldableMaybe = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return Data_Monoid.mempty(dictMonoid);
              };
              if (v instanceof Data_Maybe.Just) {
                  return f(v.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(z)(v1.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(v1.value0)(z);
              };
              throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var fold = function (dictFoldable) {
      return function (dictMonoid) {
          return foldMap(dictFoldable)(dictMonoid)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var any = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF()()()()(Data_Monoid_Disj.Disj)(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra)));
      };
  };
  var elem = function (dictFoldable) {
      return function (dictEq) {
          var $321 = any(dictFoldable)(Data_HeytingAlgebra.heytingAlgebraBoolean);
          var $322 = Data_Eq.eq(dictEq);
          return function ($323) {
              return $321($322($323));
          };
      };
  };
  var notElem = function (dictFoldable) {
      return function (dictEq) {
          return function (x) {
              var $324 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
              var $325 = elem(dictFoldable)(dictEq)(x);
              return function ($326) {
                  return $324($325($326));
              };
          };
      };
  };
  exports["Foldable"] = Foldable;
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["foldMap"] = foldMap;
  exports["fold"] = fold;
  exports["traverse_"] = traverse_;
  exports["intercalate"] = intercalate;
  exports["elem"] = elem;
  exports["notElem"] = notElem;
  exports["foldableArray"] = foldableArray;
  exports["foldableMaybe"] = foldableMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Parallel"] = $PS["Control.Parallel"] || {};
  var exports = $PS["Control.Parallel"];
  var Control_Category = $PS["Control.Category"];
  var Control_Parallel_Class = $PS["Control.Parallel.Class"];
  var Data_Foldable = $PS["Data.Foldable"];                      
  var parTraverse_ = function (dictParallel) {
      return function (dictFoldable) {
          return function (f) {
              var $17 = Control_Parallel_Class.sequential(dictParallel);
              var $18 = Data_Foldable.traverse_(dictParallel.Applicative1())(dictFoldable)((function () {
                  var $20 = Control_Parallel_Class.parallel(dictParallel);
                  return function ($21) {
                      return $20(f($21));
                  };
              })());
              return function ($19) {
                  return $17($18($19));
              };
          };
      };
  };
  var parSequence_ = function (dictParallel) {
      return function (dictFoldable) {
          return parTraverse_(dictParallel)(dictFoldable)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  exports["parSequence_"] = parSequence_;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Plus"] = $PS["Control.Plus"] || {};
  var exports = $PS["Control.Plus"];                     
  var Plus = function (Alt0, empty) {
      this.Alt0 = Alt0;
      this.empty = empty;
  };       
  var empty = function (dict) {
      return dict.empty;
  };
  exports["Plus"] = Plus;
  exports["empty"] = empty;
})(PS);
(function(exports) {
  // module Control.Promise

  exports.promise = function (f) {
    return function () {
      return new Promise(function (success, error) {
        var succF = function (s) { return function() { return success(s); } };
        var failF = function (s) { return function() { return error(s); } };

        // This indicates the aff was wrong?
        try { f(succF)(failF)(); }
        catch (e) {
          error(e);
        }
      });
    };
  };

  exports.thenImpl = function(promise) {
    return function(errCB) {
      return function(succCB) {
        return function() {
          promise.then(succCB, errCB);
        };
      };
    };
  };
})(PS["Control.Promise"] = PS["Control.Promise"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Identity"] = $PS["Data.Identity"] || {};
  var exports = $PS["Data.Identity"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];          
  var Identity = function (x) {
      return x;
  };
  var functorIdentity = new Data_Functor.Functor(function (f) {
      return function (m) {
          return f(m);
      };
  });
  var applyIdentity = new Control_Apply.Apply(function () {
      return functorIdentity;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindIdentity = new Control_Bind.Bind(function () {
      return applyIdentity;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeIdentity = new Control_Applicative.Applicative(function () {
      return applyIdentity;
  }, Identity);
  var monadIdentity = new Control_Monad.Monad(function () {
      return applicativeIdentity;
  }, function () {
      return bindIdentity;
  });
  exports["functorIdentity"] = functorIdentity;
  exports["monadIdentity"] = monadIdentity;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.NonEmpty"] = $PS["Data.NonEmpty"] || {};
  var exports = $PS["Data.NonEmpty"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Semigroup = $PS["Data.Semigroup"];                    
  var NonEmpty = (function () {
      function NonEmpty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      NonEmpty.create = function (value0) {
          return function (value1) {
              return new NonEmpty(value0, value1);
          };
      };
      return NonEmpty;
  })();
  var singleton = function (dictPlus) {
      return function (a) {
          return new NonEmpty(a, Control_Plus.empty(dictPlus));
      };
  };
  var foldableNonEmpty = function (dictFoldable) {
      return new Data_Foldable.Foldable(function (dictMonoid) {
          return function (f) {
              return function (v) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(Data_Foldable.foldMap(dictFoldable)(dictMonoid)(f)(v.value1));
              };
          };
      }, function (f) {
          return function (b) {
              return function (v) {
                  return Data_Foldable.foldl(dictFoldable)(f)(f(b)(v.value0))(v.value1);
              };
          };
      }, function (f) {
          return function (b) {
              return function (v) {
                  return f(v.value0)(Data_Foldable.foldr(dictFoldable)(f)(b)(v.value1));
              };
          };
      });
  };
  exports["NonEmpty"] = NonEmpty;
  exports["singleton"] = singleton;
  exports["foldableNonEmpty"] = foldableNonEmpty;
})(PS);
(function(exports) {
  "use strict";

  exports.unfoldrArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var maybe = f(value);
                if (isNothing(maybe)) return result;
                var tuple = fromJust(maybe);
                result.push(fst(tuple));
                value = snd(tuple);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  "use strict";

  exports.unfoldr1ArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var tuple = f(value);
                result.push(fst(tuple));
                var maybe = snd(tuple);
                if (isNothing(maybe)) return result;
                value = fromJust(maybe);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable1"] = PS["Data.Unfoldable1"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Unfoldable1"] = $PS["Data.Unfoldable1"] || {};
  var exports = $PS["Data.Unfoldable1"];
  var $foreign = $PS["Data.Unfoldable1"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Unfoldable1 = function (unfoldr1) {
      this.unfoldr1 = unfoldr1;
  }; 
  var unfoldable1Array = new Unfoldable1($foreign.unfoldr1ArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["Unfoldable1"] = Unfoldable1;
  exports["unfoldable1Array"] = unfoldable1Array;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Unfoldable"] = $PS["Data.Unfoldable"] || {};
  var exports = $PS["Data.Unfoldable"];
  var $foreign = $PS["Data.Unfoldable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable1 = $PS["Data.Unfoldable1"];  
  var Unfoldable = function (Unfoldable10, unfoldr) {
      this.Unfoldable10 = Unfoldable10;
      this.unfoldr = unfoldr;
  };
  var unfoldr = function (dict) {
      return dict.unfoldr;
  }; 
  var unfoldableArray = new Unfoldable(function () {
      return Data_Unfoldable1.unfoldable1Array;
  }, $foreign.unfoldrArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["Unfoldable"] = Unfoldable;
  exports["unfoldr"] = unfoldr;
  exports["unfoldableArray"] = unfoldableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.List.Types"] = $PS["Data.List.Types"] || {};
  var exports = $PS["Data.List.Types"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Data_Unfoldable1 = $PS["Data.Unfoldable1"];                
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var NonEmptyList = function (x) {
      return x;
  };
  var toList = function (v) {
      return new Cons(v.value0, v.value1);
  };
  var listMap = function (f) {
      var chunkedRevMap = function ($copy_chunksAcc) {
          return function ($copy_v) {
              var $tco_var_chunksAcc = $copy_chunksAcc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(chunksAcc, v) {
                  if (v instanceof Cons && (v.value1 instanceof Cons && v.value1.value1 instanceof Cons)) {
                      $tco_var_chunksAcc = new Cons(v, chunksAcc);
                      $copy_v = v.value1.value1.value1;
                      return;
                  };
                  var unrolledMap = function (v1) {
                      if (v1 instanceof Cons && (v1.value1 instanceof Cons && v1.value1.value1 instanceof Nil)) {
                          return new Cons(f(v1.value0), new Cons(f(v1.value1.value0), Nil.value));
                      };
                      if (v1 instanceof Cons && v1.value1 instanceof Nil) {
                          return new Cons(f(v1.value0), Nil.value);
                      };
                      return Nil.value;
                  };
                  var reverseUnrolledMap = function ($copy_v1) {
                      return function ($copy_acc) {
                          var $tco_var_v1 = $copy_v1;
                          var $tco_done1 = false;
                          var $tco_result;
                          function $tco_loop(v1, acc) {
                              if (v1 instanceof Cons && (v1.value0 instanceof Cons && (v1.value0.value1 instanceof Cons && v1.value0.value1.value1 instanceof Cons))) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_acc = new Cons(f(v1.value0.value0), new Cons(f(v1.value0.value1.value0), new Cons(f(v1.value0.value1.value1.value0), acc)));
                                  return;
                              };
                              $tco_done1 = true;
                              return acc;
                          };
                          while (!$tco_done1) {
                              $tco_result = $tco_loop($tco_var_v1, $copy_acc);
                          };
                          return $tco_result;
                      };
                  };
                  $tco_done = true;
                  return reverseUnrolledMap(chunksAcc)(unrolledMap(v));
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_chunksAcc, $copy_v);
              };
              return $tco_result;
          };
      };
      return chunkedRevMap(Nil.value);
  };
  var functorList = new Data_Functor.Functor(listMap);                 
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              var $204 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
              return function ($205) {
                  return $204(f($205));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function ($copy_b) {
          return function ($copy_v) {
              var $tco_var_b = $copy_b;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(b, v) {
                  if (v instanceof Nil) {
                      $tco_done = true;
                      return b;
                  };
                  if (v instanceof Cons) {
                      $tco_var_b = f(b)(v.value0);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Types (line 112, column 12 - line 114, column 30): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_b, $copy_v);
              };
              return $tco_result;
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          var rev = (function () {
              var go = function ($copy_acc) {
                  return function ($copy_v) {
                      var $tco_var_acc = $copy_acc;
                      var $tco_done1 = false;
                      var $tco_result;
                      function $tco_loop(acc, v) {
                          if (v instanceof Nil) {
                              $tco_done1 = true;
                              return acc;
                          };
                          if (v instanceof Cons) {
                              $tco_var_acc = new Cons(v.value0, acc);
                              $copy_v = v.value1;
                              return;
                          };
                          throw new Error("Failed pattern match at Data.List.Types (line 108, column 7 - line 108, column 23): " + [ acc.constructor.name, v.constructor.name ]);
                      };
                      while (!$tco_done1) {
                          $tco_result = $tco_loop($tco_var_acc, $copy_v);
                      };
                      return $tco_result;
                  };
              };
              return go(Nil.value);
          })();
          var $206 = Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b);
          return function ($207) {
              return $206(rev($207));
          };
      };
  });
  var foldableNonEmptyList = Data_NonEmpty.foldableNonEmpty(foldableList);
  var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
      return function (ys) {
          return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
      };
  });
  var monoidList = new Data_Monoid.Monoid(function () {
      return semigroupList;
  }, Nil.value);
  var semigroupNonEmptyList = new Data_Semigroup.Semigroup(function (v) {
      return function (as$prime) {
          return new Data_NonEmpty.NonEmpty(v.value0, Data_Semigroup.append(semigroupList)(v.value1)(toList(as$prime)));
      };
  });
  var unfoldable1List = new Data_Unfoldable1.Unfoldable1(function (f) {
      return function (b) {
          var go = function ($copy_source) {
              return function ($copy_memo) {
                  var $tco_var_source = $copy_source;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(source, memo) {
                      var v = f(source);
                      if (v.value1 instanceof Data_Maybe.Just) {
                          $tco_var_source = v.value1.value0;
                          $copy_memo = new Cons(v.value0, memo);
                          return;
                      };
                      if (v.value1 instanceof Data_Maybe.Nothing) {
                          $tco_done = true;
                          return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(new Cons(v.value0, memo));
                      };
                      throw new Error("Failed pattern match at Data.List.Types (line 136, column 22 - line 138, column 61): " + [ v.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_source, $copy_memo);
                  };
                  return $tco_result;
              };
          };
          return go(b)(Nil.value);
      };
  });
  var unfoldableList = new Data_Unfoldable.Unfoldable(function () {
      return unfoldable1List;
  }, function (f) {
      return function (b) {
          var go = function ($copy_source) {
              return function ($copy_memo) {
                  var $tco_var_source = $copy_source;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(source, memo) {
                      var v = f(source);
                      if (v instanceof Data_Maybe.Nothing) {
                          $tco_done = true;
                          return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(memo);
                      };
                      if (v instanceof Data_Maybe.Just) {
                          $tco_var_source = v.value0.value1;
                          $copy_memo = new Cons(v.value0.value0, memo);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.List.Types (line 143, column 22 - line 145, column 52): " + [ v.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_source, $copy_memo);
                  };
                  return $tco_result;
              };
          };
          return go(b)(Nil.value);
      };
  });
  var applyList = new Control_Apply.Apply(function () {
      return functorList;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.List.Types (line 158, column 1 - line 160, column 48): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindList = new Control_Bind.Bind(function () {
      return applyList;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Data_Semigroup.append(semigroupList)(v1(v.value0))(Control_Bind.bind(bindList)(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.List.Types (line 165, column 1 - line 167, column 37): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeList = new Control_Applicative.Applicative(function () {
      return applyList;
  }, function (a) {
      return new Cons(a, Nil.value);
  });                                              
  var altList = new Control_Alt.Alt(function () {
      return functorList;
  }, Data_Semigroup.append(semigroupList));
  var plusList = new Control_Plus.Plus(function () {
      return altList;
  }, Nil.value);
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["NonEmptyList"] = NonEmptyList;
  exports["semigroupList"] = semigroupList;
  exports["monoidList"] = monoidList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["unfoldableList"] = unfoldableList;
  exports["applicativeList"] = applicativeList;
  exports["bindList"] = bindList;
  exports["plusList"] = plusList;
  exports["semigroupNonEmptyList"] = semigroupNonEmptyList;
  exports["foldableNonEmptyList"] = foldableNonEmptyList;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];                    
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["functorEffect"] = functorEffect;
})(PS);
(function(exports) {
  /* globals setImmediate, clearImmediate, setTimeout, clearTimeout */
  /* eslint-disable no-unused-vars, no-prototype-builtins, no-use-before-define, no-unused-labels, no-param-reassign */
  "use strict";

  var Aff = function () {
    // A unique value for empty.
    var EMPTY = {};

    /*

  An awkward approximation. We elide evidence we would otherwise need in PS for
  efficiency sake.

  data Aff eff a
    = Pure a
    | Throw Error
    | Catch (Aff eff a) (Error -> Aff eff a)
    | Sync (Eff eff a)
    | Async ((Either Error a -> Eff eff Unit) -> Eff eff (Canceler eff))
    | forall b. Bind (Aff eff b) (b -> Aff eff a)
    | forall b. Bracket (Aff eff b) (BracketConditions eff b) (b -> Aff eff a)
    | forall b. Fork Boolean (Aff eff b) ?(Fiber eff b -> a)
    | Sequential (ParAff aff a)

  */  
    var PURE    = "Pure";
    var THROW   = "Throw";
    var CATCH   = "Catch";
    var SYNC    = "Sync";
    var ASYNC   = "Async";
    var BIND    = "Bind";
    var BRACKET = "Bracket";
    var FORK    = "Fork";
    var SEQ     = "Sequential";

    /*

  data ParAff eff a
    = forall b. Map (b -> a) (ParAff eff b)
    | forall b. Apply (ParAff eff (b -> a)) (ParAff eff b)
    | Alt (ParAff eff a) (ParAff eff a)
    | ?Par (Aff eff a)

  */  
    var MAP   = "Map";
    var APPLY = "Apply";
    var ALT   = "Alt";

    // Various constructors used in interpretation
    var CONS      = "Cons";      // Cons-list, for stacks
    var RESUME    = "Resume";    // Continue indiscriminately
    var RELEASE   = "Release";   // Continue with bracket finalizers
    var FINALIZER = "Finalizer"; // A non-interruptible effect
    var FINALIZED = "Finalized"; // Marker for finalization
    var FORKED    = "Forked";    // Reference to a forked fiber, with resumption stack
    var FIBER     = "Fiber";     // Actual fiber reference
    var THUNK     = "Thunk";     // Primed effect, ready to invoke

    function Aff(tag, _1, _2, _3) {
      this.tag = tag;
      this._1  = _1;
      this._2  = _2;
      this._3  = _3;
    }

    function AffCtr(tag) {
      var fn = function (_1, _2, _3) {
        return new Aff(tag, _1, _2, _3);
      };
      fn.tag = tag;
      return fn;
    }

    function nonCanceler(error) {
      return new Aff(PURE, void 0);
    }

    function runEff(eff) {
      try {
        eff();
      } catch (error) {
        setTimeout(function () {
          throw error;
        }, 0);
      }
    }

    function runSync(left, right, eff) {
      try {
        return right(eff());
      } catch (error) {
        return left(error);
      }
    }

    function runAsync(left, eff, k) {
      try {
        return eff(k)();
      } catch (error) {
        k(left(error))();
        return nonCanceler;
      }
    }

    var Scheduler = function () {
      var limit    = 1024;
      var size     = 0;
      var ix       = 0;
      var queue    = new Array(limit);
      var draining = false;

      function drain() {
        var thunk;
        draining = true;
        while (size !== 0) {
          size--;
          thunk     = queue[ix];
          queue[ix] = void 0;
          ix        = (ix + 1) % limit;
          thunk();
        }
        draining = false;
      }

      return {
        isDraining: function () {
          return draining;
        },
        enqueue: function (cb) {
          var i, tmp;
          if (size === limit) {
            tmp = draining;
            drain();
            draining = tmp;
          }

          queue[(ix + size) % limit] = cb;
          size++;

          if (!draining) {
            drain();
          }
        }
      };
    }();

    function Supervisor(util) {
      var fibers  = {};
      var fiberId = 0;
      var count   = 0;

      return {
        register: function (fiber) {
          var fid = fiberId++;
          fiber.onComplete({
            rethrow: true,
            handler: function (result) {
              return function () {
                count--;
                delete fibers[fid];
              };
            }
          })();
          fibers[fid] = fiber;
          count++;
        },
        isEmpty: function () {
          return count === 0;
        },
        killAll: function (killError, cb) {
          return function () {
            if (count === 0) {
              return cb();
            }

            var killCount = 0;
            var kills     = {};

            function kill(fid) {
              kills[fid] = fibers[fid].kill(killError, function (result) {
                return function () {
                  delete kills[fid];
                  killCount--;
                  if (util.isLeft(result) && util.fromLeft(result)) {
                    setTimeout(function () {
                      throw util.fromLeft(result);
                    }, 0);
                  }
                  if (killCount === 0) {
                    cb();
                  }
                };
              })();
            }

            for (var k in fibers) {
              if (fibers.hasOwnProperty(k)) {
                killCount++;
                kill(k);
              }
            }

            fibers  = {};
            fiberId = 0;
            count   = 0;

            return function (error) {
              return new Aff(SYNC, function () {
                for (var k in kills) {
                  if (kills.hasOwnProperty(k)) {
                    kills[k]();
                  }
                }
              });
            };
          };
        }
      };
    }

    // Fiber state machine
    var SUSPENDED   = 0; // Suspended, pending a join.
    var CONTINUE    = 1; // Interpret the next instruction.
    var STEP_BIND   = 2; // Apply the next bind.
    var STEP_RESULT = 3; // Handle potential failure from a result.
    var PENDING     = 4; // An async effect is running.
    var RETURN      = 5; // The current stack has returned.
    var COMPLETED   = 6; // The entire fiber has completed.

    function Fiber(util, supervisor, aff) {
      // Monotonically increasing tick, increased on each asynchronous turn.
      var runTick = 0;

      // The current branch of the state machine.
      var status = SUSPENDED;

      // The current point of interest for the state machine branch.
      var step      = aff;  // Successful step
      var fail      = null; // Failure step
      var interrupt = null; // Asynchronous interrupt

      // Stack of continuations for the current fiber.
      var bhead = null;
      var btail = null;

      // Stack of attempts and finalizers for error recovery. Every `Cons` is also
      // tagged with current `interrupt` state. We use this to track which items
      // should be ignored or evaluated as a result of a kill.
      var attempts = null;

      // A special state is needed for Bracket, because it cannot be killed. When
      // we enter a bracket acquisition or finalizer, we increment the counter,
      // and then decrement once complete.
      var bracketCount = 0;

      // Each join gets a new id so they can be revoked.
      var joinId  = 0;
      var joins   = null;
      var rethrow = true;

      // Each invocation of `run` requires a tick. When an asynchronous effect is
      // resolved, we must check that the local tick coincides with the fiber
      // tick before resuming. This prevents multiple async continuations from
      // accidentally resuming the same fiber. A common example may be invoking
      // the provided callback in `makeAff` more than once, but it may also be an
      // async effect resuming after the fiber was already cancelled.
      function run(localRunTick) {
        var tmp, result, attempt;
        while (true) {
          tmp       = null;
          result    = null;
          attempt   = null;

          switch (status) {
          case STEP_BIND:
            status = CONTINUE;
            try {
              step   = bhead(step);
              if (btail === null) {
                bhead = null;
              } else {
                bhead = btail._1;
                btail = btail._2;
              }
            } catch (e) {
              status = RETURN;
              fail   = util.left(e);
              step   = null;
            }
            break;

          case STEP_RESULT:
            if (util.isLeft(step)) {
              status = RETURN;
              fail   = step;
              step   = null;
            } else if (bhead === null) {
              status = RETURN;
            } else {
              status = STEP_BIND;
              step   = util.fromRight(step);
            }
            break;

          case CONTINUE:
            switch (step.tag) {
            case BIND:
              if (bhead) {
                btail = new Aff(CONS, bhead, btail);
              }
              bhead  = step._2;
              status = CONTINUE;
              step   = step._1;
              break;

            case PURE:
              if (bhead === null) {
                status = RETURN;
                step   = util.right(step._1);
              } else {
                status = STEP_BIND;
                step   = step._1;
              }
              break;

            case SYNC:
              status = STEP_RESULT;
              step   = runSync(util.left, util.right, step._1);
              break;

            case ASYNC:
              status = PENDING;
              step   = runAsync(util.left, step._1, function (result) {
                return function () {
                  if (runTick !== localRunTick) {
                    return;
                  }
                  runTick++;
                  Scheduler.enqueue(function () {
                    // It's possible to interrupt the fiber between enqueuing and
                    // resuming, so we need to check that the runTick is still
                    // valid.
                    if (runTick !== localRunTick + 1) {
                      return;
                    }
                    status = STEP_RESULT;
                    step   = result;
                    run(runTick);
                  });
                };
              });
              return;

            case THROW:
              status = RETURN;
              fail   = util.left(step._1);
              step   = null;
              break;

            // Enqueue the Catch so that we can call the error handler later on
            // in case of an exception.
            case CATCH:
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead    = null;
              btail    = null;
              status   = CONTINUE;
              step     = step._1;
              break;

            // Enqueue the Bracket so that we can call the appropriate handlers
            // after resource acquisition.
            case BRACKET:
              bracketCount++;
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead  = null;
              btail  = null;
              status = CONTINUE;
              step   = step._1;
              break;

            case FORK:
              status = STEP_RESULT;
              tmp    = Fiber(util, supervisor, step._2);
              if (supervisor) {
                supervisor.register(tmp);
              }
              if (step._1) {
                tmp.run();
              }
              step = util.right(tmp);
              break;

            case SEQ:
              status = CONTINUE;
              step   = sequential(util, supervisor, step._1);
              break;
            }
            break;

          case RETURN:
            bhead = null;
            btail = null;
            // If the current stack has returned, and we have no other stacks to
            // resume or finalizers to run, the fiber has halted and we can
            // invoke all join callbacks. Otherwise we need to resume.
            if (attempts === null) {
              status = COMPLETED;
              step   = interrupt || fail || step;
            } else {
              // The interrupt status for the enqueued item.
              tmp      = attempts._3;
              attempt  = attempts._1;
              attempts = attempts._2;

              switch (attempt.tag) {
              // We cannot recover from an unmasked interrupt. Otherwise we should
              // continue stepping, or run the exception handler if an exception
              // was raised.
              case CATCH:
                // We should compare the interrupt status as well because we
                // only want it to apply if there has been an interrupt since
                // enqueuing the catch.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  status = RETURN;
                } else if (fail) {
                  status = CONTINUE;
                  step   = attempt._2(util.fromLeft(fail));
                  fail   = null;
                }
                break;

              // We cannot resume from an unmasked interrupt or exception.
              case RESUME:
                // As with Catch, we only want to ignore in the case of an
                // interrupt since enqueing the item.
                if (interrupt && interrupt !== tmp && bracketCount === 0 || fail) {
                  status = RETURN;
                } else {
                  bhead  = attempt._1;
                  btail  = attempt._2;
                  status = STEP_BIND;
                  step   = util.fromRight(step);
                }
                break;

              // If we have a bracket, we should enqueue the handlers,
              // and continue with the success branch only if the fiber has
              // not been interrupted. If the bracket acquisition failed, we
              // should not run either.
              case BRACKET:
                bracketCount--;
                if (fail === null) {
                  result   = util.fromRight(step);
                  // We need to enqueue the Release with the same interrupt
                  // status as the Bracket that is initiating it.
                  attempts = new Aff(CONS, new Aff(RELEASE, attempt._2, result), attempts, tmp);
                  // We should only coninue as long as the interrupt status has not changed or
                  // we are currently within a non-interruptable finalizer.
                  if (interrupt === tmp || bracketCount > 0) {
                    status = CONTINUE;
                    step   = attempt._3(result);
                  }
                }
                break;

              // Enqueue the appropriate handler. We increase the bracket count
              // because it should not be cancelled.
              case RELEASE:
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                // It has only been killed if the interrupt status has changed
                // since we enqueued the item, and the bracket count is 0. If the
                // bracket count is non-zero then we are in a masked state so it's
                // impossible to be killed.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  step = attempt._1.killed(util.fromLeft(interrupt))(attempt._2);
                } else if (fail) {
                  step = attempt._1.failed(util.fromLeft(fail))(attempt._2);
                } else {
                  step = attempt._1.completed(util.fromRight(step))(attempt._2);
                }
                fail = null;
                bracketCount++;
                break;

              case FINALIZER:
                bracketCount++;
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                step     = attempt._1;
                break;

              case FINALIZED:
                bracketCount--;
                status = RETURN;
                step   = attempt._1;
                fail   = attempt._2;
                break;
              }
            }
            break;

          case COMPLETED:
            for (var k in joins) {
              if (joins.hasOwnProperty(k)) {
                rethrow = rethrow && joins[k].rethrow;
                runEff(joins[k].handler(step));
              }
            }
            joins = null;
            // If we have an interrupt and a fail, then the thread threw while
            // running finalizers. This should always rethrow in a fresh stack.
            if (interrupt && fail) {
              setTimeout(function () {
                throw util.fromLeft(fail);
              }, 0);
            // If we have an unhandled exception, and no other fiber has joined
            // then we need to throw the exception in a fresh stack.
            } else if (util.isLeft(step) && rethrow) {
              setTimeout(function () {
                // Guard on reathrow because a completely synchronous fiber can
                // still have an observer which was added after-the-fact.
                if (rethrow) {
                  throw util.fromLeft(step);
                }
              }, 0);
            }
            return;
          case SUSPENDED:
            status = CONTINUE;
            break;
          case PENDING: return;
          }
        }
      }

      function onComplete(join) {
        return function () {
          if (status === COMPLETED) {
            rethrow = rethrow && join.rethrow;
            join.handler(step)();
            return function () {};
          }

          var jid    = joinId++;
          joins      = joins || {};
          joins[jid] = join;

          return function() {
            if (joins !== null) {
              delete joins[jid];
            }
          };
        };
      }

      function kill(error, cb) {
        return function () {
          if (status === COMPLETED) {
            cb(util.right(void 0))();
            return function () {};
          }

          var canceler = onComplete({
            rethrow: false,
            handler: function (/* unused */) {
              return cb(util.right(void 0));
            }
          })();

          switch (status) {
          case SUSPENDED:
            interrupt = util.left(error);
            status    = COMPLETED;
            step      = interrupt;
            run(runTick);
            break;
          case PENDING:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              if (status === PENDING) {
                attempts = new Aff(CONS, new Aff(FINALIZER, step(error)), attempts, interrupt);
              }
              status   = RETURN;
              step     = null;
              fail     = null;
              run(++runTick);
            }
            break;
          default:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              status = RETURN;
              step   = null;
              fail   = null;
            }
          }

          return canceler;
        };
      }

      function join(cb) {
        return function () {
          var canceler = onComplete({
            rethrow: false,
            handler: cb
          })();
          if (status === SUSPENDED) {
            run(runTick);
          }
          return canceler;
        };
      }

      return {
        kill: kill,
        join: join,
        onComplete: onComplete,
        isSuspended: function () {
          return status === SUSPENDED;
        },
        run: function () {
          if (status === SUSPENDED) {
            if (!Scheduler.isDraining()) {
              Scheduler.enqueue(function () {
                run(runTick);
              });
            } else {
              run(runTick);
            }
          }
        }
      };
    }

    function runPar(util, supervisor, par, cb) {
      // Table of all forked fibers.
      var fiberId   = 0;
      var fibers    = {};

      // Table of currently running cancelers, as a product of `Alt` behavior.
      var killId    = 0;
      var kills     = {};

      // Error used for early cancelation on Alt branches.
      var early     = new Error("[ParAff] Early exit");

      // Error used to kill the entire tree.
      var interrupt = null;

      // The root pointer of the tree.
      var root      = EMPTY;

      // Walks a tree, invoking all the cancelers. Returns the table of pending
      // cancellation fibers.
      function kill(error, par, cb) {
        var step  = par;
        var head  = null;
        var tail  = null;
        var count = 0;
        var kills = {};
        var tmp, kid;

        loop: while (true) {
          tmp = null;

          switch (step.tag) {
          case FORKED:
            if (step._3 === EMPTY) {
              tmp = fibers[step._1];
              kills[count++] = tmp.kill(error, function (result) {
                return function () {
                  count--;
                  if (count === 0) {
                    cb(result)();
                  }
                };
              });
            }
            // Terminal case.
            if (head === null) {
              break loop;
            }
            // Go down the right side of the tree.
            step = head._2;
            if (tail === null) {
              head = null;
            } else {
              head = tail._1;
              tail = tail._2;
            }
            break;
          case MAP:
            step = step._2;
            break;
          case APPLY:
          case ALT:
            if (head) {
              tail = new Aff(CONS, head, tail);
            }
            head = step;
            step = step._1;
            break;
          }
        }

        if (count === 0) {
          cb(util.right(void 0))();
        } else {
          // Run the cancelation effects. We alias `count` because it's mutable.
          kid = 0;
          tmp = count;
          for (; kid < tmp; kid++) {
            kills[kid] = kills[kid]();
          }
        }

        return kills;
      }

      // When a fiber resolves, we need to bubble back up the tree with the
      // result, computing the applicative nodes.
      function join(result, head, tail) {
        var fail, step, lhs, rhs, tmp, kid;

        if (util.isLeft(result)) {
          fail = result;
          step = null;
        } else {
          step = result;
          fail = null;
        }

        loop: while (true) {
          lhs = null;
          rhs = null;
          tmp = null;
          kid = null;

          // We should never continue if the entire tree has been interrupted.
          if (interrupt !== null) {
            return;
          }

          // We've made it all the way to the root of the tree, which means
          // the tree has fully evaluated.
          if (head === null) {
            cb(fail || step)();
            return;
          }

          // The tree has already been computed, so we shouldn't try to do it
          // again. This should never happen.
          // TODO: Remove this?
          if (head._3 !== EMPTY) {
            return;
          }

          switch (head.tag) {
          case MAP:
            if (fail === null) {
              head._3 = util.right(head._1(util.fromRight(step)));
              step    = head._3;
            } else {
              head._3 = fail;
            }
            break;
          case APPLY:
            lhs = head._1._3;
            rhs = head._2._3;
            // If we have a failure we should kill the other side because we
            // can't possible yield a result anymore.
            if (fail) {
              head._3 = fail;
              tmp     = true;
              kid     = killId++;

              kills[kid] = kill(early, fail === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(fail, null, null);
                  } else {
                    join(fail, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            } else if (lhs === EMPTY || rhs === EMPTY) {
              // We can only proceed if both sides have resolved.
              return;
            } else {
              step    = util.right(util.fromRight(lhs)(util.fromRight(rhs)));
              head._3 = step;
            }
            break;
          case ALT:
            lhs = head._1._3;
            rhs = head._2._3;
            // We can only proceed if both have resolved or we have a success
            if (lhs === EMPTY && util.isLeft(rhs) || rhs === EMPTY && util.isLeft(lhs)) {
              return;
            }
            // If both sides resolve with an error, we should continue with the
            // first error
            if (lhs !== EMPTY && util.isLeft(lhs) && rhs !== EMPTY && util.isLeft(rhs)) {
              fail    = step === lhs ? rhs : lhs;
              step    = null;
              head._3 = fail;
            } else {
              head._3 = step;
              tmp     = true;
              kid     = killId++;
              // Once a side has resolved, we need to cancel the side that is still
              // pending before we can continue.
              kills[kid] = kill(early, step === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(step, null, null);
                  } else {
                    join(step, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            }
            break;
          }

          if (tail === null) {
            head = null;
          } else {
            head = tail._1;
            tail = tail._2;
          }
        }
      }

      function resolve(fiber) {
        return function (result) {
          return function () {
            delete fibers[fiber._1];
            fiber._3 = result;
            join(result, fiber._2._1, fiber._2._2);
          };
        };
      }

      // Walks the applicative tree, substituting non-applicative nodes with
      // `FORKED` nodes. In this tree, all applicative nodes use the `_3` slot
      // as a mutable slot for memoization. In an unresolved state, the `_3`
      // slot is `EMPTY`. In the cases of `ALT` and `APPLY`, we always walk
      // the left side first, because both operations are left-associative. As
      // we `RETURN` from those branches, we then walk the right side.
      function run() {
        var status = CONTINUE;
        var step   = par;
        var head   = null;
        var tail   = null;
        var tmp, fid;

        loop: while (true) {
          tmp = null;
          fid = null;

          switch (status) {
          case CONTINUE:
            switch (step.tag) {
            case MAP:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(MAP, step._1, EMPTY, EMPTY);
              step = step._2;
              break;
            case APPLY:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(APPLY, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            case ALT:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(ALT, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            default:
              // When we hit a leaf value, we suspend the stack in the `FORKED`.
              // When the fiber resolves, it can bubble back up the tree.
              fid    = fiberId++;
              status = RETURN;
              tmp    = step;
              step   = new Aff(FORKED, fid, new Aff(CONS, head, tail), EMPTY);
              tmp    = Fiber(util, supervisor, tmp);
              tmp.onComplete({
                rethrow: false,
                handler: resolve(step)
              })();
              fibers[fid] = tmp;
              if (supervisor) {
                supervisor.register(tmp);
              }
            }
            break;
          case RETURN:
            // Terminal case, we are back at the root.
            if (head === null) {
              break loop;
            }
            // If we are done with the right side, we need to continue down the
            // left. Otherwise we should continue up the stack.
            if (head._1 === EMPTY) {
              head._1 = step;
              status  = CONTINUE;
              step    = head._2;
              head._2 = EMPTY;
            } else {
              head._2 = step;
              step    = head;
              if (tail === null) {
                head  = null;
              } else {
                head  = tail._1;
                tail  = tail._2;
              }
            }
          }
        }

        // Keep a reference to the tree root so it can be cancelled.
        root = step;

        for (fid = 0; fid < fiberId; fid++) {
          fibers[fid].run();
        }
      }

      // Cancels the entire tree. If there are already subtrees being canceled,
      // we need to first cancel those joins. We will then add fresh joins for
      // all pending branches including those that were in the process of being
      // canceled.
      function cancel(error, cb) {
        interrupt = util.left(error);
        var innerKills;
        for (var kid in kills) {
          if (kills.hasOwnProperty(kid)) {
            innerKills = kills[kid];
            for (kid in innerKills) {
              if (innerKills.hasOwnProperty(kid)) {
                innerKills[kid]();
              }
            }
          }
        }

        kills = null;
        var newKills = kill(error, root, cb);

        return function (killError) {
          return new Aff(ASYNC, function (killCb) {
            return function () {
              for (var kid in newKills) {
                if (newKills.hasOwnProperty(kid)) {
                  newKills[kid]();
                }
              }
              return nonCanceler;
            };
          });
        };
      }

      run();

      return function (killError) {
        return new Aff(ASYNC, function (killCb) {
          return function () {
            return cancel(killError, killCb);
          };
        });
      };
    }

    function sequential(util, supervisor, par) {
      return new Aff(ASYNC, function (cb) {
        return function () {
          return runPar(util, supervisor, par, cb);
        };
      });
    }

    Aff.EMPTY       = EMPTY;
    Aff.Pure        = AffCtr(PURE);
    Aff.Throw       = AffCtr(THROW);
    Aff.Catch       = AffCtr(CATCH);
    Aff.Sync        = AffCtr(SYNC);
    Aff.Async       = AffCtr(ASYNC);
    Aff.Bind        = AffCtr(BIND);
    Aff.Bracket     = AffCtr(BRACKET);
    Aff.Fork        = AffCtr(FORK);
    Aff.Seq         = AffCtr(SEQ);
    Aff.ParMap      = AffCtr(MAP);
    Aff.ParApply    = AffCtr(APPLY);
    Aff.ParAlt      = AffCtr(ALT);
    Aff.Fiber       = Fiber;
    Aff.Supervisor  = Supervisor;
    Aff.Scheduler   = Scheduler;
    Aff.nonCanceler = nonCanceler;

    return Aff;
  }();

  exports._pure = Aff.Pure;

  exports._throwError = Aff.Throw;

  exports._catchError = function (aff) {
    return function (k) {
      return Aff.Catch(aff, k);
    };
  };

  exports._map = function (f) {
    return function (aff) {
      if (aff.tag === Aff.Pure.tag) {
        return Aff.Pure(f(aff._1));
      } else {
        return Aff.Bind(aff, function (value) {
          return Aff.Pure(f(value));
        });
      }
    };
  };

  exports._bind = function (aff) {
    return function (k) {
      return Aff.Bind(aff, k);
    };
  };

  exports._liftEffect = Aff.Sync;

  exports._parAffMap = function (f) {
    return function (aff) {
      return Aff.ParMap(f, aff);
    };
  };

  exports._parAffApply = function (aff1) {
    return function (aff2) {
      return Aff.ParApply(aff1, aff2);
    };
  };

  exports.makeAff = Aff.Async;

  exports._makeFiber = function (util, aff) {
    return function () {
      return Aff.Fiber(util, null, aff);
    };
  };  

  exports._sequential = Aff.Seq;
})(PS["Effect.Aff"] = PS["Effect.Aff"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Effect.Class"] = $PS["Effect.Class"] || {};
  var exports = $PS["Effect.Class"];         
  var MonadEffect = function (Monad0, liftEffect) {
      this.Monad0 = Monad0;
      this.liftEffect = liftEffect;
  };                                                         
  var liftEffect = function (dict) {
      return dict.liftEffect;
  };
  exports["liftEffect"] = liftEffect;
  exports["MonadEffect"] = MonadEffect;
})(PS);
(function(exports) {
  "use strict";

  // module Partial.Unsafe

  exports._unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  "use strict";

  // module Partial

  exports._crashWith = function (msg) {
    throw new Error(msg);
  };
})(PS["Partial"] = PS["Partial"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Partial"] = $PS["Partial"] || {};
  var exports = $PS["Partial"];
  var $foreign = $PS["Partial"];         
  var crashWith = function (dictPartial) {
      return $foreign["_crashWith"];
  };
  exports["crashWith"] = crashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Partial.Unsafe"] = $PS["Partial.Unsafe"] || {};
  var exports = $PS["Partial.Unsafe"];
  var $foreign = $PS["Partial.Unsafe"];
  var Partial = $PS["Partial"];                
  var unsafePartial = $foreign["_unsafePartial"];
  var unsafeCrashWith = function (msg) {
      return unsafePartial(function (dictPartial) {
          return Partial.crashWith()(msg);
      });
  };
  exports["unsafeCrashWith"] = unsafeCrashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Effect.Aff"] = $PS["Effect.Aff"] || {};
  var exports = $PS["Effect.Aff"];
  var $foreign = $PS["Effect.Aff"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Parallel = $PS["Control.Parallel"];
  var Control_Parallel_Class = $PS["Control.Parallel.Class"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Class = $PS["Effect.Class"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var functorParAff = new Data_Functor.Functor($foreign["_parAffMap"]);
  var functorAff = new Data_Functor.Functor($foreign["_map"]);
  var ffiUtil = (function () {
      var unsafeFromRight = function (v) {
          if (v instanceof Data_Either.Right) {
              return v.value0;
          };
          if (v instanceof Data_Either.Left) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromRight: Left");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 404, column 21 - line 406, column 54): " + [ v.constructor.name ]);
      };
      var unsafeFromLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return v.value0;
          };
          if (v instanceof Data_Either.Right) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromLeft: Right");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 399, column 20 - line 401, column 54): " + [ v.constructor.name ]);
      };
      var isLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return true;
          };
          if (v instanceof Data_Either.Right) {
              return false;
          };
          throw new Error("Failed pattern match at Effect.Aff (line 394, column 12 - line 396, column 20): " + [ v.constructor.name ]);
      };
      return {
          isLeft: isLeft,
          fromLeft: unsafeFromLeft,
          fromRight: unsafeFromRight,
          left: Data_Either.Left.create,
          right: Data_Either.Right.create
      };
  })();
  var makeFiber = function (aff) {
      return $foreign["_makeFiber"](ffiUtil, aff);
  };
  var launchAff = function (aff) {
      return function __do() {
          var fiber = makeFiber(aff)();
          fiber.run();
          return fiber;
      };
  };
  var applyParAff = new Control_Apply.Apply(function () {
      return functorParAff;
  }, $foreign["_parAffApply"]);
  var monadAff = new Control_Monad.Monad(function () {
      return applicativeAff;
  }, function () {
      return bindAff;
  });
  var bindAff = new Control_Bind.Bind(function () {
      return applyAff;
  }, $foreign["_bind"]);
  var applyAff = new Control_Apply.Apply(function () {
      return functorAff;
  }, Control_Monad.ap(monadAff));
  var applicativeAff = new Control_Applicative.Applicative(function () {
      return applyAff;
  }, $foreign["_pure"]);
  var monadEffectAff = new Effect_Class.MonadEffect(function () {
      return monadAff;
  }, $foreign["_liftEffect"]);
  var monadThrowAff = new Control_Monad_Error_Class.MonadThrow(function () {
      return monadAff;
  }, $foreign["_throwError"]);
  var monadErrorAff = new Control_Monad_Error_Class.MonadError(function () {
      return monadThrowAff;
  }, $foreign["_catchError"]);                                  
  var runAff = function (k) {
      return function (aff) {
          return launchAff(Control_Bind.bindFlipped(bindAff)((function () {
              var $46 = Effect_Class.liftEffect(monadEffectAff);
              return function ($47) {
                  return $46(k($47));
              };
          })())(Control_Monad_Error_Class["try"](monadErrorAff)(aff)));
      };
  };
  var runAff_ = function (k) {
      return function (aff) {
          return Data_Functor["void"](Effect.functorEffect)(runAff(k)(aff));
      };
  };
  var parallelAff = new Control_Parallel_Class.Parallel(function () {
      return applicativeParAff;
  }, function () {
      return monadAff;
  }, Unsafe_Coerce.unsafeCoerce, $foreign["_sequential"]);
  var applicativeParAff = new Control_Applicative.Applicative(function () {
      return applyParAff;
  }, (function () {
      var $50 = Control_Parallel_Class.parallel(parallelAff);
      var $51 = Control_Applicative.pure(applicativeAff);
      return function ($52) {
          return $50($51($52));
      };
  })());
  var semigroupCanceler = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return function (err) {
              return Control_Parallel.parSequence_(parallelAff)(Data_Foldable.foldableArray)([ v(err), v1(err) ]);
          };
      };
  });
  var nonCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(Data_Unit.unit));
  var monoidCanceler = new Data_Monoid.Monoid(function () {
      return semigroupCanceler;
  }, nonCanceler);
  exports["runAff_"] = runAff_;
  exports["functorAff"] = functorAff;
  exports["applicativeAff"] = applicativeAff;
  exports["bindAff"] = bindAff;
  exports["monoidCanceler"] = monoidCanceler;
  exports["makeAff"] = $foreign.makeAff;
})(PS);
(function(exports) {
  "use strict";

  exports.error = function (msg) {
    return new Error(msg);
  };
})(PS["Effect.Exception"] = PS["Effect.Exception"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Effect.Exception"] = $PS["Effect.Exception"] || {};
  var exports = $PS["Effect.Exception"];
  var $foreign = $PS["Effect.Exception"];
  exports["error"] = $foreign.error;
})(PS);
(function(exports) {
  "use strict";

  exports.tagOf = function (value) {
    return Object.prototype.toString.call(value).slice(8, -1);
  };
})(PS["Foreign"] = PS["Foreign"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Boolean"] = $PS["Data.Boolean"] || {};
  var exports = $PS["Data.Boolean"];
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.List.NonEmpty"] = $PS["Data.List.NonEmpty"] || {};
  var exports = $PS["Data.List.NonEmpty"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var singleton = (function () {
      var $172 = Data_NonEmpty.singleton(Data_List_Types.plusList);
      return function ($173) {
          return Data_List_Types.NonEmptyList($172($173));
      };
  })();
  var cons$prime = function (x) {
      return function (xs) {
          return new Data_NonEmpty.NonEmpty(x, xs);
      };
  };
  exports["singleton"] = singleton;
  exports["cons'"] = cons$prime;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Foreign"] = $PS["Foreign"] || {};
  var exports = $PS["Foreign"];
  var $foreign = $PS["Foreign"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_List_NonEmpty = $PS["Data.List.NonEmpty"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var TypeMismatch = (function () {
      function TypeMismatch(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypeMismatch.create = function (value0) {
          return function (value1) {
              return new TypeMismatch(value0, value1);
          };
      };
      return TypeMismatch;
  })();                                            
  var unsafeFromForeign = Unsafe_Coerce.unsafeCoerce;
  var fail = function (dictMonad) {
      var $118 = Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(dictMonad));
      return function ($119) {
          return $118(Data_List_NonEmpty.singleton($119));
      };
  };
  var unsafeReadTagged = function (dictMonad) {
      return function (tag) {
          return function (value) {
              if ($foreign.tagOf(value) === tag) {
                  return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(dictMonad))(unsafeFromForeign(value));
              };
              if (Data_Boolean.otherwise) {
                  return fail(dictMonad)(new TypeMismatch(tag, $foreign.tagOf(value)));
              };
              throw new Error("Failed pattern match at Foreign (line 110, column 1 - line 110, column 71): " + [ tag.constructor.name, value.constructor.name ]);
          };
      };
  };
  var readString = function (dictMonad) {
      return unsafeReadTagged(dictMonad)("String");
  };
  exports["unsafeReadTagged"] = unsafeReadTagged;
  exports["readString"] = readString;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Promise"] = $PS["Control.Promise"] || {};
  var exports = $PS["Control.Promise"];
  var $foreign = $PS["Control.Promise"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_Except = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Foreign = $PS["Foreign"];                
  var toAff$prime = function (customCoerce) {
      return function (p) {
          return Effect_Aff.makeAff(function (cb) {
              return Data_Functor.voidRight(Effect.functorEffect)(Data_Monoid.mempty(Effect_Aff.monoidCanceler))($foreign.thenImpl(p)(function ($1) {
                  return cb(Data_Either.Left.create(customCoerce($1)))();
              })(function ($2) {
                  return cb(Data_Either.Right.create($2))();
              }));
          });
      };
  };
  var fromAff = function (aff) {
      return $foreign.promise(function (succ) {
          return function (err) {
              return Effect_Aff.runAff_(Data_Either.either(err)(succ))(aff);
          };
      });
  };
  var coerce = function (fn) {
      return Data_Either.either(function (v) {
          return Effect_Exception.error("Promise failed, couldn't extract JS Error or String");
      })(Control_Category.identity(Control_Category.categoryFn))(Control_Monad_Except.runExcept(Control_Alt.alt(Control_Monad_Except_Trans.altExceptT(Data_List_Types.semigroupNonEmptyList)(Data_Identity.monadIdentity))(Foreign.unsafeReadTagged(Data_Identity.monadIdentity)("Error")(fn))(Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Effect_Exception.error)(Foreign.readString(Data_Identity.monadIdentity)(fn)))));
  };
  var toAff = toAff$prime(coerce);
  exports["fromAff"] = fromAff;
  exports["toAff"] = toAff;
})(PS);
(function(exports) {
  /* eslint-disable no-eq-null, eqeqeq */
  "use strict";

  function id(x) {
    return x;
  }                       
  exports.fromString = id;
  exports.fromArray = id;
  exports.fromObject = id;

  exports.jsonNull = null;

  function isArray(a) {
    return Object.prototype.toString.call(a) === "[object Array]";
  }

  exports._caseJson = function (isNull, isBool, isNum, isStr, isArr, isObj, j) {
    if (j == null) return isNull();
    else if (typeof j === "boolean") return isBool(j);
    else if (typeof j === "number") return isNum(j);
    else if (typeof j === "string") return isStr(j);
    else if (Object.prototype.toString.call(j) === "[object Array]")
      return isArr(j);
    else return isObj(j);
  };
})(PS["Data.Argonaut.Core"] = PS["Data.Argonaut.Core"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Argonaut.Core"] = $PS["Data.Argonaut.Core"] || {};
  var exports = $PS["Data.Argonaut.Core"];
  var $foreign = $PS["Data.Argonaut.Core"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];                        
  var verbJsonType = function (def) {
      return function (f) {
          return function (g) {
              return g(def)(f);
          };
      };
  };
  var toJsonType = verbJsonType(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var isJsonType = verbJsonType(false)(Data_Function["const"](true));
  var caseJsonString = function (d) {
      return function (f) {
          return function (j) {
              return $foreign["_caseJson"](Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, Data_Function["const"](d), Data_Function["const"](d), j);
          };
      };
  };                                        
  var caseJsonObject = function (d) {
      return function (f) {
          return function (j) {
              return $foreign["_caseJson"](Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, j);
          };
      };
  };                                        
  var toObject = toJsonType(caseJsonObject);
  var caseJsonNull = function (d) {
      return function (f) {
          return function (j) {
              return $foreign["_caseJson"](f, Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), j);
          };
      };
  };
  var isNull = isJsonType(caseJsonNull);      
  var caseJsonArray = function (d) {
      return function (f) {
          return function (j) {
              return $foreign["_caseJson"](Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, Data_Function["const"](d), j);
          };
      };
  };                                      
  var toArray = toJsonType(caseJsonArray);
  exports["caseJsonString"] = caseJsonString;
  exports["isNull"] = isNull;
  exports["toArray"] = toArray;
  exports["toObject"] = toObject;
  exports["fromString"] = $foreign.fromString;
  exports["fromArray"] = $foreign.fromArray;
  exports["fromObject"] = $foreign.fromObject;
  exports["jsonNull"] = $foreign.jsonNull;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Argonaut.Decode.Error"] = $PS["Data.Argonaut.Decode.Error"] || {};
  var exports = $PS["Data.Argonaut.Decode.Error"]; 
  var TypeMismatch = (function () {
      function TypeMismatch(value0) {
          this.value0 = value0;
      };
      TypeMismatch.create = function (value0) {
          return new TypeMismatch(value0);
      };
      return TypeMismatch;
  })();
  var AtIndex = (function () {
      function AtIndex(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      AtIndex.create = function (value0) {
          return function (value1) {
              return new AtIndex(value0, value1);
          };
      };
      return AtIndex;
  })();
  var AtKey = (function () {
      function AtKey(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      AtKey.create = function (value0) {
          return function (value1) {
              return new AtKey(value0, value1);
          };
      };
      return AtKey;
  })();
  var Named = (function () {
      function Named(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Named.create = function (value0) {
          return function (value1) {
              return new Named(value0, value1);
          };
      };
      return Named;
  })();
  var MissingValue = (function () {
      function MissingValue() {

      };
      MissingValue.value = new MissingValue();
      return MissingValue;
  })();
  exports["TypeMismatch"] = TypeMismatch;
  exports["AtIndex"] = AtIndex;
  exports["AtKey"] = AtKey;
  exports["Named"] = Named;
  exports["MissingValue"] = MissingValue;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Bifunctor"] = $PS["Data.Bifunctor"] || {};
  var exports = $PS["Data.Bifunctor"];
  var Control_Category = $PS["Control.Category"];
  var Data_Either = $PS["Data.Either"];              
  var Bifunctor = function (bimap) {
      this.bimap = bimap;
  };
  var bimap = function (dict) {
      return dict.bimap;
  };
  var lmap = function (dictBifunctor) {
      return function (f) {
          return bimap(dictBifunctor)(f)(Control_Category.identity(Control_Category.categoryFn));
      };
  }; 
  var bifunctorEither = new Bifunctor(function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Data_Either.Left) {
                  return new Data_Either.Left(v(v2.value0));
              };
              if (v2 instanceof Data_Either.Right) {
                  return new Data_Either.Right(v1(v2.value0));
              };
              throw new Error("Failed pattern match at Data.Bifunctor (line 32, column 1 - line 34, column 36): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  });
  exports["lmap"] = lmap;
  exports["bifunctorEither"] = bifunctorEither;
})(PS);
(function(exports) {
  "use strict";

  exports.mapWithIndexArray = function (f) {
    return function (xs) {
      var l = xs.length;
      var result = Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(i)(xs[i]);
      }
      return result;
    };
  };
})(PS["Data.FunctorWithIndex"] = PS["Data.FunctorWithIndex"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.FunctorWithIndex"] = $PS["Data.FunctorWithIndex"] || {};
  var exports = $PS["Data.FunctorWithIndex"];
  var $foreign = $PS["Data.FunctorWithIndex"];
  var Data_Functor = $PS["Data.Functor"];          
  var FunctorWithIndex = function (Functor0, mapWithIndex) {
      this.Functor0 = Functor0;
      this.mapWithIndex = mapWithIndex;
  };
  var mapWithIndex = function (dict) {
      return dict.mapWithIndex;
  };
  var functorWithIndexArray = new FunctorWithIndex(function () {
      return Data_Functor.functorArray;
  }, $foreign.mapWithIndexArray);
  exports["FunctorWithIndex"] = FunctorWithIndex;
  exports["mapWithIndex"] = mapWithIndex;
  exports["functorWithIndexArray"] = functorWithIndexArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.FoldableWithIndex"] = $PS["Data.FoldableWithIndex"] || {};
  var exports = $PS["Data.FoldableWithIndex"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_FunctorWithIndex = $PS["Data.FunctorWithIndex"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];              
  var FoldableWithIndex = function (Foldable0, foldMapWithIndex, foldlWithIndex, foldrWithIndex) {
      this.Foldable0 = Foldable0;
      this.foldMapWithIndex = foldMapWithIndex;
      this.foldlWithIndex = foldlWithIndex;
      this.foldrWithIndex = foldrWithIndex;
  };
  var foldrWithIndex = function (dict) {
      return dict.foldrWithIndex;
  };
  var foldlWithIndex = function (dict) {
      return dict.foldlWithIndex;
  };
  var foldMapWithIndexDefaultR = function (dictFoldableWithIndex) {
      return function (dictMonoid) {
          return function (f) {
              return foldrWithIndex(dictFoldableWithIndex)(function (i) {
                  return function (x) {
                      return function (acc) {
                          return Data_Semigroup.append(dictMonoid.Semigroup0())(f(i)(x))(acc);
                      };
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableWithIndexArray = new FoldableWithIndex(function () {
      return Data_Foldable.foldableArray;
  }, function (dictMonoid) {
      return foldMapWithIndexDefaultR(foldableWithIndexArray)(dictMonoid);
  }, function (f) {
      return function (z) {
          var $163 = Data_Foldable.foldl(Data_Foldable.foldableArray)(function (y) {
              return function (v) {
                  return f(v.value0)(y)(v.value1);
              };
          })(z);
          var $164 = Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(Data_Tuple.Tuple.create);
          return function ($165) {
              return $163($164($165));
          };
      };
  }, function (f) {
      return function (z) {
          var $166 = Data_Foldable.foldr(Data_Foldable.foldableArray)(function (v) {
              return function (y) {
                  return f(v.value0)(v.value1)(y);
              };
          })(z);
          var $167 = Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(Data_Tuple.Tuple.create);
          return function ($168) {
              return $166($167($168));
          };
      };
  });
  exports["FoldableWithIndex"] = FoldableWithIndex;
  exports["foldlWithIndex"] = foldlWithIndex;
  exports["foldableWithIndexArray"] = foldableWithIndexArray;
})(PS);
(function(exports) {
  "use strict";

  // jshint maxparams: 3

  exports.traverseArrayImpl = (function () {
    function array1(a) {
      return [a];
    }

    function array2(a) {
      return function (b) {
        return [a, b];
      };
    }

    function array3(a) {
      return function (b) {
        return function (c) {
          return [a, b, c];
        };
      };
    }

    function concat2(xs) {
      return function (ys) {
        return xs.concat(ys);
      };
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            return function (array) {
              function go(bot, top) {
                switch (top - bot) {
                case 0: return pure([]);
                case 1: return map(array1)(f(array[bot]));
                case 2: return apply(map(array2)(f(array[bot])))(f(array[bot + 1]));
                case 3: return apply(apply(map(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));
                default:
                  // This slightly tricky pivot selection aims to produce two
                  // even-length partitions where possible.
                  var pivot = bot + Math.floor((top - bot) / 4) * 2;
                  return apply(map(concat2)(go(bot, pivot)))(go(pivot, top));
                }
              }
              return go(0, array.length);
            };
          };
        };
      };
    };
  })();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Traversable"] = $PS["Data.Traversable"] || {};
  var exports = $PS["Data.Traversable"];
  var $foreign = $PS["Data.Traversable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];            
  var Traversable = function (Foldable1, Functor0, sequence, traverse) {
      this.Foldable1 = Foldable1;
      this.Functor0 = Functor0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  }; 
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return traverse(dictTraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var traversableArray = new Traversable(function () {
      return Data_Foldable.foldableArray;
  }, function () {
      return Data_Functor.functorArray;
  }, function (dictApplicative) {
      return sequenceDefault(traversableArray)(dictApplicative);
  }, function (dictApplicative) {
      return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map((dictApplicative.Apply0()).Functor0()))(Control_Applicative.pure(dictApplicative));
  });
  var sequence = function (dict) {
      return dict.sequence;
  };
  exports["traverse"] = traverse;
  exports["sequence"] = sequence;
  exports["traversableArray"] = traversableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.TraversableWithIndex"] = $PS["Data.TraversableWithIndex"] || {};
  var exports = $PS["Data.TraversableWithIndex"];
  var Data_FoldableWithIndex = $PS["Data.FoldableWithIndex"];
  var Data_FunctorWithIndex = $PS["Data.FunctorWithIndex"];
  var Data_Traversable = $PS["Data.Traversable"];  
  var TraversableWithIndex = function (FoldableWithIndex1, FunctorWithIndex0, Traversable2, traverseWithIndex) {
      this.FoldableWithIndex1 = FoldableWithIndex1;
      this.FunctorWithIndex0 = FunctorWithIndex0;
      this.Traversable2 = Traversable2;
      this.traverseWithIndex = traverseWithIndex;
  };
  var traverseWithIndexDefault = function (dictTraversableWithIndex) {
      return function (dictApplicative) {
          return function (f) {
              var $63 = Data_Traversable.sequence(dictTraversableWithIndex.Traversable2())(dictApplicative);
              var $64 = Data_FunctorWithIndex.mapWithIndex(dictTraversableWithIndex.FunctorWithIndex0())(f);
              return function ($65) {
                  return $63($64($65));
              };
          };
      };
  };
  var traverseWithIndex = function (dict) {
      return dict.traverseWithIndex;
  };
  var traversableWithIndexArray = new TraversableWithIndex(function () {
      return Data_FoldableWithIndex.foldableWithIndexArray;
  }, function () {
      return Data_FunctorWithIndex.functorWithIndexArray;
  }, function () {
      return Data_Traversable.traversableArray;
  }, function (dictApplicative) {
      return traverseWithIndexDefault(traversableWithIndexArray)(dictApplicative);
  });
  exports["traverseWithIndex"] = traverseWithIndex;
  exports["traversableWithIndexArray"] = traversableWithIndexArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Argonaut.Decode.Decoders"] = $PS["Data.Argonaut.Decode.Decoders"] || {};
  var exports = $PS["Data.Argonaut.Decode.Decoders"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Argonaut_Decode_Error = $PS["Data.Argonaut.Decode.Error"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_TraversableWithIndex = $PS["Data.TraversableWithIndex"];
  var decodeString = Data_Argonaut_Core.caseJsonString(Data_Either.Left.create(new Data_Argonaut_Decode_Error.TypeMismatch("String")))(Data_Either.Right.create);
  var decodeMaybe = function (decoder) {
      return function (json) {
          if (Data_Argonaut_Core.isNull(json)) {
              return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value);
          };
          if (Data_Boolean.otherwise) {
              return Data_Functor.map(Data_Either.functorEither)(Data_Maybe.Just.create)(decoder(json));
          };
          throw new Error("Failed pattern match at Data.Argonaut.Decode.Decoders (line 37, column 1 - line 41, column 38): " + [ decoder.constructor.name, json.constructor.name ]);
      };
  };   
  var decodeJArray = (function () {
      var $22 = Data_Either.note(new Data_Argonaut_Decode_Error.TypeMismatch("Array"));
      return function ($23) {
          return $22(Data_Argonaut_Core.toArray($23));
      };
  })();                                                                                                                                                             
  var decodeArray = function (decoder) {
      return Control_Bind.composeKleisliFlipped(Data_Either.bindEither)((function () {
          var $59 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.Named.create("Array"));
          var $60 = Data_TraversableWithIndex.traverseWithIndex(Data_TraversableWithIndex.traversableWithIndexArray)(Data_Either.applicativeEither)(function (i) {
              var $62 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.AtIndex.create(i));
              return function ($63) {
                  return $62(decoder($63));
              };
          });
          return function ($61) {
              return $59($60($61));
          };
      })())(decodeJArray);
  };
  exports["decodeMaybe"] = decodeMaybe;
  exports["decodeString"] = decodeString;
  exports["decodeArray"] = decodeArray;
})(PS);
(function(exports) {
  "use strict";

  exports._copyST = function (m) {
    return function () {
      var r = {};
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r[k] = m[k];
        }
      }
      return r;
    };
  };

  exports.empty = {};

  exports.runST = function (f) {
    return f();
  };

  exports._foldM = function (bind) {
    return function (f) {
      return function (mz) {
        return function (m) {
          var acc = mz;
          function g(k) {
            return function (z) {
              return f(z)(k)(m[k]);
            };
          }
          for (var k in m) {
            if (hasOwnProperty.call(m, k)) {
              acc = bind(acc)(g(k));
            }
          }
          return acc;
        };
      };
    };
  };

  exports._lookup = function (no, yes, k, m) {
    return k in m ? yes(m[k]) : no;
  };

  function toArrayWithKey(f) {
    return function (m) {
      var r = [];
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r.push(f(k)(m[k]));
        }
      }
      return r;
    };
  }

  exports.toArrayWithKey = toArrayWithKey;
})(PS["Foreign.Object"] = PS["Foreign.Object"] || {});
(function(exports) {
  "use strict";

  exports.mkFn2 = function (fn) {
    /* jshint maxparams: 2 */
    return function (a, b) {
      return fn(a)(b);
    };
  };

  exports.runFn4 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return fn(a, b, c, d);
          };
        };
      };
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Function.Uncurried"] = $PS["Data.Function.Uncurried"] || {};
  var exports = $PS["Data.Function.Uncurried"];
  var $foreign = $PS["Data.Function.Uncurried"];
  exports["mkFn2"] = $foreign.mkFn2;
  exports["runFn4"] = $foreign.runFn4;
})(PS);
(function(exports) {
  "use strict";

  exports.poke = function (k) {
    return function (v) {
      return function (m) {
        return function () {
          m[k] = v;
          return m;
        };
      };
    };
  };
})(PS["Foreign.Object.ST"] = PS["Foreign.Object.ST"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Foreign.Object.ST"] = $PS["Foreign.Object.ST"] || {};
  var exports = $PS["Foreign.Object.ST"];
  var $foreign = $PS["Foreign.Object.ST"];
  exports["poke"] = $foreign.poke;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Foreign.Object"] = $PS["Foreign.Object"] || {};
  var exports = $PS["Foreign.Object"];
  var $foreign = $PS["Foreign.Object"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_ST_Internal = $PS["Control.Monad.ST.Internal"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_FoldableWithIndex = $PS["Data.FoldableWithIndex"];
  var Data_Function = $PS["Data.Function"];
  var Data_Function_Uncurried = $PS["Data.Function.Uncurried"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Foreign_Object_ST = $PS["Foreign.Object.ST"];        
  var values = $foreign.toArrayWithKey(function (v) {
      return function (v1) {
          return v1;
      };
  });                                                            
  var thawST = $foreign["_copyST"];
  var mutate = function (f) {
      return function (m) {
          return $foreign.runST(function __do() {
              var s = thawST(m)();
              f(s)();
              return s;
          });
      };
  };
  var lookup = Data_Function_Uncurried.runFn4($foreign["_lookup"])(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var insert = function (k) {
      return function (v) {
          return mutate(Foreign_Object_ST.poke(k)(v));
      };
  };
  var foldM = function (dictMonad) {
      return function (f) {
          return function (z) {
              return $foreign["_foldM"](Control_Bind.bind(dictMonad.Bind1()))(f)(Control_Applicative.pure(dictMonad.Applicative0())(z));
          };
      };
  };
  var unionWith = function (f) {
      return function (m1) {
          return function (m2) {
              return mutate(function (s1) {
                  return foldM(Control_Monad_ST_Internal.monadST)(function (s2) {
                      return function (k) {
                          return function (v1) {
                              return Foreign_Object_ST.poke(k)($foreign["_lookup"](v1, function (v2) {
                                  return f(v1)(v2);
                              }, k, m2))(s2);
                          };
                      };
                  })(s1)(m1);
              })(m2);
          };
      };
  };
  var semigroupObject = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(unionWith(Data_Semigroup.append(dictSemigroup)));
  };
  var monoidObject = function (dictSemigroup) {
      return new Data_Monoid.Monoid(function () {
          return semigroupObject(dictSemigroup);
      }, $foreign.empty);
  };
  var fold = $foreign["_foldM"](Data_Function.applyFlipped);
  var foldMap = function (dictMonoid) {
      return function (f) {
          return fold(function (acc) {
              return function (k) {
                  return function (v) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f(k)(v));
                  };
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  };
  var foldableObject = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return foldMap(dictMonoid)(Data_Function["const"](f));
      };
  }, function (f) {
      return fold(function (z) {
          return function (v) {
              return f(z);
          };
      });
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldr(Data_Foldable.foldableArray)(f)(z)(values(m));
          };
      };
  });
  var foldableWithIndexObject = new Data_FoldableWithIndex.FoldableWithIndex(function () {
      return foldableObject;
  }, function (dictMonoid) {
      return foldMap(dictMonoid);
  }, function (f) {
      return fold(Data_Function.flip(f));
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldr(Data_Foldable.foldableArray)(Data_Tuple.uncurry(f))(z)($foreign.toArrayWithKey(Data_Tuple.Tuple.create)(m));
          };
      };
  });
  exports["insert"] = insert;
  exports["lookup"] = lookup;
  exports["foldableWithIndexObject"] = foldableWithIndexObject;
  exports["semigroupObject"] = semigroupObject;
  exports["monoidObject"] = monoidObject;
  exports["empty"] = $foreign.empty;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Record"] = $PS["Record"] || {};
  var exports = $PS["Record"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var insert = function (dictIsSymbol) {
      return function (dictLacks) {
          return function (dictCons) {
              return function (l) {
                  return function (a) {
                      return function (r) {
                          return Record_Unsafe.unsafeSet(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(a)(r);
                      };
                  };
              };
          };
      };
  };
  var get = function (dictIsSymbol) {
      return function (dictCons) {
          return function (l) {
              return function (r) {
                  return Record_Unsafe.unsafeGet(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(r);
              };
          };
      };
  };
  exports["get"] = get;
  exports["insert"] = insert;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Argonaut.Decode.Class"] = $PS["Data.Argonaut.Decode.Class"] || {};
  var exports = $PS["Data.Argonaut.Decode.Class"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Argonaut_Decode_Decoders = $PS["Data.Argonaut.Decode.Decoders"];
  var Data_Argonaut_Decode_Error = $PS["Data.Argonaut.Decode.Error"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Foreign_Object = $PS["Foreign.Object"];
  var Record = $PS["Record"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var GDecodeJson = function (gDecodeJson) {
      this.gDecodeJson = gDecodeJson;
  };
  var DecodeJsonField = function (decodeJsonField) {
      this.decodeJsonField = decodeJsonField;
  };
  var DecodeJson = function (decodeJson) {
      this.decodeJson = decodeJson;
  };
  var gDecodeJsonNil = new GDecodeJson(function (v) {
      return function (v1) {
          return new Data_Either.Right({});
      };
  });
  var gDecodeJson = function (dict) {
      return dict.gDecodeJson;
  };                                                                        
  var decodeRecord = function (dictGDecodeJson) {
      return function (dictRowToList) {
          return new DecodeJson(function (json) {
              var v = Data_Argonaut_Core.toObject(json);
              if (v instanceof Data_Maybe.Just) {
                  return gDecodeJson(dictGDecodeJson)(v.value0)(Type_Proxy["Proxy"].value);
              };
              if (v instanceof Data_Maybe.Nothing) {
                  return Data_Either.Left.create(new Data_Argonaut_Decode_Error.TypeMismatch("Object"));
              };
              throw new Error("Failed pattern match at Data.Argonaut.Decode.Class (line 103, column 5 - line 105, column 46): " + [ v.constructor.name ]);
          });
      };
  };
  var decodeJsonString = new DecodeJson(Data_Argonaut_Decode_Decoders.decodeString);
  var decodeJsonField = function (dict) {
      return dict.decodeJsonField;
  };
  var gDecodeJsonCons = function (dictDecodeJsonField) {
      return function (dictGDecodeJson) {
          return function (dictIsSymbol) {
              return function (dictCons) {
                  return function (dictLacks) {
                      return new GDecodeJson(function (object) {
                          return function (v) {
                              var fieldName = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                              var fieldValue = Foreign_Object.lookup(fieldName)(object);
                              var v1 = decodeJsonField(dictDecodeJsonField)(fieldValue);
                              if (v1 instanceof Data_Maybe.Just) {
                                  return Control_Bind.bind(Data_Either.bindEither)(Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.AtKey.create(fieldName))(v1.value0))(function (val) {
                                      return Control_Bind.bind(Data_Either.bindEither)(gDecodeJson(dictGDecodeJson)(object)(Type_Proxy["Proxy"].value))(function (rest) {
                                          return Data_Either.Right.create(Record.insert(dictIsSymbol)()()(Type_Proxy["Proxy"].value)(val)(rest));
                                      });
                                  });
                              };
                              if (v1 instanceof Data_Maybe.Nothing) {
                                  return Data_Either.Left.create(new Data_Argonaut_Decode_Error.AtKey(fieldName, Data_Argonaut_Decode_Error.MissingValue.value));
                              };
                              throw new Error("Failed pattern match at Data.Argonaut.Decode.Class (line 127, column 5 - line 134, column 44): " + [ v1.constructor.name ]);
                          };
                      });
                  };
              };
          };
      };
  };                                                                                  
  var decodeJson = function (dict) {
      return dict.decodeJson;
  };
  var decodeJsonMaybe = function (dictDecodeJson) {
      return new DecodeJson(Data_Argonaut_Decode_Decoders.decodeMaybe(decodeJson(dictDecodeJson)));
  };
  var decodeFieldMaybe = function (dictDecodeJson) {
      return new DecodeJsonField(function (v) {
          if (v instanceof Data_Maybe.Nothing) {
              return Data_Maybe.Just.create(new Data_Either.Right(Data_Maybe.Nothing.value));
          };
          if (v instanceof Data_Maybe.Just) {
              return Data_Maybe.Just.create(decodeJson(decodeJsonMaybe(dictDecodeJson))(v.value0));
          };
          throw new Error("Failed pattern match at Data.Argonaut.Decode.Class (line 139, column 1 - line 143, column 49): " + [ v.constructor.name ]);
      });
  };
  var decodeFieldId = function (dictDecodeJson) {
      return new DecodeJsonField(function (j) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(decodeJson(dictDecodeJson))(j);
      });
  };
  var decodeArray = function (dictDecodeJson) {
      return new DecodeJson(Data_Argonaut_Decode_Decoders.decodeArray(decodeJson(dictDecodeJson)));
  };
  exports["decodeJson"] = decodeJson;
  exports["decodeJsonString"] = decodeJsonString;
  exports["decodeArray"] = decodeArray;
  exports["decodeRecord"] = decodeRecord;
  exports["gDecodeJsonNil"] = gDecodeJsonNil;
  exports["gDecodeJsonCons"] = gDecodeJsonCons;
  exports["decodeFieldMaybe"] = decodeFieldMaybe;
  exports["decodeFieldId"] = decodeFieldId;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Argonaut.Encode.Encoders"] = $PS["Data.Argonaut.Encode.Encoders"] || {};
  var exports = $PS["Data.Argonaut.Encode.Encoders"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var encodeString = Data_Argonaut_Core.fromString;
  var encodeMaybe = function (encoder) {
      return function (v) {
          if (v instanceof Data_Maybe.Nothing) {
              return Data_Argonaut_Core.jsonNull;
          };
          if (v instanceof Data_Maybe.Just) {
              return encoder(v.value0);
          };
          throw new Error("Failed pattern match at Data.Argonaut.Encode.Encoders (line 31, column 23 - line 33, column 22): " + [ v.constructor.name ]);
      };
  };                                                 
  var encodeArray = function (encoder) {
      var $53 = Data_Functor.map(Data_Functor.functorArray)(encoder);
      return function ($54) {
          return Data_Argonaut_Core.fromArray($53($54));
      };
  };
  exports["encodeMaybe"] = encodeMaybe;
  exports["encodeString"] = encodeString;
  exports["encodeArray"] = encodeArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Argonaut.Encode.Class"] = $PS["Data.Argonaut.Encode.Class"] || {};
  var exports = $PS["Data.Argonaut.Encode.Class"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Argonaut_Encode_Encoders = $PS["Data.Argonaut.Encode.Encoders"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Foreign_Object = $PS["Foreign.Object"];
  var Record = $PS["Record"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var GEncodeJson = function (gEncodeJson) {
      this.gEncodeJson = gEncodeJson;
  };
  var EncodeJson = function (encodeJson) {
      this.encodeJson = encodeJson;
  };
  var gEncodeJsonNil = new GEncodeJson(function (v) {
      return function (v1) {
          return Foreign_Object.empty;
      };
  });
  var gEncodeJson = function (dict) {
      return dict.gEncodeJson;
  };                                                                        
  var encodeRecord = function (dictGEncodeJson) {
      return function (dictRowToList) {
          return new EncodeJson(function (rec) {
              return Data_Argonaut_Core.fromObject(gEncodeJson(dictGEncodeJson)(rec)(Type_Proxy["Proxy"].value));
          });
      };
  };                                                                                          
  var encodeJsonJString = new EncodeJson(Data_Argonaut_Encode_Encoders.encodeString);
  var encodeJson = function (dict) {
      return dict.encodeJson;
  };
  var encodeJsonArray = function (dictEncodeJson) {
      return new EncodeJson(Data_Argonaut_Encode_Encoders.encodeArray(encodeJson(dictEncodeJson)));
  };
  var encodeJsonMaybe = function (dictEncodeJson) {
      return new EncodeJson(Data_Argonaut_Encode_Encoders.encodeMaybe(encodeJson(dictEncodeJson)));
  };
  var gEncodeJsonCons = function (dictEncodeJson) {
      return function (dictGEncodeJson) {
          return function (dictIsSymbol) {
              return function (dictCons) {
                  return new GEncodeJson(function (row) {
                      return function (v) {
                          return Foreign_Object.insert(Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value))(encodeJson(dictEncodeJson)(Record.get(dictIsSymbol)()(Type_Proxy["Proxy"].value)(row)))(gEncodeJson(dictGEncodeJson)(row)(Type_Proxy["Proxy"].value));
                      };
                  });
              };
          };
      };
  };
  exports["encodeJson"] = encodeJson;
  exports["encodeJsonMaybe"] = encodeJsonMaybe;
  exports["encodeJsonJString"] = encodeJsonJString;
  exports["encodeJsonArray"] = encodeJsonArray;
  exports["encodeRecord"] = encodeRecord;
  exports["gEncodeJsonNil"] = gEncodeJsonNil;
  exports["gEncodeJsonCons"] = gEncodeJsonCons;
})(PS);
(function(exports) {
  "use strict";

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = new Array(step * (end - start) + 1);
      var i = start, n = 0;
      while (i !== end) {
        result[n++] = i;
        i += step;
      }
      result[n] = i;
      return result;
    };
  };                                                                                                 

  exports.fromFoldableImpl = (function () {
    function Cons(head, tail) {
      this.head = head;
      this.tail = tail;
    }
    var emptyList = {};

    function curryCons(head) {
      return function (tail) {
        return new Cons(head, tail);
      };
    }

    function listToArray(list) {
      var result = [];
      var count = 0;
      var xs = list;
      while (xs !== emptyList) {
        result[count++] = xs.head;
        xs = xs.tail;
      }
      return result;
    }

    return function (foldr) {
      return function (xs) {
        return listToArray(foldr(curryCons)(emptyList)(xs));
      };
    };
  })();

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports.findIndexImpl = function (just) {
    return function (nothing) {
      return function (f) {
        return function (xs) {
          for (var i = 0, l = xs.length; i < l; i++) {
            if (f(xs[i])) return just(i);
          }
          return nothing;
        };
      };
    };
  };

  //------------------------------------------------------------------------------
  // Sorting ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.sortByImpl = (function () {
    function mergeFromTo(compare, fromOrdering, xs1, xs2, from, to) {
      var mid;
      var i;
      var j;
      var k;
      var x;
      var y;
      var c;

      mid = from + ((to - from) >> 1);
      if (mid - from > 1) mergeFromTo(compare, fromOrdering, xs2, xs1, from, mid);
      if (to - mid > 1) mergeFromTo(compare, fromOrdering, xs2, xs1, mid, to);

      i = from;
      j = mid;
      k = from;
      while (i < mid && j < to) {
        x = xs2[i];
        y = xs2[j];
        c = fromOrdering(compare(x)(y));
        if (c > 0) {
          xs1[k++] = y;
          ++j;
        }
        else {
          xs1[k++] = x;
          ++i;
        }
      }
      while (i < mid) {
        xs1[k++] = xs2[i++];
      }
      while (j < to) {
        xs1[k++] = xs2[j++];
      }
    }

    return function (compare) {
      return function (fromOrdering) {
        return function (xs) {
          var out;

          if (xs.length < 2) return xs;

          out = xs.slice(0);
          mergeFromTo(compare, fromOrdering, out, xs.slice(0), 0, xs.length);

          return out;
        };
      };
    };
  })();

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  "use strict";

  exports.pushAll = function (as) {
    return function (xs) {
      return function () {
        return xs.push.apply(xs, as);
      };
    };
  };

  exports.unsafeFreeze = function (xs) {
    return function () {
      return xs;
    };
  };

  exports.unsafeThaw = function (xs) {
    return function () {
      return xs;
    };
  };

  function copyImpl(xs) {
    return function () {
      return xs.slice();
    };
  }
})(PS["Data.Array.ST"] = PS["Data.Array.ST"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Array.ST"] = $PS["Data.Array.ST"] || {};
  var exports = $PS["Data.Array.ST"];
  var $foreign = $PS["Data.Array.ST"];
  var push = function (a) {
      return $foreign.pushAll([ a ]);
  };
  exports["push"] = push;
  exports["unsafeFreeze"] = $foreign.unsafeFreeze;
  exports["unsafeThaw"] = $foreign.unsafeThaw;
})(PS);
(function(exports) {
  "use strict";

  var unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };                                         
  exports.ordIntImpl = unsafeCompareImpl;   
  exports.ordStringImpl = unsafeCompareImpl;
  exports.ordCharImpl = unsafeCompareImpl;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Ordering"] = $PS["Data.Ordering"] || {};
  var exports = $PS["Data.Ordering"];
  var Data_Eq = $PS["Data.Eq"];                    
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  var eqOrdering = new Data_Eq.Eq(function (v) {
      return function (v1) {
          if (v instanceof LT && v1 instanceof LT) {
              return true;
          };
          if (v instanceof GT && v1 instanceof GT) {
              return true;
          };
          if (v instanceof EQ && v1 instanceof EQ) {
              return true;
          };
          return false;
      };
  });
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
  exports["eqOrdering"] = eqOrdering;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Ord"] = $PS["Data.Ord"] || {};
  var exports = $PS["Data.Ord"];
  var $foreign = $PS["Data.Ord"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  }; 
  var ordString = new Ord(function () {
      return Data_Eq.eqString;
  }, $foreign.ordStringImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var ordChar = new Ord(function () {
      return Data_Eq.eqChar;
  }, $foreign.ordCharImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var compare = function (dict) {
      return dict.compare;
  };
  var comparing = function (dictOrd) {
      return function (f) {
          return function (x) {
              return function (y) {
                  return compare(dictOrd)(f(x))(f(y));
              };
          };
      };
  };
  exports["compare"] = compare;
  exports["comparing"] = comparing;
  exports["ordInt"] = ordInt;
  exports["ordString"] = ordString;
  exports["ordChar"] = ordChar;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var $foreign = $PS["Data.Array"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Control_Monad_ST_Internal = $PS["Control.Monad.ST.Internal"];
  var Data_Array_ST = $PS["Data.Array.ST"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];
  var sortBy = function (comp) {
      return $foreign.sortByImpl(comp)(function (v) {
          if (v instanceof Data_Ordering.GT) {
              return 1;
          };
          if (v instanceof Data_Ordering.EQ) {
              return 0;
          };
          if (v instanceof Data_Ordering.LT) {
              return -1 | 0;
          };
          throw new Error("Failed pattern match at Data.Array (line 831, column 31 - line 834, column 11): " + [ v.constructor.name ]);
      });
  };
  var sortWith = function (dictOrd) {
      return function (f) {
          return sortBy(Data_Ord.comparing(dictOrd)(f));
      };
  };
  var singleton = function (a) {
      return [ a ];
  };
  var $$null = function (xs) {
      return $foreign.length(xs) === 0;
  };
  var mapWithIndex = function (f) {
      return function (xs) {
          return $foreign.zipWith(f)($foreign.range(0)($foreign.length(xs) - 1 | 0))(xs);
      };
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var last = function (xs) {
      return index(xs)($foreign.length(xs) - 1 | 0);
  };
  var head = function (xs) {
      return index(xs)(0);
  };
  var nubBy = function (comp) {
      return function (xs) {
          var indexedAndSorted = sortBy(function (x) {
              return function (y) {
                  return comp(Data_Tuple.snd(x))(Data_Tuple.snd(y));
              };
          })(mapWithIndex(Data_Tuple.Tuple.create)(xs));
          var v = head(indexedAndSorted);
          if (v instanceof Data_Maybe.Nothing) {
              return [  ];
          };
          if (v instanceof Data_Maybe.Just) {
              return Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.snd)(sortWith(Data_Ord.ordInt)(Data_Tuple.fst)((function __do() {
                  var result = Data_Array_ST.unsafeThaw(singleton(v.value0))();
                  Control_Monad_ST_Internal.foreach(indexedAndSorted)(function (v1) {
                      return function __do() {
                          var lst = Data_Functor.map(Control_Monad_ST_Internal.functorST)((function () {
                              var $102 = (function (dictPartial) {
                                  var $104 = Data_Maybe.fromJust();
                                  return function ($105) {
                                      return $104(last($105));
                                  };
                              })();
                              return function ($103) {
                                  return Data_Tuple.snd($102($103));
                              };
                          })())(Data_Array_ST.unsafeFreeze(result))();
                          return Control_Applicative.when(Control_Monad_ST_Internal.applicativeST)(Data_Eq.notEq(Data_Ordering.eqOrdering)(comp(lst)(v1.value1))(Data_Ordering.EQ.value))(Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Data_Array_ST.push(v1)(result)))();
                      };
                  })();
                  return Data_Array_ST.unsafeFreeze(result)();
              })()));
          };
          throw new Error("Failed pattern match at Data.Array (line 1050, column 17 - line 1058, column 29): " + [ v.constructor.name ]);
      };
  };
  var nub = function (dictOrd) {
      return nubBy(Data_Ord.compare(dictOrd));
  };
  var fromFoldable = function (dictFoldable) {
      return $foreign.fromFoldableImpl(Data_Foldable.foldr(dictFoldable));
  };
  var foldr = Data_Foldable.foldr(Data_Foldable.foldableArray);
  var findIndex = $foreign.findIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var elemIndex = function (dictEq) {
      return function (x) {
          return findIndex(function (v) {
              return Data_Eq.eq(dictEq)(v)(x);
          });
      };
  };
  var notElem = function (dictEq) {
      return function (a) {
          return function (arr) {
              return Data_Maybe.isNothing(elemIndex(dictEq)(a)(arr));
          };
      };
  };
  var cons = function (x) {
      return function (xs) {
          return Data_Semigroup.append(Data_Semigroup.semigroupArray)([ x ])(xs);
      };
  };
  var some = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Apply.apply((dictAlternative.Applicative0()).Apply0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())(cons)(v))(Control_Lazy.defer(dictLazy)(function (v1) {
                  return many(dictAlternative)(dictLazy)(v);
              }));
          };
      };
  };
  var many = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Alt.alt((dictAlternative.Plus1()).Alt0())(some(dictAlternative)(dictLazy)(v))(Control_Applicative.pure(dictAlternative.Applicative0())([  ]));
          };
      };
  };
  var concatMap = Data_Function.flip(Control_Bind.bind(Control_Bind.bindArray));
  var mapMaybe = function (f) {
      return concatMap((function () {
          var $109 = Data_Maybe.maybe([  ])(singleton);
          return function ($110) {
              return $109(f($110));
          };
      })());
  };
  var catMaybes = mapMaybe(Control_Category.identity(Control_Category.categoryFn));
  exports["fromFoldable"] = fromFoldable;
  exports["singleton"] = singleton;
  exports["some"] = some;
  exports["many"] = many;
  exports["null"] = $$null;
  exports["notElem"] = notElem;
  exports["catMaybes"] = catMaybes;
  exports["nub"] = nub;
  exports["nubBy"] = nubBy;
  exports["length"] = $foreign.length;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Array.NonEmpty"] = $PS["Data.Array.NonEmpty"] || {};
  var exports = $PS["Data.Array.NonEmpty"];
  var Data_Array = $PS["Data.Array"];                              
  var toArray = function (v) {
      return v;
  };                                         
  var adaptAny = function (f) {
      return function ($78) {
          return f(toArray($78));
      };
  };
  var catMaybes = adaptAny(Data_Array.catMaybes);
  exports["catMaybes"] = catMaybes;
})(PS);
(function(exports) {
  "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;

  exports.topChar = String.fromCharCode(65535);
  exports.bottomChar = String.fromCharCode(0);
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Bounded"] = $PS["Data.Bounded"] || {};
  var exports = $PS["Data.Bounded"];
  var $foreign = $PS["Data.Bounded"];
  var Data_Ord = $PS["Data.Ord"];
  var Bounded = function (Ord0, bottom, top) {
      this.Ord0 = Ord0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };                                            
  var boundedInt = new Bounded(function () {
      return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);
  var boundedChar = new Bounded(function () {
      return Data_Ord.ordChar;
  }, $foreign.bottomChar, $foreign.topChar);
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
  exports["boundedChar"] = boundedChar;
})(PS);
(function(exports) {
  "use strict";

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };

  exports.fromStringAsImpl = function (just) {
    return function (nothing) {
      return function (radix) {
        var digits;
        if (radix < 11) {
          digits = "[0-" + (radix - 1).toString() + "]";
        } else if (radix === 11) {
          digits = "[0-9a]";
        } else {
          digits = "[0-9a-" + String.fromCharCode(86 + radix) + "]";
        }
        var pattern = new RegExp("^[\\+\\-]?" + digits + "+$", "i");

        return function (s) {
          /* jshint bitwise: false */
          if (pattern.test(s)) {
            var i = parseInt(s, radix);
            return (i | 0) === i ? just(i) : nothing;
          } else {
            return nothing;
          }
        };
      };
    };
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  /* globals exports */
  "use strict";               

  exports.isFinite = isFinite;

  exports.fromStringImpl = function(str, isFinite, just, nothing) {
    var num = parseFloat(str);
    if (isFinite(num)) {
      return just(num);
    } else {
      return nothing;
    }
  };
})(PS["Data.Number"] = PS["Data.Number"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Number"] = $PS["Data.Number"] || {};
  var exports = $PS["Data.Number"];
  var $foreign = $PS["Data.Number"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var fromString = function (str) {
      return $foreign.fromStringImpl(str, $foreign["isFinite"], Data_Maybe.Just.create, Data_Maybe.Nothing.value);
  };
  exports["fromString"] = fromString;
  exports["isFinite"] = $foreign["isFinite"];
})(PS);
(function(exports) {
  "use strict";          

  exports.floor = Math.floor;

  function nativeImul(a) {
    return function (b) {
      return Math.imul(a, b);
    };
  }

  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul
  function emulatedImul(a) {
    /*jshint bitwise: false*/
    return function (b) {
      var ah = a >>> 16 & 0xffff;
      var al = a & 0xffff;
      var bh = b >>> 16 & 0xffff;
      var bl = b & 0xffff;
      // the shift by 0 fixes the sign on the high part
      // the final |0 converts the unsigned value into a signed value
      return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
    };
  }
})(PS["Math"] = PS["Math"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Math"] = $PS["Math"] || {};
  var exports = $PS["Math"];
  var $foreign = $PS["Math"];
  exports["floor"] = $foreign.floor;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Int"] = $PS["Data.Int"] || {};
  var exports = $PS["Data.Int"];
  var $foreign = $PS["Data.Int"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Number = $PS["Data.Number"];
  var $$Math = $PS["Math"];
  var hexadecimal = 16;
  var fromStringAs = $foreign.fromStringAsImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var fromString = fromStringAs(10);
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (!Data_Number["isFinite"](x)) {
          return 0;
      };
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.fromMaybe(0)(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int (line 66, column 1 - line 66, column 29): " + [ x.constructor.name ]);
  };
  var floor = function ($24) {
      return unsafeClamp($$Math.floor($24));
  };
  exports["floor"] = floor;
  exports["fromString"] = fromString;
  exports["hexadecimal"] = hexadecimal;
  exports["fromStringAs"] = fromStringAs;
  exports["toNumber"] = $foreign.toNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.CodePoint.Unicode.Internal"] = $PS["Data.CodePoint.Unicode.Internal"] || {};
  var exports = $PS["Data.CodePoint.Unicode.Internal"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ordering = $PS["Data.Ordering"];        
  var NUMCAT_LU = (function () {
      function NUMCAT_LU() {

      };
      NUMCAT_LU.value = new NUMCAT_LU();
      return NUMCAT_LU;
  })();
  var NUMCAT_LL = (function () {
      function NUMCAT_LL() {

      };
      NUMCAT_LL.value = new NUMCAT_LL();
      return NUMCAT_LL;
  })();
  var NUMCAT_LT = (function () {
      function NUMCAT_LT() {

      };
      NUMCAT_LT.value = new NUMCAT_LT();
      return NUMCAT_LT;
  })();
  var NUMCAT_MN = (function () {
      function NUMCAT_MN() {

      };
      NUMCAT_MN.value = new NUMCAT_MN();
      return NUMCAT_MN;
  })();
  var NUMCAT_NL = (function () {
      function NUMCAT_NL() {

      };
      NUMCAT_NL.value = new NUMCAT_NL();
      return NUMCAT_NL;
  })();
  var NUMCAT_SO = (function () {
      function NUMCAT_SO() {

      };
      NUMCAT_SO.value = new NUMCAT_SO();
      return NUMCAT_SO;
  })();
  var NUMCAT_CN = (function () {
      function NUMCAT_CN() {

      };
      NUMCAT_CN.value = new NUMCAT_CN();
      return NUMCAT_CN;
  })();                  
  var numConvBlocks = 1332;
  var gencatSO = 8192;
  var rule170 = {
      category: gencatSO,
      unicodeCat: NUMCAT_SO.value,
      possible: 1,
      updist: 0,
      lowdist: 26,
      titledist: 0
  };
  var rule171 = {
      category: gencatSO,
      unicodeCat: NUMCAT_SO.value,
      possible: 1,
      updist: -26 | 0,
      lowdist: 0,
      titledist: -26 | 0
  };
  var gencatNL = 16777216;
  var rule168 = {
      category: gencatNL,
      unicodeCat: NUMCAT_NL.value,
      possible: 1,
      updist: 0,
      lowdist: 16,
      titledist: 0
  };
  var rule169 = {
      category: gencatNL,
      unicodeCat: NUMCAT_NL.value,
      possible: 1,
      updist: -16 | 0,
      lowdist: 0,
      titledist: -16 | 0
  };
  var gencatMN = 2097152;
  var rule93 = {
      category: gencatMN,
      unicodeCat: NUMCAT_MN.value,
      possible: 1,
      updist: 84,
      lowdist: 0,
      titledist: 84
  };
  var gencatLU = 512;
  var nullrule = {
      category: gencatLU,
      unicodeCat: NUMCAT_CN.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var rule104 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 8,
      titledist: 0
  };
  var rule115 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -60 | 0,
      titledist: 0
  };
  var rule117 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -7 | 0,
      titledist: 0
  };
  var rule118 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 80,
      titledist: 0
  };
  var rule120 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 15,
      titledist: 0
  };
  var rule122 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 48,
      titledist: 0
  };
  var rule125 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 7264,
      titledist: 0
  };
  var rule127 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 38864,
      titledist: 0
  };
  var rule137 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -3008 | 0,
      titledist: 0
  };
  var rule142 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -7615 | 0,
      titledist: 0
  };
  var rule144 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -8 | 0,
      titledist: 0
  };
  var rule153 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -74 | 0,
      titledist: 0
  };
  var rule156 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -86 | 0,
      titledist: 0
  };
  var rule157 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -100 | 0,
      titledist: 0
  };
  var rule158 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -112 | 0,
      titledist: 0
  };
  var rule159 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -128 | 0,
      titledist: 0
  };
  var rule160 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -126 | 0,
      titledist: 0
  };
  var rule163 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -7517 | 0,
      titledist: 0
  };
  var rule164 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -8383 | 0,
      titledist: 0
  };
  var rule165 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -8262 | 0,
      titledist: 0
  };
  var rule166 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 28,
      titledist: 0
  };
  var rule172 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -10743 | 0,
      titledist: 0
  };
  var rule173 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -3814 | 0,
      titledist: 0
  };
  var rule174 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -10727 | 0,
      titledist: 0
  };
  var rule177 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -10780 | 0,
      titledist: 0
  };
  var rule178 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -10749 | 0,
      titledist: 0
  };
  var rule179 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -10783 | 0,
      titledist: 0
  };
  var rule180 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -10782 | 0,
      titledist: 0
  };
  var rule181 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -10815 | 0,
      titledist: 0
  };
  var rule183 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -35332 | 0,
      titledist: 0
  };
  var rule184 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -42280 | 0,
      titledist: 0
  };
  var rule186 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -42308 | 0,
      titledist: 0
  };
  var rule187 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -42319 | 0,
      titledist: 0
  };
  var rule188 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -42315 | 0,
      titledist: 0
  };
  var rule189 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -42305 | 0,
      titledist: 0
  };
  var rule190 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -42258 | 0,
      titledist: 0
  };
  var rule191 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -42282 | 0,
      titledist: 0
  };
  var rule192 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -42261 | 0,
      titledist: 0
  };
  var rule193 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 928,
      titledist: 0
  };
  var rule194 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -48 | 0,
      titledist: 0
  };
  var rule195 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -42307 | 0,
      titledist: 0
  };
  var rule196 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -35384 | 0,
      titledist: 0
  };
  var rule201 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 40,
      titledist: 0
  };
  var rule203 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 34,
      titledist: 0
  };
  var rule22 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 1,
      titledist: 0
  };
  var rule24 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -199 | 0,
      titledist: 0
  };
  var rule26 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -121 | 0,
      titledist: 0
  };
  var rule29 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 210,
      titledist: 0
  };
  var rule30 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 206,
      titledist: 0
  };
  var rule31 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 205,
      titledist: 0
  };
  var rule32 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 79,
      titledist: 0
  };
  var rule33 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 202,
      titledist: 0
  };
  var rule34 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 203,
      titledist: 0
  };
  var rule35 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 207,
      titledist: 0
  };
  var rule37 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 211,
      titledist: 0
  };
  var rule38 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 209,
      titledist: 0
  };
  var rule40 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 213,
      titledist: 0
  };
  var rule42 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 214,
      titledist: 0
  };
  var rule43 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 218,
      titledist: 0
  };
  var rule44 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 217,
      titledist: 0
  };
  var rule45 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 219,
      titledist: 0
  };
  var rule47 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 2,
      titledist: 1
  };
  var rule51 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -97 | 0,
      titledist: 0
  };
  var rule52 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -56 | 0,
      titledist: 0
  };
  var rule53 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -130 | 0,
      titledist: 0
  };
  var rule54 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 10795,
      titledist: 0
  };
  var rule55 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -163 | 0,
      titledist: 0
  };
  var rule56 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 10792,
      titledist: 0
  };
  var rule58 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -195 | 0,
      titledist: 0
  };
  var rule59 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 69,
      titledist: 0
  };
  var rule60 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 71,
      titledist: 0
  };
  var rule9 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 32,
      titledist: 0
  };
  var rule94 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 116,
      titledist: 0
  };
  var rule95 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 38,
      titledist: 0
  };
  var rule96 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 37,
      titledist: 0
  };
  var rule97 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 64,
      titledist: 0
  };
  var rule98 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 63,
      titledist: 0
  };
  var gencatLT = 524288;
  var rule151 = {
      category: gencatLT,
      unicodeCat: NUMCAT_LT.value,
      possible: 1,
      updist: 0,
      lowdist: -8 | 0,
      titledist: 0
  };
  var rule154 = {
      category: gencatLT,
      unicodeCat: NUMCAT_LT.value,
      possible: 1,
      updist: 0,
      lowdist: -9 | 0,
      titledist: 0
  };
  var rule48 = {
      category: gencatLT,
      unicodeCat: NUMCAT_LT.value,
      possible: 1,
      updist: -1 | 0,
      lowdist: 1,
      titledist: 0
  };
  var gencatLL = 4096;
  var rule100 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -37 | 0,
      lowdist: 0,
      titledist: -37 | 0
  };
  var rule101 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -31 | 0,
      lowdist: 0,
      titledist: -31 | 0
  };
  var rule102 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -64 | 0,
      lowdist: 0,
      titledist: -64 | 0
  };
  var rule103 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -63 | 0,
      lowdist: 0,
      titledist: -63 | 0
  };
  var rule105 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -62 | 0,
      lowdist: 0,
      titledist: -62 | 0
  };
  var rule106 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -57 | 0,
      lowdist: 0,
      titledist: -57 | 0
  };
  var rule108 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -47 | 0,
      lowdist: 0,
      titledist: -47 | 0
  };
  var rule109 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -54 | 0,
      lowdist: 0,
      titledist: -54 | 0
  };
  var rule110 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -8 | 0,
      lowdist: 0,
      titledist: -8 | 0
  };
  var rule111 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -86 | 0,
      lowdist: 0,
      titledist: -86 | 0
  };
  var rule112 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -80 | 0,
      lowdist: 0,
      titledist: -80 | 0
  };
  var rule113 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 7,
      lowdist: 0,
      titledist: 7
  };
  var rule114 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -116 | 0,
      lowdist: 0,
      titledist: -116 | 0
  };
  var rule116 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -96 | 0,
      lowdist: 0,
      titledist: -96 | 0
  };
  var rule12 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -32 | 0,
      lowdist: 0,
      titledist: -32 | 0
  };
  var rule121 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -15 | 0,
      lowdist: 0,
      titledist: -15 | 0
  };
  var rule123 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -48 | 0,
      lowdist: 0,
      titledist: -48 | 0
  };
  var rule126 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 3008,
      lowdist: 0,
      titledist: 0
  };
  var rule129 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -6254 | 0,
      lowdist: 0,
      titledist: -6254 | 0
  };
  var rule130 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -6253 | 0,
      lowdist: 0,
      titledist: -6253 | 0
  };
  var rule131 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -6244 | 0,
      lowdist: 0,
      titledist: -6244 | 0
  };
  var rule132 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -6242 | 0,
      lowdist: 0,
      titledist: -6242 | 0
  };
  var rule133 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -6243 | 0,
      lowdist: 0,
      titledist: -6243 | 0
  };
  var rule134 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -6236 | 0,
      lowdist: 0,
      titledist: -6236 | 0
  };
  var rule135 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -6181 | 0,
      lowdist: 0,
      titledist: -6181 | 0
  };
  var rule136 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 35266,
      lowdist: 0,
      titledist: 35266
  };
  var rule138 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 35332,
      lowdist: 0,
      titledist: 35332
  };
  var rule139 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 3814,
      lowdist: 0,
      titledist: 3814
  };
  var rule140 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 35384,
      lowdist: 0,
      titledist: 35384
  };
  var rule141 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -59 | 0,
      lowdist: 0,
      titledist: -59 | 0
  };
  var rule143 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 8,
      lowdist: 0,
      titledist: 8
  };
  var rule145 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 74,
      lowdist: 0,
      titledist: 74
  };
  var rule146 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 86,
      lowdist: 0,
      titledist: 86
  };
  var rule147 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 100,
      lowdist: 0,
      titledist: 100
  };
  var rule148 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 128,
      lowdist: 0,
      titledist: 128
  };
  var rule149 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 112,
      lowdist: 0,
      titledist: 112
  };
  var rule150 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 126,
      lowdist: 0,
      titledist: 126
  };
  var rule152 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 9,
      lowdist: 0,
      titledist: 9
  };
  var rule155 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -7205 | 0,
      lowdist: 0,
      titledist: -7205 | 0
  };
  var rule167 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -28 | 0,
      lowdist: 0,
      titledist: -28 | 0
  };
  var rule175 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -10795 | 0,
      lowdist: 0,
      titledist: -10795 | 0
  };
  var rule176 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -10792 | 0,
      lowdist: 0,
      titledist: -10792 | 0
  };
  var rule18 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 743,
      lowdist: 0,
      titledist: 743
  };
  var rule182 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -7264 | 0,
      lowdist: 0,
      titledist: -7264 | 0
  };
  var rule185 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 48,
      lowdist: 0,
      titledist: 48
  };
  var rule197 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -928 | 0,
      lowdist: 0,
      titledist: -928 | 0
  };
  var rule198 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -38864 | 0,
      lowdist: 0,
      titledist: -38864 | 0
  };
  var rule202 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -40 | 0,
      lowdist: 0,
      titledist: -40 | 0
  };
  var rule204 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -34 | 0,
      lowdist: 0,
      titledist: -34 | 0
  };
  var rule21 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 121,
      lowdist: 0,
      titledist: 121
  };
  var rule23 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -1 | 0,
      lowdist: 0,
      titledist: -1 | 0
  };
  var rule25 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -232 | 0,
      lowdist: 0,
      titledist: -232 | 0
  };
  var rule27 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -300 | 0,
      lowdist: 0,
      titledist: -300 | 0
  };
  var rule28 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 195,
      lowdist: 0,
      titledist: 195
  };
  var rule36 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 97,
      lowdist: 0,
      titledist: 97
  };
  var rule39 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 163,
      lowdist: 0,
      titledist: 163
  };
  var rule41 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 130,
      lowdist: 0,
      titledist: 130
  };
  var rule46 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 56,
      lowdist: 0,
      titledist: 56
  };
  var rule49 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -2 | 0,
      lowdist: 0,
      titledist: -1 | 0
  };
  var rule50 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -79 | 0,
      lowdist: 0,
      titledist: -79 | 0
  };
  var rule57 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 10815,
      lowdist: 0,
      titledist: 10815
  };
  var rule61 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 10783,
      lowdist: 0,
      titledist: 10783
  };
  var rule62 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 10780,
      lowdist: 0,
      titledist: 10780
  };
  var rule63 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 10782,
      lowdist: 0,
      titledist: 10782
  };
  var rule64 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -210 | 0,
      lowdist: 0,
      titledist: -210 | 0
  };
  var rule65 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -206 | 0,
      lowdist: 0,
      titledist: -206 | 0
  };
  var rule66 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -205 | 0,
      lowdist: 0,
      titledist: -205 | 0
  };
  var rule67 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -202 | 0,
      lowdist: 0,
      titledist: -202 | 0
  };
  var rule68 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -203 | 0,
      lowdist: 0,
      titledist: -203 | 0
  };
  var rule69 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 42319,
      lowdist: 0,
      titledist: 42319
  };
  var rule70 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 42315,
      lowdist: 0,
      titledist: 42315
  };
  var rule71 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -207 | 0,
      lowdist: 0,
      titledist: -207 | 0
  };
  var rule72 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 42280,
      lowdist: 0,
      titledist: 42280
  };
  var rule73 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 42308,
      lowdist: 0,
      titledist: 42308
  };
  var rule74 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -209 | 0,
      lowdist: 0,
      titledist: -209 | 0
  };
  var rule75 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -211 | 0,
      lowdist: 0,
      titledist: -211 | 0
  };
  var rule76 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 10743,
      lowdist: 0,
      titledist: 10743
  };
  var rule77 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 42305,
      lowdist: 0,
      titledist: 42305
  };
  var rule78 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 10749,
      lowdist: 0,
      titledist: 10749
  };
  var rule79 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -213 | 0,
      lowdist: 0,
      titledist: -213 | 0
  };
  var rule80 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -214 | 0,
      lowdist: 0,
      titledist: -214 | 0
  };
  var rule81 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 10727,
      lowdist: 0,
      titledist: 10727
  };
  var rule82 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -218 | 0,
      lowdist: 0,
      titledist: -218 | 0
  };
  var rule83 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 42307,
      lowdist: 0,
      titledist: 42307
  };
  var rule84 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 42282,
      lowdist: 0,
      titledist: 42282
  };
  var rule85 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -69 | 0,
      lowdist: 0,
      titledist: -69 | 0
  };
  var rule86 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -217 | 0,
      lowdist: 0,
      titledist: -217 | 0
  };
  var rule87 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -71 | 0,
      lowdist: 0,
      titledist: -71 | 0
  };
  var rule88 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -219 | 0,
      lowdist: 0,
      titledist: -219 | 0
  };
  var rule89 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 42261,
      lowdist: 0,
      titledist: 42261
  };
  var rule90 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 42258,
      lowdist: 0,
      titledist: 42258
  };
  var rule99 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -38 | 0,
      lowdist: 0,
      titledist: -38 | 0
  };
  var convchars = [ {
      start: 65,
      length: 26,
      convRule: rule9
  }, {
      start: 97,
      length: 26,
      convRule: rule12
  }, {
      start: 181,
      length: 1,
      convRule: rule18
  }, {
      start: 192,
      length: 23,
      convRule: rule9
  }, {
      start: 216,
      length: 7,
      convRule: rule9
  }, {
      start: 224,
      length: 23,
      convRule: rule12
  }, {
      start: 248,
      length: 7,
      convRule: rule12
  }, {
      start: 255,
      length: 1,
      convRule: rule21
  }, {
      start: 256,
      length: 1,
      convRule: rule22
  }, {
      start: 257,
      length: 1,
      convRule: rule23
  }, {
      start: 258,
      length: 1,
      convRule: rule22
  }, {
      start: 259,
      length: 1,
      convRule: rule23
  }, {
      start: 260,
      length: 1,
      convRule: rule22
  }, {
      start: 261,
      length: 1,
      convRule: rule23
  }, {
      start: 262,
      length: 1,
      convRule: rule22
  }, {
      start: 263,
      length: 1,
      convRule: rule23
  }, {
      start: 264,
      length: 1,
      convRule: rule22
  }, {
      start: 265,
      length: 1,
      convRule: rule23
  }, {
      start: 266,
      length: 1,
      convRule: rule22
  }, {
      start: 267,
      length: 1,
      convRule: rule23
  }, {
      start: 268,
      length: 1,
      convRule: rule22
  }, {
      start: 269,
      length: 1,
      convRule: rule23
  }, {
      start: 270,
      length: 1,
      convRule: rule22
  }, {
      start: 271,
      length: 1,
      convRule: rule23
  }, {
      start: 272,
      length: 1,
      convRule: rule22
  }, {
      start: 273,
      length: 1,
      convRule: rule23
  }, {
      start: 274,
      length: 1,
      convRule: rule22
  }, {
      start: 275,
      length: 1,
      convRule: rule23
  }, {
      start: 276,
      length: 1,
      convRule: rule22
  }, {
      start: 277,
      length: 1,
      convRule: rule23
  }, {
      start: 278,
      length: 1,
      convRule: rule22
  }, {
      start: 279,
      length: 1,
      convRule: rule23
  }, {
      start: 280,
      length: 1,
      convRule: rule22
  }, {
      start: 281,
      length: 1,
      convRule: rule23
  }, {
      start: 282,
      length: 1,
      convRule: rule22
  }, {
      start: 283,
      length: 1,
      convRule: rule23
  }, {
      start: 284,
      length: 1,
      convRule: rule22
  }, {
      start: 285,
      length: 1,
      convRule: rule23
  }, {
      start: 286,
      length: 1,
      convRule: rule22
  }, {
      start: 287,
      length: 1,
      convRule: rule23
  }, {
      start: 288,
      length: 1,
      convRule: rule22
  }, {
      start: 289,
      length: 1,
      convRule: rule23
  }, {
      start: 290,
      length: 1,
      convRule: rule22
  }, {
      start: 291,
      length: 1,
      convRule: rule23
  }, {
      start: 292,
      length: 1,
      convRule: rule22
  }, {
      start: 293,
      length: 1,
      convRule: rule23
  }, {
      start: 294,
      length: 1,
      convRule: rule22
  }, {
      start: 295,
      length: 1,
      convRule: rule23
  }, {
      start: 296,
      length: 1,
      convRule: rule22
  }, {
      start: 297,
      length: 1,
      convRule: rule23
  }, {
      start: 298,
      length: 1,
      convRule: rule22
  }, {
      start: 299,
      length: 1,
      convRule: rule23
  }, {
      start: 300,
      length: 1,
      convRule: rule22
  }, {
      start: 301,
      length: 1,
      convRule: rule23
  }, {
      start: 302,
      length: 1,
      convRule: rule22
  }, {
      start: 303,
      length: 1,
      convRule: rule23
  }, {
      start: 304,
      length: 1,
      convRule: rule24
  }, {
      start: 305,
      length: 1,
      convRule: rule25
  }, {
      start: 306,
      length: 1,
      convRule: rule22
  }, {
      start: 307,
      length: 1,
      convRule: rule23
  }, {
      start: 308,
      length: 1,
      convRule: rule22
  }, {
      start: 309,
      length: 1,
      convRule: rule23
  }, {
      start: 310,
      length: 1,
      convRule: rule22
  }, {
      start: 311,
      length: 1,
      convRule: rule23
  }, {
      start: 313,
      length: 1,
      convRule: rule22
  }, {
      start: 314,
      length: 1,
      convRule: rule23
  }, {
      start: 315,
      length: 1,
      convRule: rule22
  }, {
      start: 316,
      length: 1,
      convRule: rule23
  }, {
      start: 317,
      length: 1,
      convRule: rule22
  }, {
      start: 318,
      length: 1,
      convRule: rule23
  }, {
      start: 319,
      length: 1,
      convRule: rule22
  }, {
      start: 320,
      length: 1,
      convRule: rule23
  }, {
      start: 321,
      length: 1,
      convRule: rule22
  }, {
      start: 322,
      length: 1,
      convRule: rule23
  }, {
      start: 323,
      length: 1,
      convRule: rule22
  }, {
      start: 324,
      length: 1,
      convRule: rule23
  }, {
      start: 325,
      length: 1,
      convRule: rule22
  }, {
      start: 326,
      length: 1,
      convRule: rule23
  }, {
      start: 327,
      length: 1,
      convRule: rule22
  }, {
      start: 328,
      length: 1,
      convRule: rule23
  }, {
      start: 330,
      length: 1,
      convRule: rule22
  }, {
      start: 331,
      length: 1,
      convRule: rule23
  }, {
      start: 332,
      length: 1,
      convRule: rule22
  }, {
      start: 333,
      length: 1,
      convRule: rule23
  }, {
      start: 334,
      length: 1,
      convRule: rule22
  }, {
      start: 335,
      length: 1,
      convRule: rule23
  }, {
      start: 336,
      length: 1,
      convRule: rule22
  }, {
      start: 337,
      length: 1,
      convRule: rule23
  }, {
      start: 338,
      length: 1,
      convRule: rule22
  }, {
      start: 339,
      length: 1,
      convRule: rule23
  }, {
      start: 340,
      length: 1,
      convRule: rule22
  }, {
      start: 341,
      length: 1,
      convRule: rule23
  }, {
      start: 342,
      length: 1,
      convRule: rule22
  }, {
      start: 343,
      length: 1,
      convRule: rule23
  }, {
      start: 344,
      length: 1,
      convRule: rule22
  }, {
      start: 345,
      length: 1,
      convRule: rule23
  }, {
      start: 346,
      length: 1,
      convRule: rule22
  }, {
      start: 347,
      length: 1,
      convRule: rule23
  }, {
      start: 348,
      length: 1,
      convRule: rule22
  }, {
      start: 349,
      length: 1,
      convRule: rule23
  }, {
      start: 350,
      length: 1,
      convRule: rule22
  }, {
      start: 351,
      length: 1,
      convRule: rule23
  }, {
      start: 352,
      length: 1,
      convRule: rule22
  }, {
      start: 353,
      length: 1,
      convRule: rule23
  }, {
      start: 354,
      length: 1,
      convRule: rule22
  }, {
      start: 355,
      length: 1,
      convRule: rule23
  }, {
      start: 356,
      length: 1,
      convRule: rule22
  }, {
      start: 357,
      length: 1,
      convRule: rule23
  }, {
      start: 358,
      length: 1,
      convRule: rule22
  }, {
      start: 359,
      length: 1,
      convRule: rule23
  }, {
      start: 360,
      length: 1,
      convRule: rule22
  }, {
      start: 361,
      length: 1,
      convRule: rule23
  }, {
      start: 362,
      length: 1,
      convRule: rule22
  }, {
      start: 363,
      length: 1,
      convRule: rule23
  }, {
      start: 364,
      length: 1,
      convRule: rule22
  }, {
      start: 365,
      length: 1,
      convRule: rule23
  }, {
      start: 366,
      length: 1,
      convRule: rule22
  }, {
      start: 367,
      length: 1,
      convRule: rule23
  }, {
      start: 368,
      length: 1,
      convRule: rule22
  }, {
      start: 369,
      length: 1,
      convRule: rule23
  }, {
      start: 370,
      length: 1,
      convRule: rule22
  }, {
      start: 371,
      length: 1,
      convRule: rule23
  }, {
      start: 372,
      length: 1,
      convRule: rule22
  }, {
      start: 373,
      length: 1,
      convRule: rule23
  }, {
      start: 374,
      length: 1,
      convRule: rule22
  }, {
      start: 375,
      length: 1,
      convRule: rule23
  }, {
      start: 376,
      length: 1,
      convRule: rule26
  }, {
      start: 377,
      length: 1,
      convRule: rule22
  }, {
      start: 378,
      length: 1,
      convRule: rule23
  }, {
      start: 379,
      length: 1,
      convRule: rule22
  }, {
      start: 380,
      length: 1,
      convRule: rule23
  }, {
      start: 381,
      length: 1,
      convRule: rule22
  }, {
      start: 382,
      length: 1,
      convRule: rule23
  }, {
      start: 383,
      length: 1,
      convRule: rule27
  }, {
      start: 384,
      length: 1,
      convRule: rule28
  }, {
      start: 385,
      length: 1,
      convRule: rule29
  }, {
      start: 386,
      length: 1,
      convRule: rule22
  }, {
      start: 387,
      length: 1,
      convRule: rule23
  }, {
      start: 388,
      length: 1,
      convRule: rule22
  }, {
      start: 389,
      length: 1,
      convRule: rule23
  }, {
      start: 390,
      length: 1,
      convRule: rule30
  }, {
      start: 391,
      length: 1,
      convRule: rule22
  }, {
      start: 392,
      length: 1,
      convRule: rule23
  }, {
      start: 393,
      length: 2,
      convRule: rule31
  }, {
      start: 395,
      length: 1,
      convRule: rule22
  }, {
      start: 396,
      length: 1,
      convRule: rule23
  }, {
      start: 398,
      length: 1,
      convRule: rule32
  }, {
      start: 399,
      length: 1,
      convRule: rule33
  }, {
      start: 400,
      length: 1,
      convRule: rule34
  }, {
      start: 401,
      length: 1,
      convRule: rule22
  }, {
      start: 402,
      length: 1,
      convRule: rule23
  }, {
      start: 403,
      length: 1,
      convRule: rule31
  }, {
      start: 404,
      length: 1,
      convRule: rule35
  }, {
      start: 405,
      length: 1,
      convRule: rule36
  }, {
      start: 406,
      length: 1,
      convRule: rule37
  }, {
      start: 407,
      length: 1,
      convRule: rule38
  }, {
      start: 408,
      length: 1,
      convRule: rule22
  }, {
      start: 409,
      length: 1,
      convRule: rule23
  }, {
      start: 410,
      length: 1,
      convRule: rule39
  }, {
      start: 412,
      length: 1,
      convRule: rule37
  }, {
      start: 413,
      length: 1,
      convRule: rule40
  }, {
      start: 414,
      length: 1,
      convRule: rule41
  }, {
      start: 415,
      length: 1,
      convRule: rule42
  }, {
      start: 416,
      length: 1,
      convRule: rule22
  }, {
      start: 417,
      length: 1,
      convRule: rule23
  }, {
      start: 418,
      length: 1,
      convRule: rule22
  }, {
      start: 419,
      length: 1,
      convRule: rule23
  }, {
      start: 420,
      length: 1,
      convRule: rule22
  }, {
      start: 421,
      length: 1,
      convRule: rule23
  }, {
      start: 422,
      length: 1,
      convRule: rule43
  }, {
      start: 423,
      length: 1,
      convRule: rule22
  }, {
      start: 424,
      length: 1,
      convRule: rule23
  }, {
      start: 425,
      length: 1,
      convRule: rule43
  }, {
      start: 428,
      length: 1,
      convRule: rule22
  }, {
      start: 429,
      length: 1,
      convRule: rule23
  }, {
      start: 430,
      length: 1,
      convRule: rule43
  }, {
      start: 431,
      length: 1,
      convRule: rule22
  }, {
      start: 432,
      length: 1,
      convRule: rule23
  }, {
      start: 433,
      length: 2,
      convRule: rule44
  }, {
      start: 435,
      length: 1,
      convRule: rule22
  }, {
      start: 436,
      length: 1,
      convRule: rule23
  }, {
      start: 437,
      length: 1,
      convRule: rule22
  }, {
      start: 438,
      length: 1,
      convRule: rule23
  }, {
      start: 439,
      length: 1,
      convRule: rule45
  }, {
      start: 440,
      length: 1,
      convRule: rule22
  }, {
      start: 441,
      length: 1,
      convRule: rule23
  }, {
      start: 444,
      length: 1,
      convRule: rule22
  }, {
      start: 445,
      length: 1,
      convRule: rule23
  }, {
      start: 447,
      length: 1,
      convRule: rule46
  }, {
      start: 452,
      length: 1,
      convRule: rule47
  }, {
      start: 453,
      length: 1,
      convRule: rule48
  }, {
      start: 454,
      length: 1,
      convRule: rule49
  }, {
      start: 455,
      length: 1,
      convRule: rule47
  }, {
      start: 456,
      length: 1,
      convRule: rule48
  }, {
      start: 457,
      length: 1,
      convRule: rule49
  }, {
      start: 458,
      length: 1,
      convRule: rule47
  }, {
      start: 459,
      length: 1,
      convRule: rule48
  }, {
      start: 460,
      length: 1,
      convRule: rule49
  }, {
      start: 461,
      length: 1,
      convRule: rule22
  }, {
      start: 462,
      length: 1,
      convRule: rule23
  }, {
      start: 463,
      length: 1,
      convRule: rule22
  }, {
      start: 464,
      length: 1,
      convRule: rule23
  }, {
      start: 465,
      length: 1,
      convRule: rule22
  }, {
      start: 466,
      length: 1,
      convRule: rule23
  }, {
      start: 467,
      length: 1,
      convRule: rule22
  }, {
      start: 468,
      length: 1,
      convRule: rule23
  }, {
      start: 469,
      length: 1,
      convRule: rule22
  }, {
      start: 470,
      length: 1,
      convRule: rule23
  }, {
      start: 471,
      length: 1,
      convRule: rule22
  }, {
      start: 472,
      length: 1,
      convRule: rule23
  }, {
      start: 473,
      length: 1,
      convRule: rule22
  }, {
      start: 474,
      length: 1,
      convRule: rule23
  }, {
      start: 475,
      length: 1,
      convRule: rule22
  }, {
      start: 476,
      length: 1,
      convRule: rule23
  }, {
      start: 477,
      length: 1,
      convRule: rule50
  }, {
      start: 478,
      length: 1,
      convRule: rule22
  }, {
      start: 479,
      length: 1,
      convRule: rule23
  }, {
      start: 480,
      length: 1,
      convRule: rule22
  }, {
      start: 481,
      length: 1,
      convRule: rule23
  }, {
      start: 482,
      length: 1,
      convRule: rule22
  }, {
      start: 483,
      length: 1,
      convRule: rule23
  }, {
      start: 484,
      length: 1,
      convRule: rule22
  }, {
      start: 485,
      length: 1,
      convRule: rule23
  }, {
      start: 486,
      length: 1,
      convRule: rule22
  }, {
      start: 487,
      length: 1,
      convRule: rule23
  }, {
      start: 488,
      length: 1,
      convRule: rule22
  }, {
      start: 489,
      length: 1,
      convRule: rule23
  }, {
      start: 490,
      length: 1,
      convRule: rule22
  }, {
      start: 491,
      length: 1,
      convRule: rule23
  }, {
      start: 492,
      length: 1,
      convRule: rule22
  }, {
      start: 493,
      length: 1,
      convRule: rule23
  }, {
      start: 494,
      length: 1,
      convRule: rule22
  }, {
      start: 495,
      length: 1,
      convRule: rule23
  }, {
      start: 497,
      length: 1,
      convRule: rule47
  }, {
      start: 498,
      length: 1,
      convRule: rule48
  }, {
      start: 499,
      length: 1,
      convRule: rule49
  }, {
      start: 500,
      length: 1,
      convRule: rule22
  }, {
      start: 501,
      length: 1,
      convRule: rule23
  }, {
      start: 502,
      length: 1,
      convRule: rule51
  }, {
      start: 503,
      length: 1,
      convRule: rule52
  }, {
      start: 504,
      length: 1,
      convRule: rule22
  }, {
      start: 505,
      length: 1,
      convRule: rule23
  }, {
      start: 506,
      length: 1,
      convRule: rule22
  }, {
      start: 507,
      length: 1,
      convRule: rule23
  }, {
      start: 508,
      length: 1,
      convRule: rule22
  }, {
      start: 509,
      length: 1,
      convRule: rule23
  }, {
      start: 510,
      length: 1,
      convRule: rule22
  }, {
      start: 511,
      length: 1,
      convRule: rule23
  }, {
      start: 512,
      length: 1,
      convRule: rule22
  }, {
      start: 513,
      length: 1,
      convRule: rule23
  }, {
      start: 514,
      length: 1,
      convRule: rule22
  }, {
      start: 515,
      length: 1,
      convRule: rule23
  }, {
      start: 516,
      length: 1,
      convRule: rule22
  }, {
      start: 517,
      length: 1,
      convRule: rule23
  }, {
      start: 518,
      length: 1,
      convRule: rule22
  }, {
      start: 519,
      length: 1,
      convRule: rule23
  }, {
      start: 520,
      length: 1,
      convRule: rule22
  }, {
      start: 521,
      length: 1,
      convRule: rule23
  }, {
      start: 522,
      length: 1,
      convRule: rule22
  }, {
      start: 523,
      length: 1,
      convRule: rule23
  }, {
      start: 524,
      length: 1,
      convRule: rule22
  }, {
      start: 525,
      length: 1,
      convRule: rule23
  }, {
      start: 526,
      length: 1,
      convRule: rule22
  }, {
      start: 527,
      length: 1,
      convRule: rule23
  }, {
      start: 528,
      length: 1,
      convRule: rule22
  }, {
      start: 529,
      length: 1,
      convRule: rule23
  }, {
      start: 530,
      length: 1,
      convRule: rule22
  }, {
      start: 531,
      length: 1,
      convRule: rule23
  }, {
      start: 532,
      length: 1,
      convRule: rule22
  }, {
      start: 533,
      length: 1,
      convRule: rule23
  }, {
      start: 534,
      length: 1,
      convRule: rule22
  }, {
      start: 535,
      length: 1,
      convRule: rule23
  }, {
      start: 536,
      length: 1,
      convRule: rule22
  }, {
      start: 537,
      length: 1,
      convRule: rule23
  }, {
      start: 538,
      length: 1,
      convRule: rule22
  }, {
      start: 539,
      length: 1,
      convRule: rule23
  }, {
      start: 540,
      length: 1,
      convRule: rule22
  }, {
      start: 541,
      length: 1,
      convRule: rule23
  }, {
      start: 542,
      length: 1,
      convRule: rule22
  }, {
      start: 543,
      length: 1,
      convRule: rule23
  }, {
      start: 544,
      length: 1,
      convRule: rule53
  }, {
      start: 546,
      length: 1,
      convRule: rule22
  }, {
      start: 547,
      length: 1,
      convRule: rule23
  }, {
      start: 548,
      length: 1,
      convRule: rule22
  }, {
      start: 549,
      length: 1,
      convRule: rule23
  }, {
      start: 550,
      length: 1,
      convRule: rule22
  }, {
      start: 551,
      length: 1,
      convRule: rule23
  }, {
      start: 552,
      length: 1,
      convRule: rule22
  }, {
      start: 553,
      length: 1,
      convRule: rule23
  }, {
      start: 554,
      length: 1,
      convRule: rule22
  }, {
      start: 555,
      length: 1,
      convRule: rule23
  }, {
      start: 556,
      length: 1,
      convRule: rule22
  }, {
      start: 557,
      length: 1,
      convRule: rule23
  }, {
      start: 558,
      length: 1,
      convRule: rule22
  }, {
      start: 559,
      length: 1,
      convRule: rule23
  }, {
      start: 560,
      length: 1,
      convRule: rule22
  }, {
      start: 561,
      length: 1,
      convRule: rule23
  }, {
      start: 562,
      length: 1,
      convRule: rule22
  }, {
      start: 563,
      length: 1,
      convRule: rule23
  }, {
      start: 570,
      length: 1,
      convRule: rule54
  }, {
      start: 571,
      length: 1,
      convRule: rule22
  }, {
      start: 572,
      length: 1,
      convRule: rule23
  }, {
      start: 573,
      length: 1,
      convRule: rule55
  }, {
      start: 574,
      length: 1,
      convRule: rule56
  }, {
      start: 575,
      length: 2,
      convRule: rule57
  }, {
      start: 577,
      length: 1,
      convRule: rule22
  }, {
      start: 578,
      length: 1,
      convRule: rule23
  }, {
      start: 579,
      length: 1,
      convRule: rule58
  }, {
      start: 580,
      length: 1,
      convRule: rule59
  }, {
      start: 581,
      length: 1,
      convRule: rule60
  }, {
      start: 582,
      length: 1,
      convRule: rule22
  }, {
      start: 583,
      length: 1,
      convRule: rule23
  }, {
      start: 584,
      length: 1,
      convRule: rule22
  }, {
      start: 585,
      length: 1,
      convRule: rule23
  }, {
      start: 586,
      length: 1,
      convRule: rule22
  }, {
      start: 587,
      length: 1,
      convRule: rule23
  }, {
      start: 588,
      length: 1,
      convRule: rule22
  }, {
      start: 589,
      length: 1,
      convRule: rule23
  }, {
      start: 590,
      length: 1,
      convRule: rule22
  }, {
      start: 591,
      length: 1,
      convRule: rule23
  }, {
      start: 592,
      length: 1,
      convRule: rule61
  }, {
      start: 593,
      length: 1,
      convRule: rule62
  }, {
      start: 594,
      length: 1,
      convRule: rule63
  }, {
      start: 595,
      length: 1,
      convRule: rule64
  }, {
      start: 596,
      length: 1,
      convRule: rule65
  }, {
      start: 598,
      length: 2,
      convRule: rule66
  }, {
      start: 601,
      length: 1,
      convRule: rule67
  }, {
      start: 603,
      length: 1,
      convRule: rule68
  }, {
      start: 604,
      length: 1,
      convRule: rule69
  }, {
      start: 608,
      length: 1,
      convRule: rule66
  }, {
      start: 609,
      length: 1,
      convRule: rule70
  }, {
      start: 611,
      length: 1,
      convRule: rule71
  }, {
      start: 613,
      length: 1,
      convRule: rule72
  }, {
      start: 614,
      length: 1,
      convRule: rule73
  }, {
      start: 616,
      length: 1,
      convRule: rule74
  }, {
      start: 617,
      length: 1,
      convRule: rule75
  }, {
      start: 618,
      length: 1,
      convRule: rule73
  }, {
      start: 619,
      length: 1,
      convRule: rule76
  }, {
      start: 620,
      length: 1,
      convRule: rule77
  }, {
      start: 623,
      length: 1,
      convRule: rule75
  }, {
      start: 625,
      length: 1,
      convRule: rule78
  }, {
      start: 626,
      length: 1,
      convRule: rule79
  }, {
      start: 629,
      length: 1,
      convRule: rule80
  }, {
      start: 637,
      length: 1,
      convRule: rule81
  }, {
      start: 640,
      length: 1,
      convRule: rule82
  }, {
      start: 642,
      length: 1,
      convRule: rule83
  }, {
      start: 643,
      length: 1,
      convRule: rule82
  }, {
      start: 647,
      length: 1,
      convRule: rule84
  }, {
      start: 648,
      length: 1,
      convRule: rule82
  }, {
      start: 649,
      length: 1,
      convRule: rule85
  }, {
      start: 650,
      length: 2,
      convRule: rule86
  }, {
      start: 652,
      length: 1,
      convRule: rule87
  }, {
      start: 658,
      length: 1,
      convRule: rule88
  }, {
      start: 669,
      length: 1,
      convRule: rule89
  }, {
      start: 670,
      length: 1,
      convRule: rule90
  }, {
      start: 837,
      length: 1,
      convRule: rule93
  }, {
      start: 880,
      length: 1,
      convRule: rule22
  }, {
      start: 881,
      length: 1,
      convRule: rule23
  }, {
      start: 882,
      length: 1,
      convRule: rule22
  }, {
      start: 883,
      length: 1,
      convRule: rule23
  }, {
      start: 886,
      length: 1,
      convRule: rule22
  }, {
      start: 887,
      length: 1,
      convRule: rule23
  }, {
      start: 891,
      length: 3,
      convRule: rule41
  }, {
      start: 895,
      length: 1,
      convRule: rule94
  }, {
      start: 902,
      length: 1,
      convRule: rule95
  }, {
      start: 904,
      length: 3,
      convRule: rule96
  }, {
      start: 908,
      length: 1,
      convRule: rule97
  }, {
      start: 910,
      length: 2,
      convRule: rule98
  }, {
      start: 913,
      length: 17,
      convRule: rule9
  }, {
      start: 931,
      length: 9,
      convRule: rule9
  }, {
      start: 940,
      length: 1,
      convRule: rule99
  }, {
      start: 941,
      length: 3,
      convRule: rule100
  }, {
      start: 945,
      length: 17,
      convRule: rule12
  }, {
      start: 962,
      length: 1,
      convRule: rule101
  }, {
      start: 963,
      length: 9,
      convRule: rule12
  }, {
      start: 972,
      length: 1,
      convRule: rule102
  }, {
      start: 973,
      length: 2,
      convRule: rule103
  }, {
      start: 975,
      length: 1,
      convRule: rule104
  }, {
      start: 976,
      length: 1,
      convRule: rule105
  }, {
      start: 977,
      length: 1,
      convRule: rule106
  }, {
      start: 981,
      length: 1,
      convRule: rule108
  }, {
      start: 982,
      length: 1,
      convRule: rule109
  }, {
      start: 983,
      length: 1,
      convRule: rule110
  }, {
      start: 984,
      length: 1,
      convRule: rule22
  }, {
      start: 985,
      length: 1,
      convRule: rule23
  }, {
      start: 986,
      length: 1,
      convRule: rule22
  }, {
      start: 987,
      length: 1,
      convRule: rule23
  }, {
      start: 988,
      length: 1,
      convRule: rule22
  }, {
      start: 989,
      length: 1,
      convRule: rule23
  }, {
      start: 990,
      length: 1,
      convRule: rule22
  }, {
      start: 991,
      length: 1,
      convRule: rule23
  }, {
      start: 992,
      length: 1,
      convRule: rule22
  }, {
      start: 993,
      length: 1,
      convRule: rule23
  }, {
      start: 994,
      length: 1,
      convRule: rule22
  }, {
      start: 995,
      length: 1,
      convRule: rule23
  }, {
      start: 996,
      length: 1,
      convRule: rule22
  }, {
      start: 997,
      length: 1,
      convRule: rule23
  }, {
      start: 998,
      length: 1,
      convRule: rule22
  }, {
      start: 999,
      length: 1,
      convRule: rule23
  }, {
      start: 1000,
      length: 1,
      convRule: rule22
  }, {
      start: 1001,
      length: 1,
      convRule: rule23
  }, {
      start: 1002,
      length: 1,
      convRule: rule22
  }, {
      start: 1003,
      length: 1,
      convRule: rule23
  }, {
      start: 1004,
      length: 1,
      convRule: rule22
  }, {
      start: 1005,
      length: 1,
      convRule: rule23
  }, {
      start: 1006,
      length: 1,
      convRule: rule22
  }, {
      start: 1007,
      length: 1,
      convRule: rule23
  }, {
      start: 1008,
      length: 1,
      convRule: rule111
  }, {
      start: 1009,
      length: 1,
      convRule: rule112
  }, {
      start: 1010,
      length: 1,
      convRule: rule113
  }, {
      start: 1011,
      length: 1,
      convRule: rule114
  }, {
      start: 1012,
      length: 1,
      convRule: rule115
  }, {
      start: 1013,
      length: 1,
      convRule: rule116
  }, {
      start: 1015,
      length: 1,
      convRule: rule22
  }, {
      start: 1016,
      length: 1,
      convRule: rule23
  }, {
      start: 1017,
      length: 1,
      convRule: rule117
  }, {
      start: 1018,
      length: 1,
      convRule: rule22
  }, {
      start: 1019,
      length: 1,
      convRule: rule23
  }, {
      start: 1021,
      length: 3,
      convRule: rule53
  }, {
      start: 1024,
      length: 16,
      convRule: rule118
  }, {
      start: 1040,
      length: 32,
      convRule: rule9
  }, {
      start: 1072,
      length: 32,
      convRule: rule12
  }, {
      start: 1104,
      length: 16,
      convRule: rule112
  }, {
      start: 1120,
      length: 1,
      convRule: rule22
  }, {
      start: 1121,
      length: 1,
      convRule: rule23
  }, {
      start: 1122,
      length: 1,
      convRule: rule22
  }, {
      start: 1123,
      length: 1,
      convRule: rule23
  }, {
      start: 1124,
      length: 1,
      convRule: rule22
  }, {
      start: 1125,
      length: 1,
      convRule: rule23
  }, {
      start: 1126,
      length: 1,
      convRule: rule22
  }, {
      start: 1127,
      length: 1,
      convRule: rule23
  }, {
      start: 1128,
      length: 1,
      convRule: rule22
  }, {
      start: 1129,
      length: 1,
      convRule: rule23
  }, {
      start: 1130,
      length: 1,
      convRule: rule22
  }, {
      start: 1131,
      length: 1,
      convRule: rule23
  }, {
      start: 1132,
      length: 1,
      convRule: rule22
  }, {
      start: 1133,
      length: 1,
      convRule: rule23
  }, {
      start: 1134,
      length: 1,
      convRule: rule22
  }, {
      start: 1135,
      length: 1,
      convRule: rule23
  }, {
      start: 1136,
      length: 1,
      convRule: rule22
  }, {
      start: 1137,
      length: 1,
      convRule: rule23
  }, {
      start: 1138,
      length: 1,
      convRule: rule22
  }, {
      start: 1139,
      length: 1,
      convRule: rule23
  }, {
      start: 1140,
      length: 1,
      convRule: rule22
  }, {
      start: 1141,
      length: 1,
      convRule: rule23
  }, {
      start: 1142,
      length: 1,
      convRule: rule22
  }, {
      start: 1143,
      length: 1,
      convRule: rule23
  }, {
      start: 1144,
      length: 1,
      convRule: rule22
  }, {
      start: 1145,
      length: 1,
      convRule: rule23
  }, {
      start: 1146,
      length: 1,
      convRule: rule22
  }, {
      start: 1147,
      length: 1,
      convRule: rule23
  }, {
      start: 1148,
      length: 1,
      convRule: rule22
  }, {
      start: 1149,
      length: 1,
      convRule: rule23
  }, {
      start: 1150,
      length: 1,
      convRule: rule22
  }, {
      start: 1151,
      length: 1,
      convRule: rule23
  }, {
      start: 1152,
      length: 1,
      convRule: rule22
  }, {
      start: 1153,
      length: 1,
      convRule: rule23
  }, {
      start: 1162,
      length: 1,
      convRule: rule22
  }, {
      start: 1163,
      length: 1,
      convRule: rule23
  }, {
      start: 1164,
      length: 1,
      convRule: rule22
  }, {
      start: 1165,
      length: 1,
      convRule: rule23
  }, {
      start: 1166,
      length: 1,
      convRule: rule22
  }, {
      start: 1167,
      length: 1,
      convRule: rule23
  }, {
      start: 1168,
      length: 1,
      convRule: rule22
  }, {
      start: 1169,
      length: 1,
      convRule: rule23
  }, {
      start: 1170,
      length: 1,
      convRule: rule22
  }, {
      start: 1171,
      length: 1,
      convRule: rule23
  }, {
      start: 1172,
      length: 1,
      convRule: rule22
  }, {
      start: 1173,
      length: 1,
      convRule: rule23
  }, {
      start: 1174,
      length: 1,
      convRule: rule22
  }, {
      start: 1175,
      length: 1,
      convRule: rule23
  }, {
      start: 1176,
      length: 1,
      convRule: rule22
  }, {
      start: 1177,
      length: 1,
      convRule: rule23
  }, {
      start: 1178,
      length: 1,
      convRule: rule22
  }, {
      start: 1179,
      length: 1,
      convRule: rule23
  }, {
      start: 1180,
      length: 1,
      convRule: rule22
  }, {
      start: 1181,
      length: 1,
      convRule: rule23
  }, {
      start: 1182,
      length: 1,
      convRule: rule22
  }, {
      start: 1183,
      length: 1,
      convRule: rule23
  }, {
      start: 1184,
      length: 1,
      convRule: rule22
  }, {
      start: 1185,
      length: 1,
      convRule: rule23
  }, {
      start: 1186,
      length: 1,
      convRule: rule22
  }, {
      start: 1187,
      length: 1,
      convRule: rule23
  }, {
      start: 1188,
      length: 1,
      convRule: rule22
  }, {
      start: 1189,
      length: 1,
      convRule: rule23
  }, {
      start: 1190,
      length: 1,
      convRule: rule22
  }, {
      start: 1191,
      length: 1,
      convRule: rule23
  }, {
      start: 1192,
      length: 1,
      convRule: rule22
  }, {
      start: 1193,
      length: 1,
      convRule: rule23
  }, {
      start: 1194,
      length: 1,
      convRule: rule22
  }, {
      start: 1195,
      length: 1,
      convRule: rule23
  }, {
      start: 1196,
      length: 1,
      convRule: rule22
  }, {
      start: 1197,
      length: 1,
      convRule: rule23
  }, {
      start: 1198,
      length: 1,
      convRule: rule22
  }, {
      start: 1199,
      length: 1,
      convRule: rule23
  }, {
      start: 1200,
      length: 1,
      convRule: rule22
  }, {
      start: 1201,
      length: 1,
      convRule: rule23
  }, {
      start: 1202,
      length: 1,
      convRule: rule22
  }, {
      start: 1203,
      length: 1,
      convRule: rule23
  }, {
      start: 1204,
      length: 1,
      convRule: rule22
  }, {
      start: 1205,
      length: 1,
      convRule: rule23
  }, {
      start: 1206,
      length: 1,
      convRule: rule22
  }, {
      start: 1207,
      length: 1,
      convRule: rule23
  }, {
      start: 1208,
      length: 1,
      convRule: rule22
  }, {
      start: 1209,
      length: 1,
      convRule: rule23
  }, {
      start: 1210,
      length: 1,
      convRule: rule22
  }, {
      start: 1211,
      length: 1,
      convRule: rule23
  }, {
      start: 1212,
      length: 1,
      convRule: rule22
  }, {
      start: 1213,
      length: 1,
      convRule: rule23
  }, {
      start: 1214,
      length: 1,
      convRule: rule22
  }, {
      start: 1215,
      length: 1,
      convRule: rule23
  }, {
      start: 1216,
      length: 1,
      convRule: rule120
  }, {
      start: 1217,
      length: 1,
      convRule: rule22
  }, {
      start: 1218,
      length: 1,
      convRule: rule23
  }, {
      start: 1219,
      length: 1,
      convRule: rule22
  }, {
      start: 1220,
      length: 1,
      convRule: rule23
  }, {
      start: 1221,
      length: 1,
      convRule: rule22
  }, {
      start: 1222,
      length: 1,
      convRule: rule23
  }, {
      start: 1223,
      length: 1,
      convRule: rule22
  }, {
      start: 1224,
      length: 1,
      convRule: rule23
  }, {
      start: 1225,
      length: 1,
      convRule: rule22
  }, {
      start: 1226,
      length: 1,
      convRule: rule23
  }, {
      start: 1227,
      length: 1,
      convRule: rule22
  }, {
      start: 1228,
      length: 1,
      convRule: rule23
  }, {
      start: 1229,
      length: 1,
      convRule: rule22
  }, {
      start: 1230,
      length: 1,
      convRule: rule23
  }, {
      start: 1231,
      length: 1,
      convRule: rule121
  }, {
      start: 1232,
      length: 1,
      convRule: rule22
  }, {
      start: 1233,
      length: 1,
      convRule: rule23
  }, {
      start: 1234,
      length: 1,
      convRule: rule22
  }, {
      start: 1235,
      length: 1,
      convRule: rule23
  }, {
      start: 1236,
      length: 1,
      convRule: rule22
  }, {
      start: 1237,
      length: 1,
      convRule: rule23
  }, {
      start: 1238,
      length: 1,
      convRule: rule22
  }, {
      start: 1239,
      length: 1,
      convRule: rule23
  }, {
      start: 1240,
      length: 1,
      convRule: rule22
  }, {
      start: 1241,
      length: 1,
      convRule: rule23
  }, {
      start: 1242,
      length: 1,
      convRule: rule22
  }, {
      start: 1243,
      length: 1,
      convRule: rule23
  }, {
      start: 1244,
      length: 1,
      convRule: rule22
  }, {
      start: 1245,
      length: 1,
      convRule: rule23
  }, {
      start: 1246,
      length: 1,
      convRule: rule22
  }, {
      start: 1247,
      length: 1,
      convRule: rule23
  }, {
      start: 1248,
      length: 1,
      convRule: rule22
  }, {
      start: 1249,
      length: 1,
      convRule: rule23
  }, {
      start: 1250,
      length: 1,
      convRule: rule22
  }, {
      start: 1251,
      length: 1,
      convRule: rule23
  }, {
      start: 1252,
      length: 1,
      convRule: rule22
  }, {
      start: 1253,
      length: 1,
      convRule: rule23
  }, {
      start: 1254,
      length: 1,
      convRule: rule22
  }, {
      start: 1255,
      length: 1,
      convRule: rule23
  }, {
      start: 1256,
      length: 1,
      convRule: rule22
  }, {
      start: 1257,
      length: 1,
      convRule: rule23
  }, {
      start: 1258,
      length: 1,
      convRule: rule22
  }, {
      start: 1259,
      length: 1,
      convRule: rule23
  }, {
      start: 1260,
      length: 1,
      convRule: rule22
  }, {
      start: 1261,
      length: 1,
      convRule: rule23
  }, {
      start: 1262,
      length: 1,
      convRule: rule22
  }, {
      start: 1263,
      length: 1,
      convRule: rule23
  }, {
      start: 1264,
      length: 1,
      convRule: rule22
  }, {
      start: 1265,
      length: 1,
      convRule: rule23
  }, {
      start: 1266,
      length: 1,
      convRule: rule22
  }, {
      start: 1267,
      length: 1,
      convRule: rule23
  }, {
      start: 1268,
      length: 1,
      convRule: rule22
  }, {
      start: 1269,
      length: 1,
      convRule: rule23
  }, {
      start: 1270,
      length: 1,
      convRule: rule22
  }, {
      start: 1271,
      length: 1,
      convRule: rule23
  }, {
      start: 1272,
      length: 1,
      convRule: rule22
  }, {
      start: 1273,
      length: 1,
      convRule: rule23
  }, {
      start: 1274,
      length: 1,
      convRule: rule22
  }, {
      start: 1275,
      length: 1,
      convRule: rule23
  }, {
      start: 1276,
      length: 1,
      convRule: rule22
  }, {
      start: 1277,
      length: 1,
      convRule: rule23
  }, {
      start: 1278,
      length: 1,
      convRule: rule22
  }, {
      start: 1279,
      length: 1,
      convRule: rule23
  }, {
      start: 1280,
      length: 1,
      convRule: rule22
  }, {
      start: 1281,
      length: 1,
      convRule: rule23
  }, {
      start: 1282,
      length: 1,
      convRule: rule22
  }, {
      start: 1283,
      length: 1,
      convRule: rule23
  }, {
      start: 1284,
      length: 1,
      convRule: rule22
  }, {
      start: 1285,
      length: 1,
      convRule: rule23
  }, {
      start: 1286,
      length: 1,
      convRule: rule22
  }, {
      start: 1287,
      length: 1,
      convRule: rule23
  }, {
      start: 1288,
      length: 1,
      convRule: rule22
  }, {
      start: 1289,
      length: 1,
      convRule: rule23
  }, {
      start: 1290,
      length: 1,
      convRule: rule22
  }, {
      start: 1291,
      length: 1,
      convRule: rule23
  }, {
      start: 1292,
      length: 1,
      convRule: rule22
  }, {
      start: 1293,
      length: 1,
      convRule: rule23
  }, {
      start: 1294,
      length: 1,
      convRule: rule22
  }, {
      start: 1295,
      length: 1,
      convRule: rule23
  }, {
      start: 1296,
      length: 1,
      convRule: rule22
  }, {
      start: 1297,
      length: 1,
      convRule: rule23
  }, {
      start: 1298,
      length: 1,
      convRule: rule22
  }, {
      start: 1299,
      length: 1,
      convRule: rule23
  }, {
      start: 1300,
      length: 1,
      convRule: rule22
  }, {
      start: 1301,
      length: 1,
      convRule: rule23
  }, {
      start: 1302,
      length: 1,
      convRule: rule22
  }, {
      start: 1303,
      length: 1,
      convRule: rule23
  }, {
      start: 1304,
      length: 1,
      convRule: rule22
  }, {
      start: 1305,
      length: 1,
      convRule: rule23
  }, {
      start: 1306,
      length: 1,
      convRule: rule22
  }, {
      start: 1307,
      length: 1,
      convRule: rule23
  }, {
      start: 1308,
      length: 1,
      convRule: rule22
  }, {
      start: 1309,
      length: 1,
      convRule: rule23
  }, {
      start: 1310,
      length: 1,
      convRule: rule22
  }, {
      start: 1311,
      length: 1,
      convRule: rule23
  }, {
      start: 1312,
      length: 1,
      convRule: rule22
  }, {
      start: 1313,
      length: 1,
      convRule: rule23
  }, {
      start: 1314,
      length: 1,
      convRule: rule22
  }, {
      start: 1315,
      length: 1,
      convRule: rule23
  }, {
      start: 1316,
      length: 1,
      convRule: rule22
  }, {
      start: 1317,
      length: 1,
      convRule: rule23
  }, {
      start: 1318,
      length: 1,
      convRule: rule22
  }, {
      start: 1319,
      length: 1,
      convRule: rule23
  }, {
      start: 1320,
      length: 1,
      convRule: rule22
  }, {
      start: 1321,
      length: 1,
      convRule: rule23
  }, {
      start: 1322,
      length: 1,
      convRule: rule22
  }, {
      start: 1323,
      length: 1,
      convRule: rule23
  }, {
      start: 1324,
      length: 1,
      convRule: rule22
  }, {
      start: 1325,
      length: 1,
      convRule: rule23
  }, {
      start: 1326,
      length: 1,
      convRule: rule22
  }, {
      start: 1327,
      length: 1,
      convRule: rule23
  }, {
      start: 1329,
      length: 38,
      convRule: rule122
  }, {
      start: 1377,
      length: 38,
      convRule: rule123
  }, {
      start: 4256,
      length: 38,
      convRule: rule125
  }, {
      start: 4295,
      length: 1,
      convRule: rule125
  }, {
      start: 4301,
      length: 1,
      convRule: rule125
  }, {
      start: 4304,
      length: 43,
      convRule: rule126
  }, {
      start: 4349,
      length: 3,
      convRule: rule126
  }, {
      start: 5024,
      length: 80,
      convRule: rule127
  }, {
      start: 5104,
      length: 6,
      convRule: rule104
  }, {
      start: 5112,
      length: 6,
      convRule: rule110
  }, {
      start: 7296,
      length: 1,
      convRule: rule129
  }, {
      start: 7297,
      length: 1,
      convRule: rule130
  }, {
      start: 7298,
      length: 1,
      convRule: rule131
  }, {
      start: 7299,
      length: 2,
      convRule: rule132
  }, {
      start: 7301,
      length: 1,
      convRule: rule133
  }, {
      start: 7302,
      length: 1,
      convRule: rule134
  }, {
      start: 7303,
      length: 1,
      convRule: rule135
  }, {
      start: 7304,
      length: 1,
      convRule: rule136
  }, {
      start: 7312,
      length: 43,
      convRule: rule137
  }, {
      start: 7357,
      length: 3,
      convRule: rule137
  }, {
      start: 7545,
      length: 1,
      convRule: rule138
  }, {
      start: 7549,
      length: 1,
      convRule: rule139
  }, {
      start: 7566,
      length: 1,
      convRule: rule140
  }, {
      start: 7680,
      length: 1,
      convRule: rule22
  }, {
      start: 7681,
      length: 1,
      convRule: rule23
  }, {
      start: 7682,
      length: 1,
      convRule: rule22
  }, {
      start: 7683,
      length: 1,
      convRule: rule23
  }, {
      start: 7684,
      length: 1,
      convRule: rule22
  }, {
      start: 7685,
      length: 1,
      convRule: rule23
  }, {
      start: 7686,
      length: 1,
      convRule: rule22
  }, {
      start: 7687,
      length: 1,
      convRule: rule23
  }, {
      start: 7688,
      length: 1,
      convRule: rule22
  }, {
      start: 7689,
      length: 1,
      convRule: rule23
  }, {
      start: 7690,
      length: 1,
      convRule: rule22
  }, {
      start: 7691,
      length: 1,
      convRule: rule23
  }, {
      start: 7692,
      length: 1,
      convRule: rule22
  }, {
      start: 7693,
      length: 1,
      convRule: rule23
  }, {
      start: 7694,
      length: 1,
      convRule: rule22
  }, {
      start: 7695,
      length: 1,
      convRule: rule23
  }, {
      start: 7696,
      length: 1,
      convRule: rule22
  }, {
      start: 7697,
      length: 1,
      convRule: rule23
  }, {
      start: 7698,
      length: 1,
      convRule: rule22
  }, {
      start: 7699,
      length: 1,
      convRule: rule23
  }, {
      start: 7700,
      length: 1,
      convRule: rule22
  }, {
      start: 7701,
      length: 1,
      convRule: rule23
  }, {
      start: 7702,
      length: 1,
      convRule: rule22
  }, {
      start: 7703,
      length: 1,
      convRule: rule23
  }, {
      start: 7704,
      length: 1,
      convRule: rule22
  }, {
      start: 7705,
      length: 1,
      convRule: rule23
  }, {
      start: 7706,
      length: 1,
      convRule: rule22
  }, {
      start: 7707,
      length: 1,
      convRule: rule23
  }, {
      start: 7708,
      length: 1,
      convRule: rule22
  }, {
      start: 7709,
      length: 1,
      convRule: rule23
  }, {
      start: 7710,
      length: 1,
      convRule: rule22
  }, {
      start: 7711,
      length: 1,
      convRule: rule23
  }, {
      start: 7712,
      length: 1,
      convRule: rule22
  }, {
      start: 7713,
      length: 1,
      convRule: rule23
  }, {
      start: 7714,
      length: 1,
      convRule: rule22
  }, {
      start: 7715,
      length: 1,
      convRule: rule23
  }, {
      start: 7716,
      length: 1,
      convRule: rule22
  }, {
      start: 7717,
      length: 1,
      convRule: rule23
  }, {
      start: 7718,
      length: 1,
      convRule: rule22
  }, {
      start: 7719,
      length: 1,
      convRule: rule23
  }, {
      start: 7720,
      length: 1,
      convRule: rule22
  }, {
      start: 7721,
      length: 1,
      convRule: rule23
  }, {
      start: 7722,
      length: 1,
      convRule: rule22
  }, {
      start: 7723,
      length: 1,
      convRule: rule23
  }, {
      start: 7724,
      length: 1,
      convRule: rule22
  }, {
      start: 7725,
      length: 1,
      convRule: rule23
  }, {
      start: 7726,
      length: 1,
      convRule: rule22
  }, {
      start: 7727,
      length: 1,
      convRule: rule23
  }, {
      start: 7728,
      length: 1,
      convRule: rule22
  }, {
      start: 7729,
      length: 1,
      convRule: rule23
  }, {
      start: 7730,
      length: 1,
      convRule: rule22
  }, {
      start: 7731,
      length: 1,
      convRule: rule23
  }, {
      start: 7732,
      length: 1,
      convRule: rule22
  }, {
      start: 7733,
      length: 1,
      convRule: rule23
  }, {
      start: 7734,
      length: 1,
      convRule: rule22
  }, {
      start: 7735,
      length: 1,
      convRule: rule23
  }, {
      start: 7736,
      length: 1,
      convRule: rule22
  }, {
      start: 7737,
      length: 1,
      convRule: rule23
  }, {
      start: 7738,
      length: 1,
      convRule: rule22
  }, {
      start: 7739,
      length: 1,
      convRule: rule23
  }, {
      start: 7740,
      length: 1,
      convRule: rule22
  }, {
      start: 7741,
      length: 1,
      convRule: rule23
  }, {
      start: 7742,
      length: 1,
      convRule: rule22
  }, {
      start: 7743,
      length: 1,
      convRule: rule23
  }, {
      start: 7744,
      length: 1,
      convRule: rule22
  }, {
      start: 7745,
      length: 1,
      convRule: rule23
  }, {
      start: 7746,
      length: 1,
      convRule: rule22
  }, {
      start: 7747,
      length: 1,
      convRule: rule23
  }, {
      start: 7748,
      length: 1,
      convRule: rule22
  }, {
      start: 7749,
      length: 1,
      convRule: rule23
  }, {
      start: 7750,
      length: 1,
      convRule: rule22
  }, {
      start: 7751,
      length: 1,
      convRule: rule23
  }, {
      start: 7752,
      length: 1,
      convRule: rule22
  }, {
      start: 7753,
      length: 1,
      convRule: rule23
  }, {
      start: 7754,
      length: 1,
      convRule: rule22
  }, {
      start: 7755,
      length: 1,
      convRule: rule23
  }, {
      start: 7756,
      length: 1,
      convRule: rule22
  }, {
      start: 7757,
      length: 1,
      convRule: rule23
  }, {
      start: 7758,
      length: 1,
      convRule: rule22
  }, {
      start: 7759,
      length: 1,
      convRule: rule23
  }, {
      start: 7760,
      length: 1,
      convRule: rule22
  }, {
      start: 7761,
      length: 1,
      convRule: rule23
  }, {
      start: 7762,
      length: 1,
      convRule: rule22
  }, {
      start: 7763,
      length: 1,
      convRule: rule23
  }, {
      start: 7764,
      length: 1,
      convRule: rule22
  }, {
      start: 7765,
      length: 1,
      convRule: rule23
  }, {
      start: 7766,
      length: 1,
      convRule: rule22
  }, {
      start: 7767,
      length: 1,
      convRule: rule23
  }, {
      start: 7768,
      length: 1,
      convRule: rule22
  }, {
      start: 7769,
      length: 1,
      convRule: rule23
  }, {
      start: 7770,
      length: 1,
      convRule: rule22
  }, {
      start: 7771,
      length: 1,
      convRule: rule23
  }, {
      start: 7772,
      length: 1,
      convRule: rule22
  }, {
      start: 7773,
      length: 1,
      convRule: rule23
  }, {
      start: 7774,
      length: 1,
      convRule: rule22
  }, {
      start: 7775,
      length: 1,
      convRule: rule23
  }, {
      start: 7776,
      length: 1,
      convRule: rule22
  }, {
      start: 7777,
      length: 1,
      convRule: rule23
  }, {
      start: 7778,
      length: 1,
      convRule: rule22
  }, {
      start: 7779,
      length: 1,
      convRule: rule23
  }, {
      start: 7780,
      length: 1,
      convRule: rule22
  }, {
      start: 7781,
      length: 1,
      convRule: rule23
  }, {
      start: 7782,
      length: 1,
      convRule: rule22
  }, {
      start: 7783,
      length: 1,
      convRule: rule23
  }, {
      start: 7784,
      length: 1,
      convRule: rule22
  }, {
      start: 7785,
      length: 1,
      convRule: rule23
  }, {
      start: 7786,
      length: 1,
      convRule: rule22
  }, {
      start: 7787,
      length: 1,
      convRule: rule23
  }, {
      start: 7788,
      length: 1,
      convRule: rule22
  }, {
      start: 7789,
      length: 1,
      convRule: rule23
  }, {
      start: 7790,
      length: 1,
      convRule: rule22
  }, {
      start: 7791,
      length: 1,
      convRule: rule23
  }, {
      start: 7792,
      length: 1,
      convRule: rule22
  }, {
      start: 7793,
      length: 1,
      convRule: rule23
  }, {
      start: 7794,
      length: 1,
      convRule: rule22
  }, {
      start: 7795,
      length: 1,
      convRule: rule23
  }, {
      start: 7796,
      length: 1,
      convRule: rule22
  }, {
      start: 7797,
      length: 1,
      convRule: rule23
  }, {
      start: 7798,
      length: 1,
      convRule: rule22
  }, {
      start: 7799,
      length: 1,
      convRule: rule23
  }, {
      start: 7800,
      length: 1,
      convRule: rule22
  }, {
      start: 7801,
      length: 1,
      convRule: rule23
  }, {
      start: 7802,
      length: 1,
      convRule: rule22
  }, {
      start: 7803,
      length: 1,
      convRule: rule23
  }, {
      start: 7804,
      length: 1,
      convRule: rule22
  }, {
      start: 7805,
      length: 1,
      convRule: rule23
  }, {
      start: 7806,
      length: 1,
      convRule: rule22
  }, {
      start: 7807,
      length: 1,
      convRule: rule23
  }, {
      start: 7808,
      length: 1,
      convRule: rule22
  }, {
      start: 7809,
      length: 1,
      convRule: rule23
  }, {
      start: 7810,
      length: 1,
      convRule: rule22
  }, {
      start: 7811,
      length: 1,
      convRule: rule23
  }, {
      start: 7812,
      length: 1,
      convRule: rule22
  }, {
      start: 7813,
      length: 1,
      convRule: rule23
  }, {
      start: 7814,
      length: 1,
      convRule: rule22
  }, {
      start: 7815,
      length: 1,
      convRule: rule23
  }, {
      start: 7816,
      length: 1,
      convRule: rule22
  }, {
      start: 7817,
      length: 1,
      convRule: rule23
  }, {
      start: 7818,
      length: 1,
      convRule: rule22
  }, {
      start: 7819,
      length: 1,
      convRule: rule23
  }, {
      start: 7820,
      length: 1,
      convRule: rule22
  }, {
      start: 7821,
      length: 1,
      convRule: rule23
  }, {
      start: 7822,
      length: 1,
      convRule: rule22
  }, {
      start: 7823,
      length: 1,
      convRule: rule23
  }, {
      start: 7824,
      length: 1,
      convRule: rule22
  }, {
      start: 7825,
      length: 1,
      convRule: rule23
  }, {
      start: 7826,
      length: 1,
      convRule: rule22
  }, {
      start: 7827,
      length: 1,
      convRule: rule23
  }, {
      start: 7828,
      length: 1,
      convRule: rule22
  }, {
      start: 7829,
      length: 1,
      convRule: rule23
  }, {
      start: 7835,
      length: 1,
      convRule: rule141
  }, {
      start: 7838,
      length: 1,
      convRule: rule142
  }, {
      start: 7840,
      length: 1,
      convRule: rule22
  }, {
      start: 7841,
      length: 1,
      convRule: rule23
  }, {
      start: 7842,
      length: 1,
      convRule: rule22
  }, {
      start: 7843,
      length: 1,
      convRule: rule23
  }, {
      start: 7844,
      length: 1,
      convRule: rule22
  }, {
      start: 7845,
      length: 1,
      convRule: rule23
  }, {
      start: 7846,
      length: 1,
      convRule: rule22
  }, {
      start: 7847,
      length: 1,
      convRule: rule23
  }, {
      start: 7848,
      length: 1,
      convRule: rule22
  }, {
      start: 7849,
      length: 1,
      convRule: rule23
  }, {
      start: 7850,
      length: 1,
      convRule: rule22
  }, {
      start: 7851,
      length: 1,
      convRule: rule23
  }, {
      start: 7852,
      length: 1,
      convRule: rule22
  }, {
      start: 7853,
      length: 1,
      convRule: rule23
  }, {
      start: 7854,
      length: 1,
      convRule: rule22
  }, {
      start: 7855,
      length: 1,
      convRule: rule23
  }, {
      start: 7856,
      length: 1,
      convRule: rule22
  }, {
      start: 7857,
      length: 1,
      convRule: rule23
  }, {
      start: 7858,
      length: 1,
      convRule: rule22
  }, {
      start: 7859,
      length: 1,
      convRule: rule23
  }, {
      start: 7860,
      length: 1,
      convRule: rule22
  }, {
      start: 7861,
      length: 1,
      convRule: rule23
  }, {
      start: 7862,
      length: 1,
      convRule: rule22
  }, {
      start: 7863,
      length: 1,
      convRule: rule23
  }, {
      start: 7864,
      length: 1,
      convRule: rule22
  }, {
      start: 7865,
      length: 1,
      convRule: rule23
  }, {
      start: 7866,
      length: 1,
      convRule: rule22
  }, {
      start: 7867,
      length: 1,
      convRule: rule23
  }, {
      start: 7868,
      length: 1,
      convRule: rule22
  }, {
      start: 7869,
      length: 1,
      convRule: rule23
  }, {
      start: 7870,
      length: 1,
      convRule: rule22
  }, {
      start: 7871,
      length: 1,
      convRule: rule23
  }, {
      start: 7872,
      length: 1,
      convRule: rule22
  }, {
      start: 7873,
      length: 1,
      convRule: rule23
  }, {
      start: 7874,
      length: 1,
      convRule: rule22
  }, {
      start: 7875,
      length: 1,
      convRule: rule23
  }, {
      start: 7876,
      length: 1,
      convRule: rule22
  }, {
      start: 7877,
      length: 1,
      convRule: rule23
  }, {
      start: 7878,
      length: 1,
      convRule: rule22
  }, {
      start: 7879,
      length: 1,
      convRule: rule23
  }, {
      start: 7880,
      length: 1,
      convRule: rule22
  }, {
      start: 7881,
      length: 1,
      convRule: rule23
  }, {
      start: 7882,
      length: 1,
      convRule: rule22
  }, {
      start: 7883,
      length: 1,
      convRule: rule23
  }, {
      start: 7884,
      length: 1,
      convRule: rule22
  }, {
      start: 7885,
      length: 1,
      convRule: rule23
  }, {
      start: 7886,
      length: 1,
      convRule: rule22
  }, {
      start: 7887,
      length: 1,
      convRule: rule23
  }, {
      start: 7888,
      length: 1,
      convRule: rule22
  }, {
      start: 7889,
      length: 1,
      convRule: rule23
  }, {
      start: 7890,
      length: 1,
      convRule: rule22
  }, {
      start: 7891,
      length: 1,
      convRule: rule23
  }, {
      start: 7892,
      length: 1,
      convRule: rule22
  }, {
      start: 7893,
      length: 1,
      convRule: rule23
  }, {
      start: 7894,
      length: 1,
      convRule: rule22
  }, {
      start: 7895,
      length: 1,
      convRule: rule23
  }, {
      start: 7896,
      length: 1,
      convRule: rule22
  }, {
      start: 7897,
      length: 1,
      convRule: rule23
  }, {
      start: 7898,
      length: 1,
      convRule: rule22
  }, {
      start: 7899,
      length: 1,
      convRule: rule23
  }, {
      start: 7900,
      length: 1,
      convRule: rule22
  }, {
      start: 7901,
      length: 1,
      convRule: rule23
  }, {
      start: 7902,
      length: 1,
      convRule: rule22
  }, {
      start: 7903,
      length: 1,
      convRule: rule23
  }, {
      start: 7904,
      length: 1,
      convRule: rule22
  }, {
      start: 7905,
      length: 1,
      convRule: rule23
  }, {
      start: 7906,
      length: 1,
      convRule: rule22
  }, {
      start: 7907,
      length: 1,
      convRule: rule23
  }, {
      start: 7908,
      length: 1,
      convRule: rule22
  }, {
      start: 7909,
      length: 1,
      convRule: rule23
  }, {
      start: 7910,
      length: 1,
      convRule: rule22
  }, {
      start: 7911,
      length: 1,
      convRule: rule23
  }, {
      start: 7912,
      length: 1,
      convRule: rule22
  }, {
      start: 7913,
      length: 1,
      convRule: rule23
  }, {
      start: 7914,
      length: 1,
      convRule: rule22
  }, {
      start: 7915,
      length: 1,
      convRule: rule23
  }, {
      start: 7916,
      length: 1,
      convRule: rule22
  }, {
      start: 7917,
      length: 1,
      convRule: rule23
  }, {
      start: 7918,
      length: 1,
      convRule: rule22
  }, {
      start: 7919,
      length: 1,
      convRule: rule23
  }, {
      start: 7920,
      length: 1,
      convRule: rule22
  }, {
      start: 7921,
      length: 1,
      convRule: rule23
  }, {
      start: 7922,
      length: 1,
      convRule: rule22
  }, {
      start: 7923,
      length: 1,
      convRule: rule23
  }, {
      start: 7924,
      length: 1,
      convRule: rule22
  }, {
      start: 7925,
      length: 1,
      convRule: rule23
  }, {
      start: 7926,
      length: 1,
      convRule: rule22
  }, {
      start: 7927,
      length: 1,
      convRule: rule23
  }, {
      start: 7928,
      length: 1,
      convRule: rule22
  }, {
      start: 7929,
      length: 1,
      convRule: rule23
  }, {
      start: 7930,
      length: 1,
      convRule: rule22
  }, {
      start: 7931,
      length: 1,
      convRule: rule23
  }, {
      start: 7932,
      length: 1,
      convRule: rule22
  }, {
      start: 7933,
      length: 1,
      convRule: rule23
  }, {
      start: 7934,
      length: 1,
      convRule: rule22
  }, {
      start: 7935,
      length: 1,
      convRule: rule23
  }, {
      start: 7936,
      length: 8,
      convRule: rule143
  }, {
      start: 7944,
      length: 8,
      convRule: rule144
  }, {
      start: 7952,
      length: 6,
      convRule: rule143
  }, {
      start: 7960,
      length: 6,
      convRule: rule144
  }, {
      start: 7968,
      length: 8,
      convRule: rule143
  }, {
      start: 7976,
      length: 8,
      convRule: rule144
  }, {
      start: 7984,
      length: 8,
      convRule: rule143
  }, {
      start: 7992,
      length: 8,
      convRule: rule144
  }, {
      start: 8000,
      length: 6,
      convRule: rule143
  }, {
      start: 8008,
      length: 6,
      convRule: rule144
  }, {
      start: 8017,
      length: 1,
      convRule: rule143
  }, {
      start: 8019,
      length: 1,
      convRule: rule143
  }, {
      start: 8021,
      length: 1,
      convRule: rule143
  }, {
      start: 8023,
      length: 1,
      convRule: rule143
  }, {
      start: 8025,
      length: 1,
      convRule: rule144
  }, {
      start: 8027,
      length: 1,
      convRule: rule144
  }, {
      start: 8029,
      length: 1,
      convRule: rule144
  }, {
      start: 8031,
      length: 1,
      convRule: rule144
  }, {
      start: 8032,
      length: 8,
      convRule: rule143
  }, {
      start: 8040,
      length: 8,
      convRule: rule144
  }, {
      start: 8048,
      length: 2,
      convRule: rule145
  }, {
      start: 8050,
      length: 4,
      convRule: rule146
  }, {
      start: 8054,
      length: 2,
      convRule: rule147
  }, {
      start: 8056,
      length: 2,
      convRule: rule148
  }, {
      start: 8058,
      length: 2,
      convRule: rule149
  }, {
      start: 8060,
      length: 2,
      convRule: rule150
  }, {
      start: 8064,
      length: 8,
      convRule: rule143
  }, {
      start: 8072,
      length: 8,
      convRule: rule151
  }, {
      start: 8080,
      length: 8,
      convRule: rule143
  }, {
      start: 8088,
      length: 8,
      convRule: rule151
  }, {
      start: 8096,
      length: 8,
      convRule: rule143
  }, {
      start: 8104,
      length: 8,
      convRule: rule151
  }, {
      start: 8112,
      length: 2,
      convRule: rule143
  }, {
      start: 8115,
      length: 1,
      convRule: rule152
  }, {
      start: 8120,
      length: 2,
      convRule: rule144
  }, {
      start: 8122,
      length: 2,
      convRule: rule153
  }, {
      start: 8124,
      length: 1,
      convRule: rule154
  }, {
      start: 8126,
      length: 1,
      convRule: rule155
  }, {
      start: 8131,
      length: 1,
      convRule: rule152
  }, {
      start: 8136,
      length: 4,
      convRule: rule156
  }, {
      start: 8140,
      length: 1,
      convRule: rule154
  }, {
      start: 8144,
      length: 2,
      convRule: rule143
  }, {
      start: 8152,
      length: 2,
      convRule: rule144
  }, {
      start: 8154,
      length: 2,
      convRule: rule157
  }, {
      start: 8160,
      length: 2,
      convRule: rule143
  }, {
      start: 8165,
      length: 1,
      convRule: rule113
  }, {
      start: 8168,
      length: 2,
      convRule: rule144
  }, {
      start: 8170,
      length: 2,
      convRule: rule158
  }, {
      start: 8172,
      length: 1,
      convRule: rule117
  }, {
      start: 8179,
      length: 1,
      convRule: rule152
  }, {
      start: 8184,
      length: 2,
      convRule: rule159
  }, {
      start: 8186,
      length: 2,
      convRule: rule160
  }, {
      start: 8188,
      length: 1,
      convRule: rule154
  }, {
      start: 8486,
      length: 1,
      convRule: rule163
  }, {
      start: 8490,
      length: 1,
      convRule: rule164
  }, {
      start: 8491,
      length: 1,
      convRule: rule165
  }, {
      start: 8498,
      length: 1,
      convRule: rule166
  }, {
      start: 8526,
      length: 1,
      convRule: rule167
  }, {
      start: 8544,
      length: 16,
      convRule: rule168
  }, {
      start: 8560,
      length: 16,
      convRule: rule169
  }, {
      start: 8579,
      length: 1,
      convRule: rule22
  }, {
      start: 8580,
      length: 1,
      convRule: rule23
  }, {
      start: 9398,
      length: 26,
      convRule: rule170
  }, {
      start: 9424,
      length: 26,
      convRule: rule171
  }, {
      start: 11264,
      length: 47,
      convRule: rule122
  }, {
      start: 11312,
      length: 47,
      convRule: rule123
  }, {
      start: 11360,
      length: 1,
      convRule: rule22
  }, {
      start: 11361,
      length: 1,
      convRule: rule23
  }, {
      start: 11362,
      length: 1,
      convRule: rule172
  }, {
      start: 11363,
      length: 1,
      convRule: rule173
  }, {
      start: 11364,
      length: 1,
      convRule: rule174
  }, {
      start: 11365,
      length: 1,
      convRule: rule175
  }, {
      start: 11366,
      length: 1,
      convRule: rule176
  }, {
      start: 11367,
      length: 1,
      convRule: rule22
  }, {
      start: 11368,
      length: 1,
      convRule: rule23
  }, {
      start: 11369,
      length: 1,
      convRule: rule22
  }, {
      start: 11370,
      length: 1,
      convRule: rule23
  }, {
      start: 11371,
      length: 1,
      convRule: rule22
  }, {
      start: 11372,
      length: 1,
      convRule: rule23
  }, {
      start: 11373,
      length: 1,
      convRule: rule177
  }, {
      start: 11374,
      length: 1,
      convRule: rule178
  }, {
      start: 11375,
      length: 1,
      convRule: rule179
  }, {
      start: 11376,
      length: 1,
      convRule: rule180
  }, {
      start: 11378,
      length: 1,
      convRule: rule22
  }, {
      start: 11379,
      length: 1,
      convRule: rule23
  }, {
      start: 11381,
      length: 1,
      convRule: rule22
  }, {
      start: 11382,
      length: 1,
      convRule: rule23
  }, {
      start: 11390,
      length: 2,
      convRule: rule181
  }, {
      start: 11392,
      length: 1,
      convRule: rule22
  }, {
      start: 11393,
      length: 1,
      convRule: rule23
  }, {
      start: 11394,
      length: 1,
      convRule: rule22
  }, {
      start: 11395,
      length: 1,
      convRule: rule23
  }, {
      start: 11396,
      length: 1,
      convRule: rule22
  }, {
      start: 11397,
      length: 1,
      convRule: rule23
  }, {
      start: 11398,
      length: 1,
      convRule: rule22
  }, {
      start: 11399,
      length: 1,
      convRule: rule23
  }, {
      start: 11400,
      length: 1,
      convRule: rule22
  }, {
      start: 11401,
      length: 1,
      convRule: rule23
  }, {
      start: 11402,
      length: 1,
      convRule: rule22
  }, {
      start: 11403,
      length: 1,
      convRule: rule23
  }, {
      start: 11404,
      length: 1,
      convRule: rule22
  }, {
      start: 11405,
      length: 1,
      convRule: rule23
  }, {
      start: 11406,
      length: 1,
      convRule: rule22
  }, {
      start: 11407,
      length: 1,
      convRule: rule23
  }, {
      start: 11408,
      length: 1,
      convRule: rule22
  }, {
      start: 11409,
      length: 1,
      convRule: rule23
  }, {
      start: 11410,
      length: 1,
      convRule: rule22
  }, {
      start: 11411,
      length: 1,
      convRule: rule23
  }, {
      start: 11412,
      length: 1,
      convRule: rule22
  }, {
      start: 11413,
      length: 1,
      convRule: rule23
  }, {
      start: 11414,
      length: 1,
      convRule: rule22
  }, {
      start: 11415,
      length: 1,
      convRule: rule23
  }, {
      start: 11416,
      length: 1,
      convRule: rule22
  }, {
      start: 11417,
      length: 1,
      convRule: rule23
  }, {
      start: 11418,
      length: 1,
      convRule: rule22
  }, {
      start: 11419,
      length: 1,
      convRule: rule23
  }, {
      start: 11420,
      length: 1,
      convRule: rule22
  }, {
      start: 11421,
      length: 1,
      convRule: rule23
  }, {
      start: 11422,
      length: 1,
      convRule: rule22
  }, {
      start: 11423,
      length: 1,
      convRule: rule23
  }, {
      start: 11424,
      length: 1,
      convRule: rule22
  }, {
      start: 11425,
      length: 1,
      convRule: rule23
  }, {
      start: 11426,
      length: 1,
      convRule: rule22
  }, {
      start: 11427,
      length: 1,
      convRule: rule23
  }, {
      start: 11428,
      length: 1,
      convRule: rule22
  }, {
      start: 11429,
      length: 1,
      convRule: rule23
  }, {
      start: 11430,
      length: 1,
      convRule: rule22
  }, {
      start: 11431,
      length: 1,
      convRule: rule23
  }, {
      start: 11432,
      length: 1,
      convRule: rule22
  }, {
      start: 11433,
      length: 1,
      convRule: rule23
  }, {
      start: 11434,
      length: 1,
      convRule: rule22
  }, {
      start: 11435,
      length: 1,
      convRule: rule23
  }, {
      start: 11436,
      length: 1,
      convRule: rule22
  }, {
      start: 11437,
      length: 1,
      convRule: rule23
  }, {
      start: 11438,
      length: 1,
      convRule: rule22
  }, {
      start: 11439,
      length: 1,
      convRule: rule23
  }, {
      start: 11440,
      length: 1,
      convRule: rule22
  }, {
      start: 11441,
      length: 1,
      convRule: rule23
  }, {
      start: 11442,
      length: 1,
      convRule: rule22
  }, {
      start: 11443,
      length: 1,
      convRule: rule23
  }, {
      start: 11444,
      length: 1,
      convRule: rule22
  }, {
      start: 11445,
      length: 1,
      convRule: rule23
  }, {
      start: 11446,
      length: 1,
      convRule: rule22
  }, {
      start: 11447,
      length: 1,
      convRule: rule23
  }, {
      start: 11448,
      length: 1,
      convRule: rule22
  }, {
      start: 11449,
      length: 1,
      convRule: rule23
  }, {
      start: 11450,
      length: 1,
      convRule: rule22
  }, {
      start: 11451,
      length: 1,
      convRule: rule23
  }, {
      start: 11452,
      length: 1,
      convRule: rule22
  }, {
      start: 11453,
      length: 1,
      convRule: rule23
  }, {
      start: 11454,
      length: 1,
      convRule: rule22
  }, {
      start: 11455,
      length: 1,
      convRule: rule23
  }, {
      start: 11456,
      length: 1,
      convRule: rule22
  }, {
      start: 11457,
      length: 1,
      convRule: rule23
  }, {
      start: 11458,
      length: 1,
      convRule: rule22
  }, {
      start: 11459,
      length: 1,
      convRule: rule23
  }, {
      start: 11460,
      length: 1,
      convRule: rule22
  }, {
      start: 11461,
      length: 1,
      convRule: rule23
  }, {
      start: 11462,
      length: 1,
      convRule: rule22
  }, {
      start: 11463,
      length: 1,
      convRule: rule23
  }, {
      start: 11464,
      length: 1,
      convRule: rule22
  }, {
      start: 11465,
      length: 1,
      convRule: rule23
  }, {
      start: 11466,
      length: 1,
      convRule: rule22
  }, {
      start: 11467,
      length: 1,
      convRule: rule23
  }, {
      start: 11468,
      length: 1,
      convRule: rule22
  }, {
      start: 11469,
      length: 1,
      convRule: rule23
  }, {
      start: 11470,
      length: 1,
      convRule: rule22
  }, {
      start: 11471,
      length: 1,
      convRule: rule23
  }, {
      start: 11472,
      length: 1,
      convRule: rule22
  }, {
      start: 11473,
      length: 1,
      convRule: rule23
  }, {
      start: 11474,
      length: 1,
      convRule: rule22
  }, {
      start: 11475,
      length: 1,
      convRule: rule23
  }, {
      start: 11476,
      length: 1,
      convRule: rule22
  }, {
      start: 11477,
      length: 1,
      convRule: rule23
  }, {
      start: 11478,
      length: 1,
      convRule: rule22
  }, {
      start: 11479,
      length: 1,
      convRule: rule23
  }, {
      start: 11480,
      length: 1,
      convRule: rule22
  }, {
      start: 11481,
      length: 1,
      convRule: rule23
  }, {
      start: 11482,
      length: 1,
      convRule: rule22
  }, {
      start: 11483,
      length: 1,
      convRule: rule23
  }, {
      start: 11484,
      length: 1,
      convRule: rule22
  }, {
      start: 11485,
      length: 1,
      convRule: rule23
  }, {
      start: 11486,
      length: 1,
      convRule: rule22
  }, {
      start: 11487,
      length: 1,
      convRule: rule23
  }, {
      start: 11488,
      length: 1,
      convRule: rule22
  }, {
      start: 11489,
      length: 1,
      convRule: rule23
  }, {
      start: 11490,
      length: 1,
      convRule: rule22
  }, {
      start: 11491,
      length: 1,
      convRule: rule23
  }, {
      start: 11499,
      length: 1,
      convRule: rule22
  }, {
      start: 11500,
      length: 1,
      convRule: rule23
  }, {
      start: 11501,
      length: 1,
      convRule: rule22
  }, {
      start: 11502,
      length: 1,
      convRule: rule23
  }, {
      start: 11506,
      length: 1,
      convRule: rule22
  }, {
      start: 11507,
      length: 1,
      convRule: rule23
  }, {
      start: 11520,
      length: 38,
      convRule: rule182
  }, {
      start: 11559,
      length: 1,
      convRule: rule182
  }, {
      start: 11565,
      length: 1,
      convRule: rule182
  }, {
      start: 42560,
      length: 1,
      convRule: rule22
  }, {
      start: 42561,
      length: 1,
      convRule: rule23
  }, {
      start: 42562,
      length: 1,
      convRule: rule22
  }, {
      start: 42563,
      length: 1,
      convRule: rule23
  }, {
      start: 42564,
      length: 1,
      convRule: rule22
  }, {
      start: 42565,
      length: 1,
      convRule: rule23
  }, {
      start: 42566,
      length: 1,
      convRule: rule22
  }, {
      start: 42567,
      length: 1,
      convRule: rule23
  }, {
      start: 42568,
      length: 1,
      convRule: rule22
  }, {
      start: 42569,
      length: 1,
      convRule: rule23
  }, {
      start: 42570,
      length: 1,
      convRule: rule22
  }, {
      start: 42571,
      length: 1,
      convRule: rule23
  }, {
      start: 42572,
      length: 1,
      convRule: rule22
  }, {
      start: 42573,
      length: 1,
      convRule: rule23
  }, {
      start: 42574,
      length: 1,
      convRule: rule22
  }, {
      start: 42575,
      length: 1,
      convRule: rule23
  }, {
      start: 42576,
      length: 1,
      convRule: rule22
  }, {
      start: 42577,
      length: 1,
      convRule: rule23
  }, {
      start: 42578,
      length: 1,
      convRule: rule22
  }, {
      start: 42579,
      length: 1,
      convRule: rule23
  }, {
      start: 42580,
      length: 1,
      convRule: rule22
  }, {
      start: 42581,
      length: 1,
      convRule: rule23
  }, {
      start: 42582,
      length: 1,
      convRule: rule22
  }, {
      start: 42583,
      length: 1,
      convRule: rule23
  }, {
      start: 42584,
      length: 1,
      convRule: rule22
  }, {
      start: 42585,
      length: 1,
      convRule: rule23
  }, {
      start: 42586,
      length: 1,
      convRule: rule22
  }, {
      start: 42587,
      length: 1,
      convRule: rule23
  }, {
      start: 42588,
      length: 1,
      convRule: rule22
  }, {
      start: 42589,
      length: 1,
      convRule: rule23
  }, {
      start: 42590,
      length: 1,
      convRule: rule22
  }, {
      start: 42591,
      length: 1,
      convRule: rule23
  }, {
      start: 42592,
      length: 1,
      convRule: rule22
  }, {
      start: 42593,
      length: 1,
      convRule: rule23
  }, {
      start: 42594,
      length: 1,
      convRule: rule22
  }, {
      start: 42595,
      length: 1,
      convRule: rule23
  }, {
      start: 42596,
      length: 1,
      convRule: rule22
  }, {
      start: 42597,
      length: 1,
      convRule: rule23
  }, {
      start: 42598,
      length: 1,
      convRule: rule22
  }, {
      start: 42599,
      length: 1,
      convRule: rule23
  }, {
      start: 42600,
      length: 1,
      convRule: rule22
  }, {
      start: 42601,
      length: 1,
      convRule: rule23
  }, {
      start: 42602,
      length: 1,
      convRule: rule22
  }, {
      start: 42603,
      length: 1,
      convRule: rule23
  }, {
      start: 42604,
      length: 1,
      convRule: rule22
  }, {
      start: 42605,
      length: 1,
      convRule: rule23
  }, {
      start: 42624,
      length: 1,
      convRule: rule22
  }, {
      start: 42625,
      length: 1,
      convRule: rule23
  }, {
      start: 42626,
      length: 1,
      convRule: rule22
  }, {
      start: 42627,
      length: 1,
      convRule: rule23
  }, {
      start: 42628,
      length: 1,
      convRule: rule22
  }, {
      start: 42629,
      length: 1,
      convRule: rule23
  }, {
      start: 42630,
      length: 1,
      convRule: rule22
  }, {
      start: 42631,
      length: 1,
      convRule: rule23
  }, {
      start: 42632,
      length: 1,
      convRule: rule22
  }, {
      start: 42633,
      length: 1,
      convRule: rule23
  }, {
      start: 42634,
      length: 1,
      convRule: rule22
  }, {
      start: 42635,
      length: 1,
      convRule: rule23
  }, {
      start: 42636,
      length: 1,
      convRule: rule22
  }, {
      start: 42637,
      length: 1,
      convRule: rule23
  }, {
      start: 42638,
      length: 1,
      convRule: rule22
  }, {
      start: 42639,
      length: 1,
      convRule: rule23
  }, {
      start: 42640,
      length: 1,
      convRule: rule22
  }, {
      start: 42641,
      length: 1,
      convRule: rule23
  }, {
      start: 42642,
      length: 1,
      convRule: rule22
  }, {
      start: 42643,
      length: 1,
      convRule: rule23
  }, {
      start: 42644,
      length: 1,
      convRule: rule22
  }, {
      start: 42645,
      length: 1,
      convRule: rule23
  }, {
      start: 42646,
      length: 1,
      convRule: rule22
  }, {
      start: 42647,
      length: 1,
      convRule: rule23
  }, {
      start: 42648,
      length: 1,
      convRule: rule22
  }, {
      start: 42649,
      length: 1,
      convRule: rule23
  }, {
      start: 42650,
      length: 1,
      convRule: rule22
  }, {
      start: 42651,
      length: 1,
      convRule: rule23
  }, {
      start: 42786,
      length: 1,
      convRule: rule22
  }, {
      start: 42787,
      length: 1,
      convRule: rule23
  }, {
      start: 42788,
      length: 1,
      convRule: rule22
  }, {
      start: 42789,
      length: 1,
      convRule: rule23
  }, {
      start: 42790,
      length: 1,
      convRule: rule22
  }, {
      start: 42791,
      length: 1,
      convRule: rule23
  }, {
      start: 42792,
      length: 1,
      convRule: rule22
  }, {
      start: 42793,
      length: 1,
      convRule: rule23
  }, {
      start: 42794,
      length: 1,
      convRule: rule22
  }, {
      start: 42795,
      length: 1,
      convRule: rule23
  }, {
      start: 42796,
      length: 1,
      convRule: rule22
  }, {
      start: 42797,
      length: 1,
      convRule: rule23
  }, {
      start: 42798,
      length: 1,
      convRule: rule22
  }, {
      start: 42799,
      length: 1,
      convRule: rule23
  }, {
      start: 42802,
      length: 1,
      convRule: rule22
  }, {
      start: 42803,
      length: 1,
      convRule: rule23
  }, {
      start: 42804,
      length: 1,
      convRule: rule22
  }, {
      start: 42805,
      length: 1,
      convRule: rule23
  }, {
      start: 42806,
      length: 1,
      convRule: rule22
  }, {
      start: 42807,
      length: 1,
      convRule: rule23
  }, {
      start: 42808,
      length: 1,
      convRule: rule22
  }, {
      start: 42809,
      length: 1,
      convRule: rule23
  }, {
      start: 42810,
      length: 1,
      convRule: rule22
  }, {
      start: 42811,
      length: 1,
      convRule: rule23
  }, {
      start: 42812,
      length: 1,
      convRule: rule22
  }, {
      start: 42813,
      length: 1,
      convRule: rule23
  }, {
      start: 42814,
      length: 1,
      convRule: rule22
  }, {
      start: 42815,
      length: 1,
      convRule: rule23
  }, {
      start: 42816,
      length: 1,
      convRule: rule22
  }, {
      start: 42817,
      length: 1,
      convRule: rule23
  }, {
      start: 42818,
      length: 1,
      convRule: rule22
  }, {
      start: 42819,
      length: 1,
      convRule: rule23
  }, {
      start: 42820,
      length: 1,
      convRule: rule22
  }, {
      start: 42821,
      length: 1,
      convRule: rule23
  }, {
      start: 42822,
      length: 1,
      convRule: rule22
  }, {
      start: 42823,
      length: 1,
      convRule: rule23
  }, {
      start: 42824,
      length: 1,
      convRule: rule22
  }, {
      start: 42825,
      length: 1,
      convRule: rule23
  }, {
      start: 42826,
      length: 1,
      convRule: rule22
  }, {
      start: 42827,
      length: 1,
      convRule: rule23
  }, {
      start: 42828,
      length: 1,
      convRule: rule22
  }, {
      start: 42829,
      length: 1,
      convRule: rule23
  }, {
      start: 42830,
      length: 1,
      convRule: rule22
  }, {
      start: 42831,
      length: 1,
      convRule: rule23
  }, {
      start: 42832,
      length: 1,
      convRule: rule22
  }, {
      start: 42833,
      length: 1,
      convRule: rule23
  }, {
      start: 42834,
      length: 1,
      convRule: rule22
  }, {
      start: 42835,
      length: 1,
      convRule: rule23
  }, {
      start: 42836,
      length: 1,
      convRule: rule22
  }, {
      start: 42837,
      length: 1,
      convRule: rule23
  }, {
      start: 42838,
      length: 1,
      convRule: rule22
  }, {
      start: 42839,
      length: 1,
      convRule: rule23
  }, {
      start: 42840,
      length: 1,
      convRule: rule22
  }, {
      start: 42841,
      length: 1,
      convRule: rule23
  }, {
      start: 42842,
      length: 1,
      convRule: rule22
  }, {
      start: 42843,
      length: 1,
      convRule: rule23
  }, {
      start: 42844,
      length: 1,
      convRule: rule22
  }, {
      start: 42845,
      length: 1,
      convRule: rule23
  }, {
      start: 42846,
      length: 1,
      convRule: rule22
  }, {
      start: 42847,
      length: 1,
      convRule: rule23
  }, {
      start: 42848,
      length: 1,
      convRule: rule22
  }, {
      start: 42849,
      length: 1,
      convRule: rule23
  }, {
      start: 42850,
      length: 1,
      convRule: rule22
  }, {
      start: 42851,
      length: 1,
      convRule: rule23
  }, {
      start: 42852,
      length: 1,
      convRule: rule22
  }, {
      start: 42853,
      length: 1,
      convRule: rule23
  }, {
      start: 42854,
      length: 1,
      convRule: rule22
  }, {
      start: 42855,
      length: 1,
      convRule: rule23
  }, {
      start: 42856,
      length: 1,
      convRule: rule22
  }, {
      start: 42857,
      length: 1,
      convRule: rule23
  }, {
      start: 42858,
      length: 1,
      convRule: rule22
  }, {
      start: 42859,
      length: 1,
      convRule: rule23
  }, {
      start: 42860,
      length: 1,
      convRule: rule22
  }, {
      start: 42861,
      length: 1,
      convRule: rule23
  }, {
      start: 42862,
      length: 1,
      convRule: rule22
  }, {
      start: 42863,
      length: 1,
      convRule: rule23
  }, {
      start: 42873,
      length: 1,
      convRule: rule22
  }, {
      start: 42874,
      length: 1,
      convRule: rule23
  }, {
      start: 42875,
      length: 1,
      convRule: rule22
  }, {
      start: 42876,
      length: 1,
      convRule: rule23
  }, {
      start: 42877,
      length: 1,
      convRule: rule183
  }, {
      start: 42878,
      length: 1,
      convRule: rule22
  }, {
      start: 42879,
      length: 1,
      convRule: rule23
  }, {
      start: 42880,
      length: 1,
      convRule: rule22
  }, {
      start: 42881,
      length: 1,
      convRule: rule23
  }, {
      start: 42882,
      length: 1,
      convRule: rule22
  }, {
      start: 42883,
      length: 1,
      convRule: rule23
  }, {
      start: 42884,
      length: 1,
      convRule: rule22
  }, {
      start: 42885,
      length: 1,
      convRule: rule23
  }, {
      start: 42886,
      length: 1,
      convRule: rule22
  }, {
      start: 42887,
      length: 1,
      convRule: rule23
  }, {
      start: 42891,
      length: 1,
      convRule: rule22
  }, {
      start: 42892,
      length: 1,
      convRule: rule23
  }, {
      start: 42893,
      length: 1,
      convRule: rule184
  }, {
      start: 42896,
      length: 1,
      convRule: rule22
  }, {
      start: 42897,
      length: 1,
      convRule: rule23
  }, {
      start: 42898,
      length: 1,
      convRule: rule22
  }, {
      start: 42899,
      length: 1,
      convRule: rule23
  }, {
      start: 42900,
      length: 1,
      convRule: rule185
  }, {
      start: 42902,
      length: 1,
      convRule: rule22
  }, {
      start: 42903,
      length: 1,
      convRule: rule23
  }, {
      start: 42904,
      length: 1,
      convRule: rule22
  }, {
      start: 42905,
      length: 1,
      convRule: rule23
  }, {
      start: 42906,
      length: 1,
      convRule: rule22
  }, {
      start: 42907,
      length: 1,
      convRule: rule23
  }, {
      start: 42908,
      length: 1,
      convRule: rule22
  }, {
      start: 42909,
      length: 1,
      convRule: rule23
  }, {
      start: 42910,
      length: 1,
      convRule: rule22
  }, {
      start: 42911,
      length: 1,
      convRule: rule23
  }, {
      start: 42912,
      length: 1,
      convRule: rule22
  }, {
      start: 42913,
      length: 1,
      convRule: rule23
  }, {
      start: 42914,
      length: 1,
      convRule: rule22
  }, {
      start: 42915,
      length: 1,
      convRule: rule23
  }, {
      start: 42916,
      length: 1,
      convRule: rule22
  }, {
      start: 42917,
      length: 1,
      convRule: rule23
  }, {
      start: 42918,
      length: 1,
      convRule: rule22
  }, {
      start: 42919,
      length: 1,
      convRule: rule23
  }, {
      start: 42920,
      length: 1,
      convRule: rule22
  }, {
      start: 42921,
      length: 1,
      convRule: rule23
  }, {
      start: 42922,
      length: 1,
      convRule: rule186
  }, {
      start: 42923,
      length: 1,
      convRule: rule187
  }, {
      start: 42924,
      length: 1,
      convRule: rule188
  }, {
      start: 42925,
      length: 1,
      convRule: rule189
  }, {
      start: 42926,
      length: 1,
      convRule: rule186
  }, {
      start: 42928,
      length: 1,
      convRule: rule190
  }, {
      start: 42929,
      length: 1,
      convRule: rule191
  }, {
      start: 42930,
      length: 1,
      convRule: rule192
  }, {
      start: 42931,
      length: 1,
      convRule: rule193
  }, {
      start: 42932,
      length: 1,
      convRule: rule22
  }, {
      start: 42933,
      length: 1,
      convRule: rule23
  }, {
      start: 42934,
      length: 1,
      convRule: rule22
  }, {
      start: 42935,
      length: 1,
      convRule: rule23
  }, {
      start: 42936,
      length: 1,
      convRule: rule22
  }, {
      start: 42937,
      length: 1,
      convRule: rule23
  }, {
      start: 42938,
      length: 1,
      convRule: rule22
  }, {
      start: 42939,
      length: 1,
      convRule: rule23
  }, {
      start: 42940,
      length: 1,
      convRule: rule22
  }, {
      start: 42941,
      length: 1,
      convRule: rule23
  }, {
      start: 42942,
      length: 1,
      convRule: rule22
  }, {
      start: 42943,
      length: 1,
      convRule: rule23
  }, {
      start: 42946,
      length: 1,
      convRule: rule22
  }, {
      start: 42947,
      length: 1,
      convRule: rule23
  }, {
      start: 42948,
      length: 1,
      convRule: rule194
  }, {
      start: 42949,
      length: 1,
      convRule: rule195
  }, {
      start: 42950,
      length: 1,
      convRule: rule196
  }, {
      start: 42951,
      length: 1,
      convRule: rule22
  }, {
      start: 42952,
      length: 1,
      convRule: rule23
  }, {
      start: 42953,
      length: 1,
      convRule: rule22
  }, {
      start: 42954,
      length: 1,
      convRule: rule23
  }, {
      start: 42997,
      length: 1,
      convRule: rule22
  }, {
      start: 42998,
      length: 1,
      convRule: rule23
  }, {
      start: 43859,
      length: 1,
      convRule: rule197
  }, {
      start: 43888,
      length: 80,
      convRule: rule198
  }, {
      start: 65313,
      length: 26,
      convRule: rule9
  }, {
      start: 65345,
      length: 26,
      convRule: rule12
  }, {
      start: 66560,
      length: 40,
      convRule: rule201
  }, {
      start: 66600,
      length: 40,
      convRule: rule202
  }, {
      start: 66736,
      length: 36,
      convRule: rule201
  }, {
      start: 66776,
      length: 36,
      convRule: rule202
  }, {
      start: 68736,
      length: 51,
      convRule: rule97
  }, {
      start: 68800,
      length: 51,
      convRule: rule102
  }, {
      start: 71840,
      length: 32,
      convRule: rule9
  }, {
      start: 71872,
      length: 32,
      convRule: rule12
  }, {
      start: 93760,
      length: 32,
      convRule: rule9
  }, {
      start: 93792,
      length: 32,
      convRule: rule12
  }, {
      start: 125184,
      length: 34,
      convRule: rule203
  }, {
      start: 125218,
      length: 34,
      convRule: rule204
  } ];
  var bsearch = function (a) {
      return function (array) {
          return function (size) {
              return function (compare) {
                  var go = function ($copy_i) {
                      return function ($copy_k) {
                          var $tco_var_i = $copy_i;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(i, k) {
                              if (i > k || i >= Data_Array.length(array)) {
                                  $tco_done = true;
                                  return Data_Maybe.Nothing.value;
                              };
                              if (Data_Boolean.otherwise) {
                                  var j = Data_Int.floor(Data_Int.toNumber(i + k | 0) / 2.0);
                                  var v = compare(a)(array[j]);
                                  if (v instanceof Data_Ordering.EQ) {
                                      $tco_done = true;
                                      return new Data_Maybe.Just(array[j]);
                                  };
                                  if (v instanceof Data_Ordering.GT) {
                                      $tco_var_i = j + 1 | 0;
                                      $copy_k = k;
                                      return;
                                  };
                                  $tco_var_i = i;
                                  $copy_k = j - 1 | 0;
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.CodePoint.Unicode.Internal (line 5611, column 5 - line 5617, column 49): " + [ i.constructor.name, k.constructor.name ]);
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_i, $copy_k);
                          };
                          return $tco_result;
                      };
                  };
                  return go(0)(size);
              };
          };
      };
  };
  var blkCmp = function (v) {
      return function (v1) {
          if (v.start >= v1.start && v.start < (v1.start + v1.length | 0)) {
              return Data_Ordering.EQ.value;
          };
          if (v.start > v1.start) {
              return Data_Ordering.GT.value;
          };
          if (Data_Boolean.otherwise) {
              return Data_Ordering.LT.value;
          };
          throw new Error("Failed pattern match at Data.CodePoint.Unicode.Internal (line 5588, column 1 - line 5588, column 45): " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var getRule = function (blocks) {
      return function (unichar) {
          return function (size) {
              var key = {
                  start: unichar,
                  length: 1,
                  convRule: nullrule
              };
              var maybeCharBlock = bsearch(key)(blocks)(size)(blkCmp);
              if (maybeCharBlock instanceof Data_Maybe.Nothing) {
                  return Data_Maybe.Nothing.value;
              };
              if (maybeCharBlock instanceof Data_Maybe.Just) {
                  return new Data_Maybe.Just(maybeCharBlock.value0.convRule);
              };
              throw new Error("Failed pattern match at Data.CodePoint.Unicode.Internal (line 5601, column 8 - line 5603, column 62): " + [ maybeCharBlock.constructor.name ]);
          };
      };
  };
  var caseConv = function (f) {
      return function ($$char) {
          var maybeConversionRule = getRule(convchars)($$char)(numConvBlocks);
          if (maybeConversionRule instanceof Data_Maybe.Nothing) {
              return $$char;
          };
          if (maybeConversionRule instanceof Data_Maybe.Just) {
              return $$char + f(maybeConversionRule.value0) | 0;
          };
          throw new Error("Failed pattern match at Data.CodePoint.Unicode.Internal (line 5678, column 8 - line 5680, column 55): " + [ maybeConversionRule.constructor.name ]);
      };
  };
  var uTowlower = caseConv(function (v) {
      return v.lowdist;
  });
  var uTowtitle = caseConv(function (v) {
      return v.titledist;
  });
  exports["bsearch"] = bsearch;
  exports["uTowlower"] = uTowlower;
  exports["uTowtitle"] = uTowtitle;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.CodePoint.Unicode.Internal.Casing"] = $PS["Data.CodePoint.Unicode.Internal.Casing"] || {};
  var exports = $PS["Data.CodePoint.Unicode.Internal.Casing"];
  var Data_Array = $PS["Data.Array"];
  var Data_CodePoint_Unicode_Internal = $PS["Data.CodePoint.Unicode.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];                
  var zeroRec = function (code) {
      return {
          code: code,
          lower: [  ],
          title: [  ],
          upper: [  ],
          fold: 0,
          foldFull: [  ]
      };
  };
  var rules = [ {
      code: 65,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 97,
      foldFull: [ 97 ]
  }, {
      code: 66,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 98,
      foldFull: [ 98 ]
  }, {
      code: 67,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 99,
      foldFull: [ 99 ]
  }, {
      code: 68,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 100,
      foldFull: [ 100 ]
  }, {
      code: 69,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 101,
      foldFull: [ 101 ]
  }, {
      code: 70,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 102,
      foldFull: [ 102 ]
  }, {
      code: 71,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 103,
      foldFull: [ 103 ]
  }, {
      code: 72,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 104,
      foldFull: [ 104 ]
  }, {
      code: 73,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 105,
      foldFull: [ 105 ]
  }, {
      code: 74,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 106,
      foldFull: [ 106 ]
  }, {
      code: 75,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 107,
      foldFull: [ 107 ]
  }, {
      code: 76,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 108,
      foldFull: [ 108 ]
  }, {
      code: 77,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 109,
      foldFull: [ 109 ]
  }, {
      code: 78,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 110,
      foldFull: [ 110 ]
  }, {
      code: 79,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 111,
      foldFull: [ 111 ]
  }, {
      code: 80,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 112,
      foldFull: [ 112 ]
  }, {
      code: 81,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 113,
      foldFull: [ 113 ]
  }, {
      code: 82,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 114,
      foldFull: [ 114 ]
  }, {
      code: 83,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 115,
      foldFull: [ 115 ]
  }, {
      code: 84,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 116,
      foldFull: [ 116 ]
  }, {
      code: 85,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 117,
      foldFull: [ 117 ]
  }, {
      code: 86,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 118,
      foldFull: [ 118 ]
  }, {
      code: 87,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 119,
      foldFull: [ 119 ]
  }, {
      code: 88,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 120,
      foldFull: [ 120 ]
  }, {
      code: 89,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 121,
      foldFull: [ 121 ]
  }, {
      code: 90,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 122,
      foldFull: [ 122 ]
  }, {
      code: 181,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 956,
      foldFull: [ 956 ]
  }, {
      code: 192,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 224,
      foldFull: [ 224 ]
  }, {
      code: 193,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 225,
      foldFull: [ 225 ]
  }, {
      code: 194,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 226,
      foldFull: [ 226 ]
  }, {
      code: 195,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 227,
      foldFull: [ 227 ]
  }, {
      code: 196,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 228,
      foldFull: [ 228 ]
  }, {
      code: 197,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 229,
      foldFull: [ 229 ]
  }, {
      code: 198,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 230,
      foldFull: [ 230 ]
  }, {
      code: 199,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 231,
      foldFull: [ 231 ]
  }, {
      code: 200,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 232,
      foldFull: [ 232 ]
  }, {
      code: 201,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 233,
      foldFull: [ 233 ]
  }, {
      code: 202,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 234,
      foldFull: [ 234 ]
  }, {
      code: 203,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 235,
      foldFull: [ 235 ]
  }, {
      code: 204,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 236,
      foldFull: [ 236 ]
  }, {
      code: 205,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 237,
      foldFull: [ 237 ]
  }, {
      code: 206,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 238,
      foldFull: [ 238 ]
  }, {
      code: 207,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 239,
      foldFull: [ 239 ]
  }, {
      code: 208,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 240,
      foldFull: [ 240 ]
  }, {
      code: 209,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 241,
      foldFull: [ 241 ]
  }, {
      code: 210,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 242,
      foldFull: [ 242 ]
  }, {
      code: 211,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 243,
      foldFull: [ 243 ]
  }, {
      code: 212,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 244,
      foldFull: [ 244 ]
  }, {
      code: 213,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 245,
      foldFull: [ 245 ]
  }, {
      code: 214,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 246,
      foldFull: [ 246 ]
  }, {
      code: 216,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 248,
      foldFull: [ 248 ]
  }, {
      code: 217,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 249,
      foldFull: [ 249 ]
  }, {
      code: 218,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 250,
      foldFull: [ 250 ]
  }, {
      code: 219,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 251,
      foldFull: [ 251 ]
  }, {
      code: 220,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 252,
      foldFull: [ 252 ]
  }, {
      code: 221,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 253,
      foldFull: [ 253 ]
  }, {
      code: 222,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 254,
      foldFull: [ 254 ]
  }, {
      code: 223,
      lower: [ 223 ],
      title: [ 83, 115 ],
      upper: [ 83, 83 ],
      fold: 0,
      foldFull: [ 115, 115 ]
  }, {
      code: 223,
      lower: [ 223 ],
      title: [ 83, 115 ],
      upper: [ 83, 83 ],
      fold: 0,
      foldFull: [ 115, 115 ]
  }, {
      code: 256,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 257,
      foldFull: [ 257 ]
  }, {
      code: 258,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 259,
      foldFull: [ 259 ]
  }, {
      code: 260,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 261,
      foldFull: [ 261 ]
  }, {
      code: 262,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 263,
      foldFull: [ 263 ]
  }, {
      code: 264,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 265,
      foldFull: [ 265 ]
  }, {
      code: 266,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 267,
      foldFull: [ 267 ]
  }, {
      code: 268,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 269,
      foldFull: [ 269 ]
  }, {
      code: 270,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 271,
      foldFull: [ 271 ]
  }, {
      code: 272,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 273,
      foldFull: [ 273 ]
  }, {
      code: 274,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 275,
      foldFull: [ 275 ]
  }, {
      code: 276,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 277,
      foldFull: [ 277 ]
  }, {
      code: 278,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 279,
      foldFull: [ 279 ]
  }, {
      code: 280,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 281,
      foldFull: [ 281 ]
  }, {
      code: 282,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 283,
      foldFull: [ 283 ]
  }, {
      code: 284,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 285,
      foldFull: [ 285 ]
  }, {
      code: 286,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 287,
      foldFull: [ 287 ]
  }, {
      code: 288,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 289,
      foldFull: [ 289 ]
  }, {
      code: 290,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 291,
      foldFull: [ 291 ]
  }, {
      code: 292,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 293,
      foldFull: [ 293 ]
  }, {
      code: 294,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 295,
      foldFull: [ 295 ]
  }, {
      code: 296,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 297,
      foldFull: [ 297 ]
  }, {
      code: 298,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 299,
      foldFull: [ 299 ]
  }, {
      code: 300,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 301,
      foldFull: [ 301 ]
  }, {
      code: 302,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 303,
      foldFull: [ 303 ]
  }, {
      code: 304,
      lower: [ 105, 775 ],
      title: [ 304 ],
      upper: [ 304 ],
      fold: 0,
      foldFull: [ 105, 775 ]
  }, {
      code: 304,
      lower: [ 105, 775 ],
      title: [ 304 ],
      upper: [ 304 ],
      fold: 0,
      foldFull: [ 105, 775 ]
  }, {
      code: 306,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 307,
      foldFull: [ 307 ]
  }, {
      code: 308,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 309,
      foldFull: [ 309 ]
  }, {
      code: 310,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 311,
      foldFull: [ 311 ]
  }, {
      code: 313,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 314,
      foldFull: [ 314 ]
  }, {
      code: 315,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 316,
      foldFull: [ 316 ]
  }, {
      code: 317,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 318,
      foldFull: [ 318 ]
  }, {
      code: 319,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 320,
      foldFull: [ 320 ]
  }, {
      code: 321,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 322,
      foldFull: [ 322 ]
  }, {
      code: 323,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 324,
      foldFull: [ 324 ]
  }, {
      code: 325,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 326,
      foldFull: [ 326 ]
  }, {
      code: 327,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 328,
      foldFull: [ 328 ]
  }, {
      code: 329,
      lower: [ 329 ],
      title: [ 700, 78 ],
      upper: [ 700, 78 ],
      fold: 0,
      foldFull: [ 700, 110 ]
  }, {
      code: 329,
      lower: [ 329 ],
      title: [ 700, 78 ],
      upper: [ 700, 78 ],
      fold: 0,
      foldFull: [ 700, 110 ]
  }, {
      code: 330,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 331,
      foldFull: [ 331 ]
  }, {
      code: 332,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 333,
      foldFull: [ 333 ]
  }, {
      code: 334,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 335,
      foldFull: [ 335 ]
  }, {
      code: 336,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 337,
      foldFull: [ 337 ]
  }, {
      code: 338,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 339,
      foldFull: [ 339 ]
  }, {
      code: 340,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 341,
      foldFull: [ 341 ]
  }, {
      code: 342,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 343,
      foldFull: [ 343 ]
  }, {
      code: 344,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 345,
      foldFull: [ 345 ]
  }, {
      code: 346,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 347,
      foldFull: [ 347 ]
  }, {
      code: 348,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 349,
      foldFull: [ 349 ]
  }, {
      code: 350,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 351,
      foldFull: [ 351 ]
  }, {
      code: 352,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 353,
      foldFull: [ 353 ]
  }, {
      code: 354,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 355,
      foldFull: [ 355 ]
  }, {
      code: 356,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 357,
      foldFull: [ 357 ]
  }, {
      code: 358,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 359,
      foldFull: [ 359 ]
  }, {
      code: 360,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 361,
      foldFull: [ 361 ]
  }, {
      code: 362,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 363,
      foldFull: [ 363 ]
  }, {
      code: 364,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 365,
      foldFull: [ 365 ]
  }, {
      code: 366,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 367,
      foldFull: [ 367 ]
  }, {
      code: 368,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 369,
      foldFull: [ 369 ]
  }, {
      code: 370,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 371,
      foldFull: [ 371 ]
  }, {
      code: 372,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 373,
      foldFull: [ 373 ]
  }, {
      code: 374,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 375,
      foldFull: [ 375 ]
  }, {
      code: 376,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 255,
      foldFull: [ 255 ]
  }, {
      code: 377,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 378,
      foldFull: [ 378 ]
  }, {
      code: 379,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 380,
      foldFull: [ 380 ]
  }, {
      code: 381,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 382,
      foldFull: [ 382 ]
  }, {
      code: 383,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 115,
      foldFull: [ 115 ]
  }, {
      code: 385,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 595,
      foldFull: [ 595 ]
  }, {
      code: 386,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 387,
      foldFull: [ 387 ]
  }, {
      code: 388,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 389,
      foldFull: [ 389 ]
  }, {
      code: 390,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 596,
      foldFull: [ 596 ]
  }, {
      code: 391,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 392,
      foldFull: [ 392 ]
  }, {
      code: 393,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 598,
      foldFull: [ 598 ]
  }, {
      code: 394,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 599,
      foldFull: [ 599 ]
  }, {
      code: 395,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 396,
      foldFull: [ 396 ]
  }, {
      code: 398,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 477,
      foldFull: [ 477 ]
  }, {
      code: 399,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 601,
      foldFull: [ 601 ]
  }, {
      code: 400,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 603,
      foldFull: [ 603 ]
  }, {
      code: 401,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 402,
      foldFull: [ 402 ]
  }, {
      code: 403,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 608,
      foldFull: [ 608 ]
  }, {
      code: 404,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 611,
      foldFull: [ 611 ]
  }, {
      code: 406,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 617,
      foldFull: [ 617 ]
  }, {
      code: 407,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 616,
      foldFull: [ 616 ]
  }, {
      code: 408,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 409,
      foldFull: [ 409 ]
  }, {
      code: 412,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 623,
      foldFull: [ 623 ]
  }, {
      code: 413,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 626,
      foldFull: [ 626 ]
  }, {
      code: 415,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 629,
      foldFull: [ 629 ]
  }, {
      code: 416,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 417,
      foldFull: [ 417 ]
  }, {
      code: 418,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 419,
      foldFull: [ 419 ]
  }, {
      code: 420,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 421,
      foldFull: [ 421 ]
  }, {
      code: 422,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 640,
      foldFull: [ 640 ]
  }, {
      code: 423,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 424,
      foldFull: [ 424 ]
  }, {
      code: 425,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 643,
      foldFull: [ 643 ]
  }, {
      code: 428,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 429,
      foldFull: [ 429 ]
  }, {
      code: 430,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 648,
      foldFull: [ 648 ]
  }, {
      code: 431,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 432,
      foldFull: [ 432 ]
  }, {
      code: 433,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 650,
      foldFull: [ 650 ]
  }, {
      code: 434,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 651,
      foldFull: [ 651 ]
  }, {
      code: 435,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 436,
      foldFull: [ 436 ]
  }, {
      code: 437,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 438,
      foldFull: [ 438 ]
  }, {
      code: 439,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 658,
      foldFull: [ 658 ]
  }, {
      code: 440,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 441,
      foldFull: [ 441 ]
  }, {
      code: 444,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 445,
      foldFull: [ 445 ]
  }, {
      code: 452,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 454,
      foldFull: [ 454 ]
  }, {
      code: 453,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 454,
      foldFull: [ 454 ]
  }, {
      code: 455,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 457,
      foldFull: [ 457 ]
  }, {
      code: 456,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 457,
      foldFull: [ 457 ]
  }, {
      code: 458,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 460,
      foldFull: [ 460 ]
  }, {
      code: 459,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 460,
      foldFull: [ 460 ]
  }, {
      code: 461,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 462,
      foldFull: [ 462 ]
  }, {
      code: 463,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 464,
      foldFull: [ 464 ]
  }, {
      code: 465,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 466,
      foldFull: [ 466 ]
  }, {
      code: 467,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 468,
      foldFull: [ 468 ]
  }, {
      code: 469,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 470,
      foldFull: [ 470 ]
  }, {
      code: 471,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 472,
      foldFull: [ 472 ]
  }, {
      code: 473,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 474,
      foldFull: [ 474 ]
  }, {
      code: 475,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 476,
      foldFull: [ 476 ]
  }, {
      code: 478,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 479,
      foldFull: [ 479 ]
  }, {
      code: 480,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 481,
      foldFull: [ 481 ]
  }, {
      code: 482,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 483,
      foldFull: [ 483 ]
  }, {
      code: 484,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 485,
      foldFull: [ 485 ]
  }, {
      code: 486,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 487,
      foldFull: [ 487 ]
  }, {
      code: 488,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 489,
      foldFull: [ 489 ]
  }, {
      code: 490,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 491,
      foldFull: [ 491 ]
  }, {
      code: 492,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 493,
      foldFull: [ 493 ]
  }, {
      code: 494,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 495,
      foldFull: [ 495 ]
  }, {
      code: 496,
      lower: [ 496 ],
      title: [ 74, 780 ],
      upper: [ 74, 780 ],
      fold: 0,
      foldFull: [ 106, 780 ]
  }, {
      code: 496,
      lower: [ 496 ],
      title: [ 74, 780 ],
      upper: [ 74, 780 ],
      fold: 0,
      foldFull: [ 106, 780 ]
  }, {
      code: 497,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 499,
      foldFull: [ 499 ]
  }, {
      code: 498,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 499,
      foldFull: [ 499 ]
  }, {
      code: 500,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 501,
      foldFull: [ 501 ]
  }, {
      code: 502,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 405,
      foldFull: [ 405 ]
  }, {
      code: 503,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 447,
      foldFull: [ 447 ]
  }, {
      code: 504,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 505,
      foldFull: [ 505 ]
  }, {
      code: 506,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 507,
      foldFull: [ 507 ]
  }, {
      code: 508,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 509,
      foldFull: [ 509 ]
  }, {
      code: 510,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 511,
      foldFull: [ 511 ]
  }, {
      code: 512,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 513,
      foldFull: [ 513 ]
  }, {
      code: 514,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 515,
      foldFull: [ 515 ]
  }, {
      code: 516,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 517,
      foldFull: [ 517 ]
  }, {
      code: 518,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 519,
      foldFull: [ 519 ]
  }, {
      code: 520,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 521,
      foldFull: [ 521 ]
  }, {
      code: 522,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 523,
      foldFull: [ 523 ]
  }, {
      code: 524,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 525,
      foldFull: [ 525 ]
  }, {
      code: 526,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 527,
      foldFull: [ 527 ]
  }, {
      code: 528,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 529,
      foldFull: [ 529 ]
  }, {
      code: 530,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 531,
      foldFull: [ 531 ]
  }, {
      code: 532,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 533,
      foldFull: [ 533 ]
  }, {
      code: 534,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 535,
      foldFull: [ 535 ]
  }, {
      code: 536,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 537,
      foldFull: [ 537 ]
  }, {
      code: 538,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 539,
      foldFull: [ 539 ]
  }, {
      code: 540,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 541,
      foldFull: [ 541 ]
  }, {
      code: 542,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 543,
      foldFull: [ 543 ]
  }, {
      code: 544,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 414,
      foldFull: [ 414 ]
  }, {
      code: 546,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 547,
      foldFull: [ 547 ]
  }, {
      code: 548,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 549,
      foldFull: [ 549 ]
  }, {
      code: 550,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 551,
      foldFull: [ 551 ]
  }, {
      code: 552,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 553,
      foldFull: [ 553 ]
  }, {
      code: 554,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 555,
      foldFull: [ 555 ]
  }, {
      code: 556,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 557,
      foldFull: [ 557 ]
  }, {
      code: 558,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 559,
      foldFull: [ 559 ]
  }, {
      code: 560,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 561,
      foldFull: [ 561 ]
  }, {
      code: 562,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 563,
      foldFull: [ 563 ]
  }, {
      code: 570,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11365,
      foldFull: [ 11365 ]
  }, {
      code: 571,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 572,
      foldFull: [ 572 ]
  }, {
      code: 573,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 410,
      foldFull: [ 410 ]
  }, {
      code: 574,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11366,
      foldFull: [ 11366 ]
  }, {
      code: 577,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 578,
      foldFull: [ 578 ]
  }, {
      code: 579,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 384,
      foldFull: [ 384 ]
  }, {
      code: 580,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 649,
      foldFull: [ 649 ]
  }, {
      code: 581,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 652,
      foldFull: [ 652 ]
  }, {
      code: 582,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 583,
      foldFull: [ 583 ]
  }, {
      code: 584,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 585,
      foldFull: [ 585 ]
  }, {
      code: 586,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 587,
      foldFull: [ 587 ]
  }, {
      code: 588,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 589,
      foldFull: [ 589 ]
  }, {
      code: 590,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 591,
      foldFull: [ 591 ]
  }, {
      code: 837,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 953,
      foldFull: [ 953 ]
  }, {
      code: 880,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 881,
      foldFull: [ 881 ]
  }, {
      code: 882,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 883,
      foldFull: [ 883 ]
  }, {
      code: 886,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 887,
      foldFull: [ 887 ]
  }, {
      code: 895,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1011,
      foldFull: [ 1011 ]
  }, {
      code: 902,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 940,
      foldFull: [ 940 ]
  }, {
      code: 904,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 941,
      foldFull: [ 941 ]
  }, {
      code: 905,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 942,
      foldFull: [ 942 ]
  }, {
      code: 906,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 943,
      foldFull: [ 943 ]
  }, {
      code: 908,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 972,
      foldFull: [ 972 ]
  }, {
      code: 910,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 973,
      foldFull: [ 973 ]
  }, {
      code: 911,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 974,
      foldFull: [ 974 ]
  }, {
      code: 912,
      lower: [ 912 ],
      title: [ 921, 776, 769 ],
      upper: [ 921, 776, 769 ],
      fold: 0,
      foldFull: [ 953, 776, 769 ]
  }, {
      code: 912,
      lower: [ 912 ],
      title: [ 921, 776, 769 ],
      upper: [ 921, 776, 769 ],
      fold: 0,
      foldFull: [ 953, 776, 769 ]
  }, {
      code: 913,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 945,
      foldFull: [ 945 ]
  }, {
      code: 914,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 946,
      foldFull: [ 946 ]
  }, {
      code: 915,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 947,
      foldFull: [ 947 ]
  }, {
      code: 916,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 948,
      foldFull: [ 948 ]
  }, {
      code: 917,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 949,
      foldFull: [ 949 ]
  }, {
      code: 918,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 950,
      foldFull: [ 950 ]
  }, {
      code: 919,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 951,
      foldFull: [ 951 ]
  }, {
      code: 920,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 952,
      foldFull: [ 952 ]
  }, {
      code: 921,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 953,
      foldFull: [ 953 ]
  }, {
      code: 922,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 954,
      foldFull: [ 954 ]
  }, {
      code: 923,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 955,
      foldFull: [ 955 ]
  }, {
      code: 924,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 956,
      foldFull: [ 956 ]
  }, {
      code: 925,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 957,
      foldFull: [ 957 ]
  }, {
      code: 926,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 958,
      foldFull: [ 958 ]
  }, {
      code: 927,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 959,
      foldFull: [ 959 ]
  }, {
      code: 928,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 960,
      foldFull: [ 960 ]
  }, {
      code: 929,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 961,
      foldFull: [ 961 ]
  }, {
      code: 931,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 963,
      foldFull: [ 963 ]
  }, {
      code: 932,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 964,
      foldFull: [ 964 ]
  }, {
      code: 933,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 965,
      foldFull: [ 965 ]
  }, {
      code: 934,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 966,
      foldFull: [ 966 ]
  }, {
      code: 935,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 967,
      foldFull: [ 967 ]
  }, {
      code: 936,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 968,
      foldFull: [ 968 ]
  }, {
      code: 937,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 969,
      foldFull: [ 969 ]
  }, {
      code: 938,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 970,
      foldFull: [ 970 ]
  }, {
      code: 939,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 971,
      foldFull: [ 971 ]
  }, {
      code: 944,
      lower: [ 944 ],
      title: [ 933, 776, 769 ],
      upper: [ 933, 776, 769 ],
      fold: 0,
      foldFull: [ 965, 776, 769 ]
  }, {
      code: 944,
      lower: [ 944 ],
      title: [ 933, 776, 769 ],
      upper: [ 933, 776, 769 ],
      fold: 0,
      foldFull: [ 965, 776, 769 ]
  }, {
      code: 962,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 963,
      foldFull: [ 963 ]
  }, {
      code: 975,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 983,
      foldFull: [ 983 ]
  }, {
      code: 976,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 946,
      foldFull: [ 946 ]
  }, {
      code: 977,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 952,
      foldFull: [ 952 ]
  }, {
      code: 981,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 966,
      foldFull: [ 966 ]
  }, {
      code: 982,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 960,
      foldFull: [ 960 ]
  }, {
      code: 984,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 985,
      foldFull: [ 985 ]
  }, {
      code: 986,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 987,
      foldFull: [ 987 ]
  }, {
      code: 988,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 989,
      foldFull: [ 989 ]
  }, {
      code: 990,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 991,
      foldFull: [ 991 ]
  }, {
      code: 992,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 993,
      foldFull: [ 993 ]
  }, {
      code: 994,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 995,
      foldFull: [ 995 ]
  }, {
      code: 996,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 997,
      foldFull: [ 997 ]
  }, {
      code: 998,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 999,
      foldFull: [ 999 ]
  }, {
      code: 1000,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1001,
      foldFull: [ 1001 ]
  }, {
      code: 1002,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1003,
      foldFull: [ 1003 ]
  }, {
      code: 1004,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1005,
      foldFull: [ 1005 ]
  }, {
      code: 1006,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1007,
      foldFull: [ 1007 ]
  }, {
      code: 1008,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 954,
      foldFull: [ 954 ]
  }, {
      code: 1009,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 961,
      foldFull: [ 961 ]
  }, {
      code: 1012,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 952,
      foldFull: [ 952 ]
  }, {
      code: 1013,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 949,
      foldFull: [ 949 ]
  }, {
      code: 1015,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1016,
      foldFull: [ 1016 ]
  }, {
      code: 1017,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1010,
      foldFull: [ 1010 ]
  }, {
      code: 1018,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1019,
      foldFull: [ 1019 ]
  }, {
      code: 1021,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 891,
      foldFull: [ 891 ]
  }, {
      code: 1022,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 892,
      foldFull: [ 892 ]
  }, {
      code: 1023,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 893,
      foldFull: [ 893 ]
  }, {
      code: 1024,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1104,
      foldFull: [ 1104 ]
  }, {
      code: 1025,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1105,
      foldFull: [ 1105 ]
  }, {
      code: 1026,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1106,
      foldFull: [ 1106 ]
  }, {
      code: 1027,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1107,
      foldFull: [ 1107 ]
  }, {
      code: 1028,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1108,
      foldFull: [ 1108 ]
  }, {
      code: 1029,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1109,
      foldFull: [ 1109 ]
  }, {
      code: 1030,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1110,
      foldFull: [ 1110 ]
  }, {
      code: 1031,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1111,
      foldFull: [ 1111 ]
  }, {
      code: 1032,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1112,
      foldFull: [ 1112 ]
  }, {
      code: 1033,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1113,
      foldFull: [ 1113 ]
  }, {
      code: 1034,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1114,
      foldFull: [ 1114 ]
  }, {
      code: 1035,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1115,
      foldFull: [ 1115 ]
  }, {
      code: 1036,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1116,
      foldFull: [ 1116 ]
  }, {
      code: 1037,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1117,
      foldFull: [ 1117 ]
  }, {
      code: 1038,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1118,
      foldFull: [ 1118 ]
  }, {
      code: 1039,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1119,
      foldFull: [ 1119 ]
  }, {
      code: 1040,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1072,
      foldFull: [ 1072 ]
  }, {
      code: 1041,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1073,
      foldFull: [ 1073 ]
  }, {
      code: 1042,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1074,
      foldFull: [ 1074 ]
  }, {
      code: 1043,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1075,
      foldFull: [ 1075 ]
  }, {
      code: 1044,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1076,
      foldFull: [ 1076 ]
  }, {
      code: 1045,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1077,
      foldFull: [ 1077 ]
  }, {
      code: 1046,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1078,
      foldFull: [ 1078 ]
  }, {
      code: 1047,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1079,
      foldFull: [ 1079 ]
  }, {
      code: 1048,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1080,
      foldFull: [ 1080 ]
  }, {
      code: 1049,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1081,
      foldFull: [ 1081 ]
  }, {
      code: 1050,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1082,
      foldFull: [ 1082 ]
  }, {
      code: 1051,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1083,
      foldFull: [ 1083 ]
  }, {
      code: 1052,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1084,
      foldFull: [ 1084 ]
  }, {
      code: 1053,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1085,
      foldFull: [ 1085 ]
  }, {
      code: 1054,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1086,
      foldFull: [ 1086 ]
  }, {
      code: 1055,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1087,
      foldFull: [ 1087 ]
  }, {
      code: 1056,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1088,
      foldFull: [ 1088 ]
  }, {
      code: 1057,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1089,
      foldFull: [ 1089 ]
  }, {
      code: 1058,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1090,
      foldFull: [ 1090 ]
  }, {
      code: 1059,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1091,
      foldFull: [ 1091 ]
  }, {
      code: 1060,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1092,
      foldFull: [ 1092 ]
  }, {
      code: 1061,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1093,
      foldFull: [ 1093 ]
  }, {
      code: 1062,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1094,
      foldFull: [ 1094 ]
  }, {
      code: 1063,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1095,
      foldFull: [ 1095 ]
  }, {
      code: 1064,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1096,
      foldFull: [ 1096 ]
  }, {
      code: 1065,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1097,
      foldFull: [ 1097 ]
  }, {
      code: 1066,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1098,
      foldFull: [ 1098 ]
  }, {
      code: 1067,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1099,
      foldFull: [ 1099 ]
  }, {
      code: 1068,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1100,
      foldFull: [ 1100 ]
  }, {
      code: 1069,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1101,
      foldFull: [ 1101 ]
  }, {
      code: 1070,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1102,
      foldFull: [ 1102 ]
  }, {
      code: 1071,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1103,
      foldFull: [ 1103 ]
  }, {
      code: 1120,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1121,
      foldFull: [ 1121 ]
  }, {
      code: 1122,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1123,
      foldFull: [ 1123 ]
  }, {
      code: 1124,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1125,
      foldFull: [ 1125 ]
  }, {
      code: 1126,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1127,
      foldFull: [ 1127 ]
  }, {
      code: 1128,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1129,
      foldFull: [ 1129 ]
  }, {
      code: 1130,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1131,
      foldFull: [ 1131 ]
  }, {
      code: 1132,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1133,
      foldFull: [ 1133 ]
  }, {
      code: 1134,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1135,
      foldFull: [ 1135 ]
  }, {
      code: 1136,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1137,
      foldFull: [ 1137 ]
  }, {
      code: 1138,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1139,
      foldFull: [ 1139 ]
  }, {
      code: 1140,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1141,
      foldFull: [ 1141 ]
  }, {
      code: 1142,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1143,
      foldFull: [ 1143 ]
  }, {
      code: 1144,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1145,
      foldFull: [ 1145 ]
  }, {
      code: 1146,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1147,
      foldFull: [ 1147 ]
  }, {
      code: 1148,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1149,
      foldFull: [ 1149 ]
  }, {
      code: 1150,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1151,
      foldFull: [ 1151 ]
  }, {
      code: 1152,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1153,
      foldFull: [ 1153 ]
  }, {
      code: 1162,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1163,
      foldFull: [ 1163 ]
  }, {
      code: 1164,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1165,
      foldFull: [ 1165 ]
  }, {
      code: 1166,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1167,
      foldFull: [ 1167 ]
  }, {
      code: 1168,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1169,
      foldFull: [ 1169 ]
  }, {
      code: 1170,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1171,
      foldFull: [ 1171 ]
  }, {
      code: 1172,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1173,
      foldFull: [ 1173 ]
  }, {
      code: 1174,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1175,
      foldFull: [ 1175 ]
  }, {
      code: 1176,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1177,
      foldFull: [ 1177 ]
  }, {
      code: 1178,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1179,
      foldFull: [ 1179 ]
  }, {
      code: 1180,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1181,
      foldFull: [ 1181 ]
  }, {
      code: 1182,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1183,
      foldFull: [ 1183 ]
  }, {
      code: 1184,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1185,
      foldFull: [ 1185 ]
  }, {
      code: 1186,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1187,
      foldFull: [ 1187 ]
  }, {
      code: 1188,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1189,
      foldFull: [ 1189 ]
  }, {
      code: 1190,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1191,
      foldFull: [ 1191 ]
  }, {
      code: 1192,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1193,
      foldFull: [ 1193 ]
  }, {
      code: 1194,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1195,
      foldFull: [ 1195 ]
  }, {
      code: 1196,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1197,
      foldFull: [ 1197 ]
  }, {
      code: 1198,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1199,
      foldFull: [ 1199 ]
  }, {
      code: 1200,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1201,
      foldFull: [ 1201 ]
  }, {
      code: 1202,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1203,
      foldFull: [ 1203 ]
  }, {
      code: 1204,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1205,
      foldFull: [ 1205 ]
  }, {
      code: 1206,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1207,
      foldFull: [ 1207 ]
  }, {
      code: 1208,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1209,
      foldFull: [ 1209 ]
  }, {
      code: 1210,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1211,
      foldFull: [ 1211 ]
  }, {
      code: 1212,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1213,
      foldFull: [ 1213 ]
  }, {
      code: 1214,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1215,
      foldFull: [ 1215 ]
  }, {
      code: 1216,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1231,
      foldFull: [ 1231 ]
  }, {
      code: 1217,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1218,
      foldFull: [ 1218 ]
  }, {
      code: 1219,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1220,
      foldFull: [ 1220 ]
  }, {
      code: 1221,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1222,
      foldFull: [ 1222 ]
  }, {
      code: 1223,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1224,
      foldFull: [ 1224 ]
  }, {
      code: 1225,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1226,
      foldFull: [ 1226 ]
  }, {
      code: 1227,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1228,
      foldFull: [ 1228 ]
  }, {
      code: 1229,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1230,
      foldFull: [ 1230 ]
  }, {
      code: 1232,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1233,
      foldFull: [ 1233 ]
  }, {
      code: 1234,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1235,
      foldFull: [ 1235 ]
  }, {
      code: 1236,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1237,
      foldFull: [ 1237 ]
  }, {
      code: 1238,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1239,
      foldFull: [ 1239 ]
  }, {
      code: 1240,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1241,
      foldFull: [ 1241 ]
  }, {
      code: 1242,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1243,
      foldFull: [ 1243 ]
  }, {
      code: 1244,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1245,
      foldFull: [ 1245 ]
  }, {
      code: 1246,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1247,
      foldFull: [ 1247 ]
  }, {
      code: 1248,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1249,
      foldFull: [ 1249 ]
  }, {
      code: 1250,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1251,
      foldFull: [ 1251 ]
  }, {
      code: 1252,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1253,
      foldFull: [ 1253 ]
  }, {
      code: 1254,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1255,
      foldFull: [ 1255 ]
  }, {
      code: 1256,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1257,
      foldFull: [ 1257 ]
  }, {
      code: 1258,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1259,
      foldFull: [ 1259 ]
  }, {
      code: 1260,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1261,
      foldFull: [ 1261 ]
  }, {
      code: 1262,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1263,
      foldFull: [ 1263 ]
  }, {
      code: 1264,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1265,
      foldFull: [ 1265 ]
  }, {
      code: 1266,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1267,
      foldFull: [ 1267 ]
  }, {
      code: 1268,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1269,
      foldFull: [ 1269 ]
  }, {
      code: 1270,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1271,
      foldFull: [ 1271 ]
  }, {
      code: 1272,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1273,
      foldFull: [ 1273 ]
  }, {
      code: 1274,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1275,
      foldFull: [ 1275 ]
  }, {
      code: 1276,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1277,
      foldFull: [ 1277 ]
  }, {
      code: 1278,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1279,
      foldFull: [ 1279 ]
  }, {
      code: 1280,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1281,
      foldFull: [ 1281 ]
  }, {
      code: 1282,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1283,
      foldFull: [ 1283 ]
  }, {
      code: 1284,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1285,
      foldFull: [ 1285 ]
  }, {
      code: 1286,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1287,
      foldFull: [ 1287 ]
  }, {
      code: 1288,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1289,
      foldFull: [ 1289 ]
  }, {
      code: 1290,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1291,
      foldFull: [ 1291 ]
  }, {
      code: 1292,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1293,
      foldFull: [ 1293 ]
  }, {
      code: 1294,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1295,
      foldFull: [ 1295 ]
  }, {
      code: 1296,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1297,
      foldFull: [ 1297 ]
  }, {
      code: 1298,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1299,
      foldFull: [ 1299 ]
  }, {
      code: 1300,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1301,
      foldFull: [ 1301 ]
  }, {
      code: 1302,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1303,
      foldFull: [ 1303 ]
  }, {
      code: 1304,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1305,
      foldFull: [ 1305 ]
  }, {
      code: 1306,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1307,
      foldFull: [ 1307 ]
  }, {
      code: 1308,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1309,
      foldFull: [ 1309 ]
  }, {
      code: 1310,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1311,
      foldFull: [ 1311 ]
  }, {
      code: 1312,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1313,
      foldFull: [ 1313 ]
  }, {
      code: 1314,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1315,
      foldFull: [ 1315 ]
  }, {
      code: 1316,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1317,
      foldFull: [ 1317 ]
  }, {
      code: 1318,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1319,
      foldFull: [ 1319 ]
  }, {
      code: 1320,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1321,
      foldFull: [ 1321 ]
  }, {
      code: 1322,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1323,
      foldFull: [ 1323 ]
  }, {
      code: 1324,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1325,
      foldFull: [ 1325 ]
  }, {
      code: 1326,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1327,
      foldFull: [ 1327 ]
  }, {
      code: 1329,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1377,
      foldFull: [ 1377 ]
  }, {
      code: 1330,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1378,
      foldFull: [ 1378 ]
  }, {
      code: 1331,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1379,
      foldFull: [ 1379 ]
  }, {
      code: 1332,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1380,
      foldFull: [ 1380 ]
  }, {
      code: 1333,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1381,
      foldFull: [ 1381 ]
  }, {
      code: 1334,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1382,
      foldFull: [ 1382 ]
  }, {
      code: 1335,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1383,
      foldFull: [ 1383 ]
  }, {
      code: 1336,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1384,
      foldFull: [ 1384 ]
  }, {
      code: 1337,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1385,
      foldFull: [ 1385 ]
  }, {
      code: 1338,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1386,
      foldFull: [ 1386 ]
  }, {
      code: 1339,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1387,
      foldFull: [ 1387 ]
  }, {
      code: 1340,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1388,
      foldFull: [ 1388 ]
  }, {
      code: 1341,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1389,
      foldFull: [ 1389 ]
  }, {
      code: 1342,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1390,
      foldFull: [ 1390 ]
  }, {
      code: 1343,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1391,
      foldFull: [ 1391 ]
  }, {
      code: 1344,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1392,
      foldFull: [ 1392 ]
  }, {
      code: 1345,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1393,
      foldFull: [ 1393 ]
  }, {
      code: 1346,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1394,
      foldFull: [ 1394 ]
  }, {
      code: 1347,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1395,
      foldFull: [ 1395 ]
  }, {
      code: 1348,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1396,
      foldFull: [ 1396 ]
  }, {
      code: 1349,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1397,
      foldFull: [ 1397 ]
  }, {
      code: 1350,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1398,
      foldFull: [ 1398 ]
  }, {
      code: 1351,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1399,
      foldFull: [ 1399 ]
  }, {
      code: 1352,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1400,
      foldFull: [ 1400 ]
  }, {
      code: 1353,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1401,
      foldFull: [ 1401 ]
  }, {
      code: 1354,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1402,
      foldFull: [ 1402 ]
  }, {
      code: 1355,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1403,
      foldFull: [ 1403 ]
  }, {
      code: 1356,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1404,
      foldFull: [ 1404 ]
  }, {
      code: 1357,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1405,
      foldFull: [ 1405 ]
  }, {
      code: 1358,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1406,
      foldFull: [ 1406 ]
  }, {
      code: 1359,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1407,
      foldFull: [ 1407 ]
  }, {
      code: 1360,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1408,
      foldFull: [ 1408 ]
  }, {
      code: 1361,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1409,
      foldFull: [ 1409 ]
  }, {
      code: 1362,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1410,
      foldFull: [ 1410 ]
  }, {
      code: 1363,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1411,
      foldFull: [ 1411 ]
  }, {
      code: 1364,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1412,
      foldFull: [ 1412 ]
  }, {
      code: 1365,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1413,
      foldFull: [ 1413 ]
  }, {
      code: 1366,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1414,
      foldFull: [ 1414 ]
  }, {
      code: 1415,
      lower: [ 1415 ],
      title: [ 1333, 1410 ],
      upper: [ 1333, 1362 ],
      fold: 0,
      foldFull: [ 1381, 1410 ]
  }, {
      code: 1415,
      lower: [ 1415 ],
      title: [ 1333, 1410 ],
      upper: [ 1333, 1362 ],
      fold: 0,
      foldFull: [ 1381, 1410 ]
  }, {
      code: 4256,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11520,
      foldFull: [ 11520 ]
  }, {
      code: 4257,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11521,
      foldFull: [ 11521 ]
  }, {
      code: 4258,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11522,
      foldFull: [ 11522 ]
  }, {
      code: 4259,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11523,
      foldFull: [ 11523 ]
  }, {
      code: 4260,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11524,
      foldFull: [ 11524 ]
  }, {
      code: 4261,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11525,
      foldFull: [ 11525 ]
  }, {
      code: 4262,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11526,
      foldFull: [ 11526 ]
  }, {
      code: 4263,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11527,
      foldFull: [ 11527 ]
  }, {
      code: 4264,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11528,
      foldFull: [ 11528 ]
  }, {
      code: 4265,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11529,
      foldFull: [ 11529 ]
  }, {
      code: 4266,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11530,
      foldFull: [ 11530 ]
  }, {
      code: 4267,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11531,
      foldFull: [ 11531 ]
  }, {
      code: 4268,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11532,
      foldFull: [ 11532 ]
  }, {
      code: 4269,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11533,
      foldFull: [ 11533 ]
  }, {
      code: 4270,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11534,
      foldFull: [ 11534 ]
  }, {
      code: 4271,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11535,
      foldFull: [ 11535 ]
  }, {
      code: 4272,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11536,
      foldFull: [ 11536 ]
  }, {
      code: 4273,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11537,
      foldFull: [ 11537 ]
  }, {
      code: 4274,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11538,
      foldFull: [ 11538 ]
  }, {
      code: 4275,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11539,
      foldFull: [ 11539 ]
  }, {
      code: 4276,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11540,
      foldFull: [ 11540 ]
  }, {
      code: 4277,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11541,
      foldFull: [ 11541 ]
  }, {
      code: 4278,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11542,
      foldFull: [ 11542 ]
  }, {
      code: 4279,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11543,
      foldFull: [ 11543 ]
  }, {
      code: 4280,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11544,
      foldFull: [ 11544 ]
  }, {
      code: 4281,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11545,
      foldFull: [ 11545 ]
  }, {
      code: 4282,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11546,
      foldFull: [ 11546 ]
  }, {
      code: 4283,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11547,
      foldFull: [ 11547 ]
  }, {
      code: 4284,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11548,
      foldFull: [ 11548 ]
  }, {
      code: 4285,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11549,
      foldFull: [ 11549 ]
  }, {
      code: 4286,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11550,
      foldFull: [ 11550 ]
  }, {
      code: 4287,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11551,
      foldFull: [ 11551 ]
  }, {
      code: 4288,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11552,
      foldFull: [ 11552 ]
  }, {
      code: 4289,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11553,
      foldFull: [ 11553 ]
  }, {
      code: 4290,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11554,
      foldFull: [ 11554 ]
  }, {
      code: 4291,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11555,
      foldFull: [ 11555 ]
  }, {
      code: 4292,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11556,
      foldFull: [ 11556 ]
  }, {
      code: 4293,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11557,
      foldFull: [ 11557 ]
  }, {
      code: 4295,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11559,
      foldFull: [ 11559 ]
  }, {
      code: 4301,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11565,
      foldFull: [ 11565 ]
  }, {
      code: 5112,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5104,
      foldFull: [ 5104 ]
  }, {
      code: 5113,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5105,
      foldFull: [ 5105 ]
  }, {
      code: 5114,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5106,
      foldFull: [ 5106 ]
  }, {
      code: 5115,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5107,
      foldFull: [ 5107 ]
  }, {
      code: 5116,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5108,
      foldFull: [ 5108 ]
  }, {
      code: 5117,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5109,
      foldFull: [ 5109 ]
  }, {
      code: 7296,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1074,
      foldFull: [ 1074 ]
  }, {
      code: 7297,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1076,
      foldFull: [ 1076 ]
  }, {
      code: 7298,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1086,
      foldFull: [ 1086 ]
  }, {
      code: 7299,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1089,
      foldFull: [ 1089 ]
  }, {
      code: 7300,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1090,
      foldFull: [ 1090 ]
  }, {
      code: 7301,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1090,
      foldFull: [ 1090 ]
  }, {
      code: 7302,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1098,
      foldFull: [ 1098 ]
  }, {
      code: 7303,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1123,
      foldFull: [ 1123 ]
  }, {
      code: 7304,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42571,
      foldFull: [ 42571 ]
  }, {
      code: 7312,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4304,
      foldFull: [ 4304 ]
  }, {
      code: 7313,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4305,
      foldFull: [ 4305 ]
  }, {
      code: 7314,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4306,
      foldFull: [ 4306 ]
  }, {
      code: 7315,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4307,
      foldFull: [ 4307 ]
  }, {
      code: 7316,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4308,
      foldFull: [ 4308 ]
  }, {
      code: 7317,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4309,
      foldFull: [ 4309 ]
  }, {
      code: 7318,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4310,
      foldFull: [ 4310 ]
  }, {
      code: 7319,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4311,
      foldFull: [ 4311 ]
  }, {
      code: 7320,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4312,
      foldFull: [ 4312 ]
  }, {
      code: 7321,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4313,
      foldFull: [ 4313 ]
  }, {
      code: 7322,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4314,
      foldFull: [ 4314 ]
  }, {
      code: 7323,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4315,
      foldFull: [ 4315 ]
  }, {
      code: 7324,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4316,
      foldFull: [ 4316 ]
  }, {
      code: 7325,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4317,
      foldFull: [ 4317 ]
  }, {
      code: 7326,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4318,
      foldFull: [ 4318 ]
  }, {
      code: 7327,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4319,
      foldFull: [ 4319 ]
  }, {
      code: 7328,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4320,
      foldFull: [ 4320 ]
  }, {
      code: 7329,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4321,
      foldFull: [ 4321 ]
  }, {
      code: 7330,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4322,
      foldFull: [ 4322 ]
  }, {
      code: 7331,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4323,
      foldFull: [ 4323 ]
  }, {
      code: 7332,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4324,
      foldFull: [ 4324 ]
  }, {
      code: 7333,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4325,
      foldFull: [ 4325 ]
  }, {
      code: 7334,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4326,
      foldFull: [ 4326 ]
  }, {
      code: 7335,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4327,
      foldFull: [ 4327 ]
  }, {
      code: 7336,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4328,
      foldFull: [ 4328 ]
  }, {
      code: 7337,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4329,
      foldFull: [ 4329 ]
  }, {
      code: 7338,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4330,
      foldFull: [ 4330 ]
  }, {
      code: 7339,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4331,
      foldFull: [ 4331 ]
  }, {
      code: 7340,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4332,
      foldFull: [ 4332 ]
  }, {
      code: 7341,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4333,
      foldFull: [ 4333 ]
  }, {
      code: 7342,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4334,
      foldFull: [ 4334 ]
  }, {
      code: 7343,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4335,
      foldFull: [ 4335 ]
  }, {
      code: 7344,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4336,
      foldFull: [ 4336 ]
  }, {
      code: 7345,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4337,
      foldFull: [ 4337 ]
  }, {
      code: 7346,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4338,
      foldFull: [ 4338 ]
  }, {
      code: 7347,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4339,
      foldFull: [ 4339 ]
  }, {
      code: 7348,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4340,
      foldFull: [ 4340 ]
  }, {
      code: 7349,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4341,
      foldFull: [ 4341 ]
  }, {
      code: 7350,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4342,
      foldFull: [ 4342 ]
  }, {
      code: 7351,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4343,
      foldFull: [ 4343 ]
  }, {
      code: 7352,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4344,
      foldFull: [ 4344 ]
  }, {
      code: 7353,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4345,
      foldFull: [ 4345 ]
  }, {
      code: 7354,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4346,
      foldFull: [ 4346 ]
  }, {
      code: 7357,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4349,
      foldFull: [ 4349 ]
  }, {
      code: 7358,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4350,
      foldFull: [ 4350 ]
  }, {
      code: 7359,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4351,
      foldFull: [ 4351 ]
  }, {
      code: 7680,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7681,
      foldFull: [ 7681 ]
  }, {
      code: 7682,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7683,
      foldFull: [ 7683 ]
  }, {
      code: 7684,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7685,
      foldFull: [ 7685 ]
  }, {
      code: 7686,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7687,
      foldFull: [ 7687 ]
  }, {
      code: 7688,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7689,
      foldFull: [ 7689 ]
  }, {
      code: 7690,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7691,
      foldFull: [ 7691 ]
  }, {
      code: 7692,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7693,
      foldFull: [ 7693 ]
  }, {
      code: 7694,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7695,
      foldFull: [ 7695 ]
  }, {
      code: 7696,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7697,
      foldFull: [ 7697 ]
  }, {
      code: 7698,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7699,
      foldFull: [ 7699 ]
  }, {
      code: 7700,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7701,
      foldFull: [ 7701 ]
  }, {
      code: 7702,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7703,
      foldFull: [ 7703 ]
  }, {
      code: 7704,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7705,
      foldFull: [ 7705 ]
  }, {
      code: 7706,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7707,
      foldFull: [ 7707 ]
  }, {
      code: 7708,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7709,
      foldFull: [ 7709 ]
  }, {
      code: 7710,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7711,
      foldFull: [ 7711 ]
  }, {
      code: 7712,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7713,
      foldFull: [ 7713 ]
  }, {
      code: 7714,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7715,
      foldFull: [ 7715 ]
  }, {
      code: 7716,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7717,
      foldFull: [ 7717 ]
  }, {
      code: 7718,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7719,
      foldFull: [ 7719 ]
  }, {
      code: 7720,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7721,
      foldFull: [ 7721 ]
  }, {
      code: 7722,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7723,
      foldFull: [ 7723 ]
  }, {
      code: 7724,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7725,
      foldFull: [ 7725 ]
  }, {
      code: 7726,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7727,
      foldFull: [ 7727 ]
  }, {
      code: 7728,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7729,
      foldFull: [ 7729 ]
  }, {
      code: 7730,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7731,
      foldFull: [ 7731 ]
  }, {
      code: 7732,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7733,
      foldFull: [ 7733 ]
  }, {
      code: 7734,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7735,
      foldFull: [ 7735 ]
  }, {
      code: 7736,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7737,
      foldFull: [ 7737 ]
  }, {
      code: 7738,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7739,
      foldFull: [ 7739 ]
  }, {
      code: 7740,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7741,
      foldFull: [ 7741 ]
  }, {
      code: 7742,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7743,
      foldFull: [ 7743 ]
  }, {
      code: 7744,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7745,
      foldFull: [ 7745 ]
  }, {
      code: 7746,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7747,
      foldFull: [ 7747 ]
  }, {
      code: 7748,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7749,
      foldFull: [ 7749 ]
  }, {
      code: 7750,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7751,
      foldFull: [ 7751 ]
  }, {
      code: 7752,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7753,
      foldFull: [ 7753 ]
  }, {
      code: 7754,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7755,
      foldFull: [ 7755 ]
  }, {
      code: 7756,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7757,
      foldFull: [ 7757 ]
  }, {
      code: 7758,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7759,
      foldFull: [ 7759 ]
  }, {
      code: 7760,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7761,
      foldFull: [ 7761 ]
  }, {
      code: 7762,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7763,
      foldFull: [ 7763 ]
  }, {
      code: 7764,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7765,
      foldFull: [ 7765 ]
  }, {
      code: 7766,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7767,
      foldFull: [ 7767 ]
  }, {
      code: 7768,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7769,
      foldFull: [ 7769 ]
  }, {
      code: 7770,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7771,
      foldFull: [ 7771 ]
  }, {
      code: 7772,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7773,
      foldFull: [ 7773 ]
  }, {
      code: 7774,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7775,
      foldFull: [ 7775 ]
  }, {
      code: 7776,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7777,
      foldFull: [ 7777 ]
  }, {
      code: 7778,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7779,
      foldFull: [ 7779 ]
  }, {
      code: 7780,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7781,
      foldFull: [ 7781 ]
  }, {
      code: 7782,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7783,
      foldFull: [ 7783 ]
  }, {
      code: 7784,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7785,
      foldFull: [ 7785 ]
  }, {
      code: 7786,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7787,
      foldFull: [ 7787 ]
  }, {
      code: 7788,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7789,
      foldFull: [ 7789 ]
  }, {
      code: 7790,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7791,
      foldFull: [ 7791 ]
  }, {
      code: 7792,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7793,
      foldFull: [ 7793 ]
  }, {
      code: 7794,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7795,
      foldFull: [ 7795 ]
  }, {
      code: 7796,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7797,
      foldFull: [ 7797 ]
  }, {
      code: 7798,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7799,
      foldFull: [ 7799 ]
  }, {
      code: 7800,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7801,
      foldFull: [ 7801 ]
  }, {
      code: 7802,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7803,
      foldFull: [ 7803 ]
  }, {
      code: 7804,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7805,
      foldFull: [ 7805 ]
  }, {
      code: 7806,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7807,
      foldFull: [ 7807 ]
  }, {
      code: 7808,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7809,
      foldFull: [ 7809 ]
  }, {
      code: 7810,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7811,
      foldFull: [ 7811 ]
  }, {
      code: 7812,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7813,
      foldFull: [ 7813 ]
  }, {
      code: 7814,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7815,
      foldFull: [ 7815 ]
  }, {
      code: 7816,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7817,
      foldFull: [ 7817 ]
  }, {
      code: 7818,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7819,
      foldFull: [ 7819 ]
  }, {
      code: 7820,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7821,
      foldFull: [ 7821 ]
  }, {
      code: 7822,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7823,
      foldFull: [ 7823 ]
  }, {
      code: 7824,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7825,
      foldFull: [ 7825 ]
  }, {
      code: 7826,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7827,
      foldFull: [ 7827 ]
  }, {
      code: 7828,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7829,
      foldFull: [ 7829 ]
  }, {
      code: 7830,
      lower: [ 7830 ],
      title: [ 72, 817 ],
      upper: [ 72, 817 ],
      fold: 0,
      foldFull: [ 104, 817 ]
  }, {
      code: 7830,
      lower: [ 7830 ],
      title: [ 72, 817 ],
      upper: [ 72, 817 ],
      fold: 0,
      foldFull: [ 104, 817 ]
  }, {
      code: 7831,
      lower: [ 7831 ],
      title: [ 84, 776 ],
      upper: [ 84, 776 ],
      fold: 0,
      foldFull: [ 116, 776 ]
  }, {
      code: 7831,
      lower: [ 7831 ],
      title: [ 84, 776 ],
      upper: [ 84, 776 ],
      fold: 0,
      foldFull: [ 116, 776 ]
  }, {
      code: 7832,
      lower: [ 7832 ],
      title: [ 87, 778 ],
      upper: [ 87, 778 ],
      fold: 0,
      foldFull: [ 119, 778 ]
  }, {
      code: 7832,
      lower: [ 7832 ],
      title: [ 87, 778 ],
      upper: [ 87, 778 ],
      fold: 0,
      foldFull: [ 119, 778 ]
  }, {
      code: 7833,
      lower: [ 7833 ],
      title: [ 89, 778 ],
      upper: [ 89, 778 ],
      fold: 0,
      foldFull: [ 121, 778 ]
  }, {
      code: 7833,
      lower: [ 7833 ],
      title: [ 89, 778 ],
      upper: [ 89, 778 ],
      fold: 0,
      foldFull: [ 121, 778 ]
  }, {
      code: 7834,
      lower: [ 7834 ],
      title: [ 65, 702 ],
      upper: [ 65, 702 ],
      fold: 0,
      foldFull: [ 97, 702 ]
  }, {
      code: 7834,
      lower: [ 7834 ],
      title: [ 65, 702 ],
      upper: [ 65, 702 ],
      fold: 0,
      foldFull: [ 97, 702 ]
  }, {
      code: 7835,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7777,
      foldFull: [ 7777 ]
  }, {
      code: 7838,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 223,
      foldFull: [ 115, 115 ]
  }, {
      code: 7840,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7841,
      foldFull: [ 7841 ]
  }, {
      code: 7842,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7843,
      foldFull: [ 7843 ]
  }, {
      code: 7844,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7845,
      foldFull: [ 7845 ]
  }, {
      code: 7846,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7847,
      foldFull: [ 7847 ]
  }, {
      code: 7848,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7849,
      foldFull: [ 7849 ]
  }, {
      code: 7850,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7851,
      foldFull: [ 7851 ]
  }, {
      code: 7852,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7853,
      foldFull: [ 7853 ]
  }, {
      code: 7854,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7855,
      foldFull: [ 7855 ]
  }, {
      code: 7856,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7857,
      foldFull: [ 7857 ]
  }, {
      code: 7858,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7859,
      foldFull: [ 7859 ]
  }, {
      code: 7860,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7861,
      foldFull: [ 7861 ]
  }, {
      code: 7862,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7863,
      foldFull: [ 7863 ]
  }, {
      code: 7864,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7865,
      foldFull: [ 7865 ]
  }, {
      code: 7866,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7867,
      foldFull: [ 7867 ]
  }, {
      code: 7868,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7869,
      foldFull: [ 7869 ]
  }, {
      code: 7870,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7871,
      foldFull: [ 7871 ]
  }, {
      code: 7872,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7873,
      foldFull: [ 7873 ]
  }, {
      code: 7874,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7875,
      foldFull: [ 7875 ]
  }, {
      code: 7876,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7877,
      foldFull: [ 7877 ]
  }, {
      code: 7878,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7879,
      foldFull: [ 7879 ]
  }, {
      code: 7880,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7881,
      foldFull: [ 7881 ]
  }, {
      code: 7882,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7883,
      foldFull: [ 7883 ]
  }, {
      code: 7884,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7885,
      foldFull: [ 7885 ]
  }, {
      code: 7886,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7887,
      foldFull: [ 7887 ]
  }, {
      code: 7888,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7889,
      foldFull: [ 7889 ]
  }, {
      code: 7890,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7891,
      foldFull: [ 7891 ]
  }, {
      code: 7892,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7893,
      foldFull: [ 7893 ]
  }, {
      code: 7894,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7895,
      foldFull: [ 7895 ]
  }, {
      code: 7896,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7897,
      foldFull: [ 7897 ]
  }, {
      code: 7898,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7899,
      foldFull: [ 7899 ]
  }, {
      code: 7900,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7901,
      foldFull: [ 7901 ]
  }, {
      code: 7902,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7903,
      foldFull: [ 7903 ]
  }, {
      code: 7904,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7905,
      foldFull: [ 7905 ]
  }, {
      code: 7906,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7907,
      foldFull: [ 7907 ]
  }, {
      code: 7908,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7909,
      foldFull: [ 7909 ]
  }, {
      code: 7910,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7911,
      foldFull: [ 7911 ]
  }, {
      code: 7912,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7913,
      foldFull: [ 7913 ]
  }, {
      code: 7914,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7915,
      foldFull: [ 7915 ]
  }, {
      code: 7916,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7917,
      foldFull: [ 7917 ]
  }, {
      code: 7918,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7919,
      foldFull: [ 7919 ]
  }, {
      code: 7920,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7921,
      foldFull: [ 7921 ]
  }, {
      code: 7922,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7923,
      foldFull: [ 7923 ]
  }, {
      code: 7924,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7925,
      foldFull: [ 7925 ]
  }, {
      code: 7926,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7927,
      foldFull: [ 7927 ]
  }, {
      code: 7928,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7929,
      foldFull: [ 7929 ]
  }, {
      code: 7930,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7931,
      foldFull: [ 7931 ]
  }, {
      code: 7932,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7933,
      foldFull: [ 7933 ]
  }, {
      code: 7934,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7935,
      foldFull: [ 7935 ]
  }, {
      code: 7944,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7936,
      foldFull: [ 7936 ]
  }, {
      code: 7945,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7937,
      foldFull: [ 7937 ]
  }, {
      code: 7946,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7938,
      foldFull: [ 7938 ]
  }, {
      code: 7947,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7939,
      foldFull: [ 7939 ]
  }, {
      code: 7948,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7940,
      foldFull: [ 7940 ]
  }, {
      code: 7949,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7941,
      foldFull: [ 7941 ]
  }, {
      code: 7950,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7942,
      foldFull: [ 7942 ]
  }, {
      code: 7951,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7943,
      foldFull: [ 7943 ]
  }, {
      code: 7960,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7952,
      foldFull: [ 7952 ]
  }, {
      code: 7961,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7953,
      foldFull: [ 7953 ]
  }, {
      code: 7962,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7954,
      foldFull: [ 7954 ]
  }, {
      code: 7963,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7955,
      foldFull: [ 7955 ]
  }, {
      code: 7964,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7956,
      foldFull: [ 7956 ]
  }, {
      code: 7965,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7957,
      foldFull: [ 7957 ]
  }, {
      code: 7976,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7968,
      foldFull: [ 7968 ]
  }, {
      code: 7977,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7969,
      foldFull: [ 7969 ]
  }, {
      code: 7978,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7970,
      foldFull: [ 7970 ]
  }, {
      code: 7979,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7971,
      foldFull: [ 7971 ]
  }, {
      code: 7980,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7972,
      foldFull: [ 7972 ]
  }, {
      code: 7981,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7973,
      foldFull: [ 7973 ]
  }, {
      code: 7982,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7974,
      foldFull: [ 7974 ]
  }, {
      code: 7983,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7975,
      foldFull: [ 7975 ]
  }, {
      code: 7992,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7984,
      foldFull: [ 7984 ]
  }, {
      code: 7993,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7985,
      foldFull: [ 7985 ]
  }, {
      code: 7994,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7986,
      foldFull: [ 7986 ]
  }, {
      code: 7995,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7987,
      foldFull: [ 7987 ]
  }, {
      code: 7996,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7988,
      foldFull: [ 7988 ]
  }, {
      code: 7997,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7989,
      foldFull: [ 7989 ]
  }, {
      code: 7998,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7990,
      foldFull: [ 7990 ]
  }, {
      code: 7999,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7991,
      foldFull: [ 7991 ]
  }, {
      code: 8008,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8000,
      foldFull: [ 8000 ]
  }, {
      code: 8009,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8001,
      foldFull: [ 8001 ]
  }, {
      code: 8010,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8002,
      foldFull: [ 8002 ]
  }, {
      code: 8011,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8003,
      foldFull: [ 8003 ]
  }, {
      code: 8012,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8004,
      foldFull: [ 8004 ]
  }, {
      code: 8013,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8005,
      foldFull: [ 8005 ]
  }, {
      code: 8016,
      lower: [ 8016 ],
      title: [ 933, 787 ],
      upper: [ 933, 787 ],
      fold: 0,
      foldFull: [ 965, 787 ]
  }, {
      code: 8016,
      lower: [ 8016 ],
      title: [ 933, 787 ],
      upper: [ 933, 787 ],
      fold: 0,
      foldFull: [ 965, 787 ]
  }, {
      code: 8018,
      lower: [ 8018 ],
      title: [ 933, 787, 768 ],
      upper: [ 933, 787, 768 ],
      fold: 0,
      foldFull: [ 965, 787, 768 ]
  }, {
      code: 8018,
      lower: [ 8018 ],
      title: [ 933, 787, 768 ],
      upper: [ 933, 787, 768 ],
      fold: 0,
      foldFull: [ 965, 787, 768 ]
  }, {
      code: 8020,
      lower: [ 8020 ],
      title: [ 933, 787, 769 ],
      upper: [ 933, 787, 769 ],
      fold: 0,
      foldFull: [ 965, 787, 769 ]
  }, {
      code: 8020,
      lower: [ 8020 ],
      title: [ 933, 787, 769 ],
      upper: [ 933, 787, 769 ],
      fold: 0,
      foldFull: [ 965, 787, 769 ]
  }, {
      code: 8022,
      lower: [ 8022 ],
      title: [ 933, 787, 834 ],
      upper: [ 933, 787, 834 ],
      fold: 0,
      foldFull: [ 965, 787, 834 ]
  }, {
      code: 8022,
      lower: [ 8022 ],
      title: [ 933, 787, 834 ],
      upper: [ 933, 787, 834 ],
      fold: 0,
      foldFull: [ 965, 787, 834 ]
  }, {
      code: 8025,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8017,
      foldFull: [ 8017 ]
  }, {
      code: 8027,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8019,
      foldFull: [ 8019 ]
  }, {
      code: 8029,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8021,
      foldFull: [ 8021 ]
  }, {
      code: 8031,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8023,
      foldFull: [ 8023 ]
  }, {
      code: 8040,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8032,
      foldFull: [ 8032 ]
  }, {
      code: 8041,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8033,
      foldFull: [ 8033 ]
  }, {
      code: 8042,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8034,
      foldFull: [ 8034 ]
  }, {
      code: 8043,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8035,
      foldFull: [ 8035 ]
  }, {
      code: 8044,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8036,
      foldFull: [ 8036 ]
  }, {
      code: 8045,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8037,
      foldFull: [ 8037 ]
  }, {
      code: 8046,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8038,
      foldFull: [ 8038 ]
  }, {
      code: 8047,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8039,
      foldFull: [ 8039 ]
  }, {
      code: 8064,
      lower: [ 8064 ],
      title: [ 8072 ],
      upper: [ 7944, 921 ],
      fold: 0,
      foldFull: [ 7936, 953 ]
  }, {
      code: 8064,
      lower: [ 8064 ],
      title: [ 8072 ],
      upper: [ 7944, 921 ],
      fold: 0,
      foldFull: [ 7936, 953 ]
  }, {
      code: 8065,
      lower: [ 8065 ],
      title: [ 8073 ],
      upper: [ 7945, 921 ],
      fold: 0,
      foldFull: [ 7937, 953 ]
  }, {
      code: 8065,
      lower: [ 8065 ],
      title: [ 8073 ],
      upper: [ 7945, 921 ],
      fold: 0,
      foldFull: [ 7937, 953 ]
  }, {
      code: 8066,
      lower: [ 8066 ],
      title: [ 8074 ],
      upper: [ 7946, 921 ],
      fold: 0,
      foldFull: [ 7938, 953 ]
  }, {
      code: 8066,
      lower: [ 8066 ],
      title: [ 8074 ],
      upper: [ 7946, 921 ],
      fold: 0,
      foldFull: [ 7938, 953 ]
  }, {
      code: 8067,
      lower: [ 8067 ],
      title: [ 8075 ],
      upper: [ 7947, 921 ],
      fold: 0,
      foldFull: [ 7939, 953 ]
  }, {
      code: 8067,
      lower: [ 8067 ],
      title: [ 8075 ],
      upper: [ 7947, 921 ],
      fold: 0,
      foldFull: [ 7939, 953 ]
  }, {
      code: 8068,
      lower: [ 8068 ],
      title: [ 8076 ],
      upper: [ 7948, 921 ],
      fold: 0,
      foldFull: [ 7940, 953 ]
  }, {
      code: 8068,
      lower: [ 8068 ],
      title: [ 8076 ],
      upper: [ 7948, 921 ],
      fold: 0,
      foldFull: [ 7940, 953 ]
  }, {
      code: 8069,
      lower: [ 8069 ],
      title: [ 8077 ],
      upper: [ 7949, 921 ],
      fold: 0,
      foldFull: [ 7941, 953 ]
  }, {
      code: 8069,
      lower: [ 8069 ],
      title: [ 8077 ],
      upper: [ 7949, 921 ],
      fold: 0,
      foldFull: [ 7941, 953 ]
  }, {
      code: 8070,
      lower: [ 8070 ],
      title: [ 8078 ],
      upper: [ 7950, 921 ],
      fold: 0,
      foldFull: [ 7942, 953 ]
  }, {
      code: 8070,
      lower: [ 8070 ],
      title: [ 8078 ],
      upper: [ 7950, 921 ],
      fold: 0,
      foldFull: [ 7942, 953 ]
  }, {
      code: 8071,
      lower: [ 8071 ],
      title: [ 8079 ],
      upper: [ 7951, 921 ],
      fold: 0,
      foldFull: [ 7943, 953 ]
  }, {
      code: 8071,
      lower: [ 8071 ],
      title: [ 8079 ],
      upper: [ 7951, 921 ],
      fold: 0,
      foldFull: [ 7943, 953 ]
  }, {
      code: 8072,
      lower: [ 8064 ],
      title: [ 8072 ],
      upper: [ 7944, 921 ],
      fold: 8064,
      foldFull: [ 7936, 953 ]
  }, {
      code: 8072,
      lower: [ 8064 ],
      title: [ 8072 ],
      upper: [ 7944, 921 ],
      fold: 8064,
      foldFull: [ 7936, 953 ]
  }, {
      code: 8073,
      lower: [ 8065 ],
      title: [ 8073 ],
      upper: [ 7945, 921 ],
      fold: 8065,
      foldFull: [ 7937, 953 ]
  }, {
      code: 8073,
      lower: [ 8065 ],
      title: [ 8073 ],
      upper: [ 7945, 921 ],
      fold: 8065,
      foldFull: [ 7937, 953 ]
  }, {
      code: 8074,
      lower: [ 8066 ],
      title: [ 8074 ],
      upper: [ 7946, 921 ],
      fold: 8066,
      foldFull: [ 7938, 953 ]
  }, {
      code: 8074,
      lower: [ 8066 ],
      title: [ 8074 ],
      upper: [ 7946, 921 ],
      fold: 8066,
      foldFull: [ 7938, 953 ]
  }, {
      code: 8075,
      lower: [ 8067 ],
      title: [ 8075 ],
      upper: [ 7947, 921 ],
      fold: 8067,
      foldFull: [ 7939, 953 ]
  }, {
      code: 8075,
      lower: [ 8067 ],
      title: [ 8075 ],
      upper: [ 7947, 921 ],
      fold: 8067,
      foldFull: [ 7939, 953 ]
  }, {
      code: 8076,
      lower: [ 8068 ],
      title: [ 8076 ],
      upper: [ 7948, 921 ],
      fold: 8068,
      foldFull: [ 7940, 953 ]
  }, {
      code: 8076,
      lower: [ 8068 ],
      title: [ 8076 ],
      upper: [ 7948, 921 ],
      fold: 8068,
      foldFull: [ 7940, 953 ]
  }, {
      code: 8077,
      lower: [ 8069 ],
      title: [ 8077 ],
      upper: [ 7949, 921 ],
      fold: 8069,
      foldFull: [ 7941, 953 ]
  }, {
      code: 8077,
      lower: [ 8069 ],
      title: [ 8077 ],
      upper: [ 7949, 921 ],
      fold: 8069,
      foldFull: [ 7941, 953 ]
  }, {
      code: 8078,
      lower: [ 8070 ],
      title: [ 8078 ],
      upper: [ 7950, 921 ],
      fold: 8070,
      foldFull: [ 7942, 953 ]
  }, {
      code: 8078,
      lower: [ 8070 ],
      title: [ 8078 ],
      upper: [ 7950, 921 ],
      fold: 8070,
      foldFull: [ 7942, 953 ]
  }, {
      code: 8079,
      lower: [ 8071 ],
      title: [ 8079 ],
      upper: [ 7951, 921 ],
      fold: 8071,
      foldFull: [ 7943, 953 ]
  }, {
      code: 8079,
      lower: [ 8071 ],
      title: [ 8079 ],
      upper: [ 7951, 921 ],
      fold: 8071,
      foldFull: [ 7943, 953 ]
  }, {
      code: 8080,
      lower: [ 8080 ],
      title: [ 8088 ],
      upper: [ 7976, 921 ],
      fold: 0,
      foldFull: [ 7968, 953 ]
  }, {
      code: 8080,
      lower: [ 8080 ],
      title: [ 8088 ],
      upper: [ 7976, 921 ],
      fold: 0,
      foldFull: [ 7968, 953 ]
  }, {
      code: 8081,
      lower: [ 8081 ],
      title: [ 8089 ],
      upper: [ 7977, 921 ],
      fold: 0,
      foldFull: [ 7969, 953 ]
  }, {
      code: 8081,
      lower: [ 8081 ],
      title: [ 8089 ],
      upper: [ 7977, 921 ],
      fold: 0,
      foldFull: [ 7969, 953 ]
  }, {
      code: 8082,
      lower: [ 8082 ],
      title: [ 8090 ],
      upper: [ 7978, 921 ],
      fold: 0,
      foldFull: [ 7970, 953 ]
  }, {
      code: 8082,
      lower: [ 8082 ],
      title: [ 8090 ],
      upper: [ 7978, 921 ],
      fold: 0,
      foldFull: [ 7970, 953 ]
  }, {
      code: 8083,
      lower: [ 8083 ],
      title: [ 8091 ],
      upper: [ 7979, 921 ],
      fold: 0,
      foldFull: [ 7971, 953 ]
  }, {
      code: 8083,
      lower: [ 8083 ],
      title: [ 8091 ],
      upper: [ 7979, 921 ],
      fold: 0,
      foldFull: [ 7971, 953 ]
  }, {
      code: 8084,
      lower: [ 8084 ],
      title: [ 8092 ],
      upper: [ 7980, 921 ],
      fold: 0,
      foldFull: [ 7972, 953 ]
  }, {
      code: 8084,
      lower: [ 8084 ],
      title: [ 8092 ],
      upper: [ 7980, 921 ],
      fold: 0,
      foldFull: [ 7972, 953 ]
  }, {
      code: 8085,
      lower: [ 8085 ],
      title: [ 8093 ],
      upper: [ 7981, 921 ],
      fold: 0,
      foldFull: [ 7973, 953 ]
  }, {
      code: 8085,
      lower: [ 8085 ],
      title: [ 8093 ],
      upper: [ 7981, 921 ],
      fold: 0,
      foldFull: [ 7973, 953 ]
  }, {
      code: 8086,
      lower: [ 8086 ],
      title: [ 8094 ],
      upper: [ 7982, 921 ],
      fold: 0,
      foldFull: [ 7974, 953 ]
  }, {
      code: 8086,
      lower: [ 8086 ],
      title: [ 8094 ],
      upper: [ 7982, 921 ],
      fold: 0,
      foldFull: [ 7974, 953 ]
  }, {
      code: 8087,
      lower: [ 8087 ],
      title: [ 8095 ],
      upper: [ 7983, 921 ],
      fold: 0,
      foldFull: [ 7975, 953 ]
  }, {
      code: 8087,
      lower: [ 8087 ],
      title: [ 8095 ],
      upper: [ 7983, 921 ],
      fold: 0,
      foldFull: [ 7975, 953 ]
  }, {
      code: 8088,
      lower: [ 8080 ],
      title: [ 8088 ],
      upper: [ 7976, 921 ],
      fold: 8080,
      foldFull: [ 7968, 953 ]
  }, {
      code: 8088,
      lower: [ 8080 ],
      title: [ 8088 ],
      upper: [ 7976, 921 ],
      fold: 8080,
      foldFull: [ 7968, 953 ]
  }, {
      code: 8089,
      lower: [ 8081 ],
      title: [ 8089 ],
      upper: [ 7977, 921 ],
      fold: 8081,
      foldFull: [ 7969, 953 ]
  }, {
      code: 8089,
      lower: [ 8081 ],
      title: [ 8089 ],
      upper: [ 7977, 921 ],
      fold: 8081,
      foldFull: [ 7969, 953 ]
  }, {
      code: 8090,
      lower: [ 8082 ],
      title: [ 8090 ],
      upper: [ 7978, 921 ],
      fold: 8082,
      foldFull: [ 7970, 953 ]
  }, {
      code: 8090,
      lower: [ 8082 ],
      title: [ 8090 ],
      upper: [ 7978, 921 ],
      fold: 8082,
      foldFull: [ 7970, 953 ]
  }, {
      code: 8091,
      lower: [ 8083 ],
      title: [ 8091 ],
      upper: [ 7979, 921 ],
      fold: 8083,
      foldFull: [ 7971, 953 ]
  }, {
      code: 8091,
      lower: [ 8083 ],
      title: [ 8091 ],
      upper: [ 7979, 921 ],
      fold: 8083,
      foldFull: [ 7971, 953 ]
  }, {
      code: 8092,
      lower: [ 8084 ],
      title: [ 8092 ],
      upper: [ 7980, 921 ],
      fold: 8084,
      foldFull: [ 7972, 953 ]
  }, {
      code: 8092,
      lower: [ 8084 ],
      title: [ 8092 ],
      upper: [ 7980, 921 ],
      fold: 8084,
      foldFull: [ 7972, 953 ]
  }, {
      code: 8093,
      lower: [ 8085 ],
      title: [ 8093 ],
      upper: [ 7981, 921 ],
      fold: 8085,
      foldFull: [ 7973, 953 ]
  }, {
      code: 8093,
      lower: [ 8085 ],
      title: [ 8093 ],
      upper: [ 7981, 921 ],
      fold: 8085,
      foldFull: [ 7973, 953 ]
  }, {
      code: 8094,
      lower: [ 8086 ],
      title: [ 8094 ],
      upper: [ 7982, 921 ],
      fold: 8086,
      foldFull: [ 7974, 953 ]
  }, {
      code: 8094,
      lower: [ 8086 ],
      title: [ 8094 ],
      upper: [ 7982, 921 ],
      fold: 8086,
      foldFull: [ 7974, 953 ]
  }, {
      code: 8095,
      lower: [ 8087 ],
      title: [ 8095 ],
      upper: [ 7983, 921 ],
      fold: 8087,
      foldFull: [ 7975, 953 ]
  }, {
      code: 8095,
      lower: [ 8087 ],
      title: [ 8095 ],
      upper: [ 7983, 921 ],
      fold: 8087,
      foldFull: [ 7975, 953 ]
  }, {
      code: 8096,
      lower: [ 8096 ],
      title: [ 8104 ],
      upper: [ 8040, 921 ],
      fold: 0,
      foldFull: [ 8032, 953 ]
  }, {
      code: 8096,
      lower: [ 8096 ],
      title: [ 8104 ],
      upper: [ 8040, 921 ],
      fold: 0,
      foldFull: [ 8032, 953 ]
  }, {
      code: 8097,
      lower: [ 8097 ],
      title: [ 8105 ],
      upper: [ 8041, 921 ],
      fold: 0,
      foldFull: [ 8033, 953 ]
  }, {
      code: 8097,
      lower: [ 8097 ],
      title: [ 8105 ],
      upper: [ 8041, 921 ],
      fold: 0,
      foldFull: [ 8033, 953 ]
  }, {
      code: 8098,
      lower: [ 8098 ],
      title: [ 8106 ],
      upper: [ 8042, 921 ],
      fold: 0,
      foldFull: [ 8034, 953 ]
  }, {
      code: 8098,
      lower: [ 8098 ],
      title: [ 8106 ],
      upper: [ 8042, 921 ],
      fold: 0,
      foldFull: [ 8034, 953 ]
  }, {
      code: 8099,
      lower: [ 8099 ],
      title: [ 8107 ],
      upper: [ 8043, 921 ],
      fold: 0,
      foldFull: [ 8035, 953 ]
  }, {
      code: 8099,
      lower: [ 8099 ],
      title: [ 8107 ],
      upper: [ 8043, 921 ],
      fold: 0,
      foldFull: [ 8035, 953 ]
  }, {
      code: 8100,
      lower: [ 8100 ],
      title: [ 8108 ],
      upper: [ 8044, 921 ],
      fold: 0,
      foldFull: [ 8036, 953 ]
  }, {
      code: 8100,
      lower: [ 8100 ],
      title: [ 8108 ],
      upper: [ 8044, 921 ],
      fold: 0,
      foldFull: [ 8036, 953 ]
  }, {
      code: 8101,
      lower: [ 8101 ],
      title: [ 8109 ],
      upper: [ 8045, 921 ],
      fold: 0,
      foldFull: [ 8037, 953 ]
  }, {
      code: 8101,
      lower: [ 8101 ],
      title: [ 8109 ],
      upper: [ 8045, 921 ],
      fold: 0,
      foldFull: [ 8037, 953 ]
  }, {
      code: 8102,
      lower: [ 8102 ],
      title: [ 8110 ],
      upper: [ 8046, 921 ],
      fold: 0,
      foldFull: [ 8038, 953 ]
  }, {
      code: 8102,
      lower: [ 8102 ],
      title: [ 8110 ],
      upper: [ 8046, 921 ],
      fold: 0,
      foldFull: [ 8038, 953 ]
  }, {
      code: 8103,
      lower: [ 8103 ],
      title: [ 8111 ],
      upper: [ 8047, 921 ],
      fold: 0,
      foldFull: [ 8039, 953 ]
  }, {
      code: 8103,
      lower: [ 8103 ],
      title: [ 8111 ],
      upper: [ 8047, 921 ],
      fold: 0,
      foldFull: [ 8039, 953 ]
  }, {
      code: 8104,
      lower: [ 8096 ],
      title: [ 8104 ],
      upper: [ 8040, 921 ],
      fold: 8096,
      foldFull: [ 8032, 953 ]
  }, {
      code: 8104,
      lower: [ 8096 ],
      title: [ 8104 ],
      upper: [ 8040, 921 ],
      fold: 8096,
      foldFull: [ 8032, 953 ]
  }, {
      code: 8105,
      lower: [ 8097 ],
      title: [ 8105 ],
      upper: [ 8041, 921 ],
      fold: 8097,
      foldFull: [ 8033, 953 ]
  }, {
      code: 8105,
      lower: [ 8097 ],
      title: [ 8105 ],
      upper: [ 8041, 921 ],
      fold: 8097,
      foldFull: [ 8033, 953 ]
  }, {
      code: 8106,
      lower: [ 8098 ],
      title: [ 8106 ],
      upper: [ 8042, 921 ],
      fold: 8098,
      foldFull: [ 8034, 953 ]
  }, {
      code: 8106,
      lower: [ 8098 ],
      title: [ 8106 ],
      upper: [ 8042, 921 ],
      fold: 8098,
      foldFull: [ 8034, 953 ]
  }, {
      code: 8107,
      lower: [ 8099 ],
      title: [ 8107 ],
      upper: [ 8043, 921 ],
      fold: 8099,
      foldFull: [ 8035, 953 ]
  }, {
      code: 8107,
      lower: [ 8099 ],
      title: [ 8107 ],
      upper: [ 8043, 921 ],
      fold: 8099,
      foldFull: [ 8035, 953 ]
  }, {
      code: 8108,
      lower: [ 8100 ],
      title: [ 8108 ],
      upper: [ 8044, 921 ],
      fold: 8100,
      foldFull: [ 8036, 953 ]
  }, {
      code: 8108,
      lower: [ 8100 ],
      title: [ 8108 ],
      upper: [ 8044, 921 ],
      fold: 8100,
      foldFull: [ 8036, 953 ]
  }, {
      code: 8109,
      lower: [ 8101 ],
      title: [ 8109 ],
      upper: [ 8045, 921 ],
      fold: 8101,
      foldFull: [ 8037, 953 ]
  }, {
      code: 8109,
      lower: [ 8101 ],
      title: [ 8109 ],
      upper: [ 8045, 921 ],
      fold: 8101,
      foldFull: [ 8037, 953 ]
  }, {
      code: 8110,
      lower: [ 8102 ],
      title: [ 8110 ],
      upper: [ 8046, 921 ],
      fold: 8102,
      foldFull: [ 8038, 953 ]
  }, {
      code: 8110,
      lower: [ 8102 ],
      title: [ 8110 ],
      upper: [ 8046, 921 ],
      fold: 8102,
      foldFull: [ 8038, 953 ]
  }, {
      code: 8111,
      lower: [ 8103 ],
      title: [ 8111 ],
      upper: [ 8047, 921 ],
      fold: 8103,
      foldFull: [ 8039, 953 ]
  }, {
      code: 8111,
      lower: [ 8103 ],
      title: [ 8111 ],
      upper: [ 8047, 921 ],
      fold: 8103,
      foldFull: [ 8039, 953 ]
  }, {
      code: 8114,
      lower: [ 8114 ],
      title: [ 8122, 837 ],
      upper: [ 8122, 921 ],
      fold: 0,
      foldFull: [ 8048, 953 ]
  }, {
      code: 8114,
      lower: [ 8114 ],
      title: [ 8122, 837 ],
      upper: [ 8122, 921 ],
      fold: 0,
      foldFull: [ 8048, 953 ]
  }, {
      code: 8115,
      lower: [ 8115 ],
      title: [ 8124 ],
      upper: [ 913, 921 ],
      fold: 0,
      foldFull: [ 945, 953 ]
  }, {
      code: 8115,
      lower: [ 8115 ],
      title: [ 8124 ],
      upper: [ 913, 921 ],
      fold: 0,
      foldFull: [ 945, 953 ]
  }, {
      code: 8116,
      lower: [ 8116 ],
      title: [ 902, 837 ],
      upper: [ 902, 921 ],
      fold: 0,
      foldFull: [ 940, 953 ]
  }, {
      code: 8116,
      lower: [ 8116 ],
      title: [ 902, 837 ],
      upper: [ 902, 921 ],
      fold: 0,
      foldFull: [ 940, 953 ]
  }, {
      code: 8118,
      lower: [ 8118 ],
      title: [ 913, 834 ],
      upper: [ 913, 834 ],
      fold: 0,
      foldFull: [ 945, 834 ]
  }, {
      code: 8118,
      lower: [ 8118 ],
      title: [ 913, 834 ],
      upper: [ 913, 834 ],
      fold: 0,
      foldFull: [ 945, 834 ]
  }, {
      code: 8119,
      lower: [ 8119 ],
      title: [ 913, 834, 837 ],
      upper: [ 913, 834, 921 ],
      fold: 0,
      foldFull: [ 945, 834, 953 ]
  }, {
      code: 8119,
      lower: [ 8119 ],
      title: [ 913, 834, 837 ],
      upper: [ 913, 834, 921 ],
      fold: 0,
      foldFull: [ 945, 834, 953 ]
  }, {
      code: 8120,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8112,
      foldFull: [ 8112 ]
  }, {
      code: 8121,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8113,
      foldFull: [ 8113 ]
  }, {
      code: 8122,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8048,
      foldFull: [ 8048 ]
  }, {
      code: 8123,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8049,
      foldFull: [ 8049 ]
  }, {
      code: 8124,
      lower: [ 8115 ],
      title: [ 8124 ],
      upper: [ 913, 921 ],
      fold: 8115,
      foldFull: [ 945, 953 ]
  }, {
      code: 8124,
      lower: [ 8115 ],
      title: [ 8124 ],
      upper: [ 913, 921 ],
      fold: 8115,
      foldFull: [ 945, 953 ]
  }, {
      code: 8126,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 953,
      foldFull: [ 953 ]
  }, {
      code: 8130,
      lower: [ 8130 ],
      title: [ 8138, 837 ],
      upper: [ 8138, 921 ],
      fold: 0,
      foldFull: [ 8052, 953 ]
  }, {
      code: 8130,
      lower: [ 8130 ],
      title: [ 8138, 837 ],
      upper: [ 8138, 921 ],
      fold: 0,
      foldFull: [ 8052, 953 ]
  }, {
      code: 8131,
      lower: [ 8131 ],
      title: [ 8140 ],
      upper: [ 919, 921 ],
      fold: 0,
      foldFull: [ 951, 953 ]
  }, {
      code: 8131,
      lower: [ 8131 ],
      title: [ 8140 ],
      upper: [ 919, 921 ],
      fold: 0,
      foldFull: [ 951, 953 ]
  }, {
      code: 8132,
      lower: [ 8132 ],
      title: [ 905, 837 ],
      upper: [ 905, 921 ],
      fold: 0,
      foldFull: [ 942, 953 ]
  }, {
      code: 8132,
      lower: [ 8132 ],
      title: [ 905, 837 ],
      upper: [ 905, 921 ],
      fold: 0,
      foldFull: [ 942, 953 ]
  }, {
      code: 8134,
      lower: [ 8134 ],
      title: [ 919, 834 ],
      upper: [ 919, 834 ],
      fold: 0,
      foldFull: [ 951, 834 ]
  }, {
      code: 8134,
      lower: [ 8134 ],
      title: [ 919, 834 ],
      upper: [ 919, 834 ],
      fold: 0,
      foldFull: [ 951, 834 ]
  }, {
      code: 8135,
      lower: [ 8135 ],
      title: [ 919, 834, 837 ],
      upper: [ 919, 834, 921 ],
      fold: 0,
      foldFull: [ 951, 834, 953 ]
  }, {
      code: 8135,
      lower: [ 8135 ],
      title: [ 919, 834, 837 ],
      upper: [ 919, 834, 921 ],
      fold: 0,
      foldFull: [ 951, 834, 953 ]
  }, {
      code: 8136,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8050,
      foldFull: [ 8050 ]
  }, {
      code: 8137,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8051,
      foldFull: [ 8051 ]
  }, {
      code: 8138,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8052,
      foldFull: [ 8052 ]
  }, {
      code: 8139,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8053,
      foldFull: [ 8053 ]
  }, {
      code: 8140,
      lower: [ 8131 ],
      title: [ 8140 ],
      upper: [ 919, 921 ],
      fold: 8131,
      foldFull: [ 951, 953 ]
  }, {
      code: 8140,
      lower: [ 8131 ],
      title: [ 8140 ],
      upper: [ 919, 921 ],
      fold: 8131,
      foldFull: [ 951, 953 ]
  }, {
      code: 8146,
      lower: [ 8146 ],
      title: [ 921, 776, 768 ],
      upper: [ 921, 776, 768 ],
      fold: 0,
      foldFull: [ 953, 776, 768 ]
  }, {
      code: 8146,
      lower: [ 8146 ],
      title: [ 921, 776, 768 ],
      upper: [ 921, 776, 768 ],
      fold: 0,
      foldFull: [ 953, 776, 768 ]
  }, {
      code: 8147,
      lower: [ 8147 ],
      title: [ 921, 776, 769 ],
      upper: [ 921, 776, 769 ],
      fold: 0,
      foldFull: [ 953, 776, 769 ]
  }, {
      code: 8147,
      lower: [ 8147 ],
      title: [ 921, 776, 769 ],
      upper: [ 921, 776, 769 ],
      fold: 0,
      foldFull: [ 953, 776, 769 ]
  }, {
      code: 8150,
      lower: [ 8150 ],
      title: [ 921, 834 ],
      upper: [ 921, 834 ],
      fold: 0,
      foldFull: [ 953, 834 ]
  }, {
      code: 8150,
      lower: [ 8150 ],
      title: [ 921, 834 ],
      upper: [ 921, 834 ],
      fold: 0,
      foldFull: [ 953, 834 ]
  }, {
      code: 8151,
      lower: [ 8151 ],
      title: [ 921, 776, 834 ],
      upper: [ 921, 776, 834 ],
      fold: 0,
      foldFull: [ 953, 776, 834 ]
  }, {
      code: 8151,
      lower: [ 8151 ],
      title: [ 921, 776, 834 ],
      upper: [ 921, 776, 834 ],
      fold: 0,
      foldFull: [ 953, 776, 834 ]
  }, {
      code: 8152,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8144,
      foldFull: [ 8144 ]
  }, {
      code: 8153,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8145,
      foldFull: [ 8145 ]
  }, {
      code: 8154,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8054,
      foldFull: [ 8054 ]
  }, {
      code: 8155,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8055,
      foldFull: [ 8055 ]
  }, {
      code: 8162,
      lower: [ 8162 ],
      title: [ 933, 776, 768 ],
      upper: [ 933, 776, 768 ],
      fold: 0,
      foldFull: [ 965, 776, 768 ]
  }, {
      code: 8162,
      lower: [ 8162 ],
      title: [ 933, 776, 768 ],
      upper: [ 933, 776, 768 ],
      fold: 0,
      foldFull: [ 965, 776, 768 ]
  }, {
      code: 8163,
      lower: [ 8163 ],
      title: [ 933, 776, 769 ],
      upper: [ 933, 776, 769 ],
      fold: 0,
      foldFull: [ 965, 776, 769 ]
  }, {
      code: 8163,
      lower: [ 8163 ],
      title: [ 933, 776, 769 ],
      upper: [ 933, 776, 769 ],
      fold: 0,
      foldFull: [ 965, 776, 769 ]
  }, {
      code: 8164,
      lower: [ 8164 ],
      title: [ 929, 787 ],
      upper: [ 929, 787 ],
      fold: 0,
      foldFull: [ 961, 787 ]
  }, {
      code: 8164,
      lower: [ 8164 ],
      title: [ 929, 787 ],
      upper: [ 929, 787 ],
      fold: 0,
      foldFull: [ 961, 787 ]
  }, {
      code: 8166,
      lower: [ 8166 ],
      title: [ 933, 834 ],
      upper: [ 933, 834 ],
      fold: 0,
      foldFull: [ 965, 834 ]
  }, {
      code: 8166,
      lower: [ 8166 ],
      title: [ 933, 834 ],
      upper: [ 933, 834 ],
      fold: 0,
      foldFull: [ 965, 834 ]
  }, {
      code: 8167,
      lower: [ 8167 ],
      title: [ 933, 776, 834 ],
      upper: [ 933, 776, 834 ],
      fold: 0,
      foldFull: [ 965, 776, 834 ]
  }, {
      code: 8167,
      lower: [ 8167 ],
      title: [ 933, 776, 834 ],
      upper: [ 933, 776, 834 ],
      fold: 0,
      foldFull: [ 965, 776, 834 ]
  }, {
      code: 8168,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8160,
      foldFull: [ 8160 ]
  }, {
      code: 8169,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8161,
      foldFull: [ 8161 ]
  }, {
      code: 8170,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8058,
      foldFull: [ 8058 ]
  }, {
      code: 8171,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8059,
      foldFull: [ 8059 ]
  }, {
      code: 8172,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8165,
      foldFull: [ 8165 ]
  }, {
      code: 8178,
      lower: [ 8178 ],
      title: [ 8186, 837 ],
      upper: [ 8186, 921 ],
      fold: 0,
      foldFull: [ 8060, 953 ]
  }, {
      code: 8178,
      lower: [ 8178 ],
      title: [ 8186, 837 ],
      upper: [ 8186, 921 ],
      fold: 0,
      foldFull: [ 8060, 953 ]
  }, {
      code: 8179,
      lower: [ 8179 ],
      title: [ 8188 ],
      upper: [ 937, 921 ],
      fold: 0,
      foldFull: [ 969, 953 ]
  }, {
      code: 8179,
      lower: [ 8179 ],
      title: [ 8188 ],
      upper: [ 937, 921 ],
      fold: 0,
      foldFull: [ 969, 953 ]
  }, {
      code: 8180,
      lower: [ 8180 ],
      title: [ 911, 837 ],
      upper: [ 911, 921 ],
      fold: 0,
      foldFull: [ 974, 953 ]
  }, {
      code: 8180,
      lower: [ 8180 ],
      title: [ 911, 837 ],
      upper: [ 911, 921 ],
      fold: 0,
      foldFull: [ 974, 953 ]
  }, {
      code: 8182,
      lower: [ 8182 ],
      title: [ 937, 834 ],
      upper: [ 937, 834 ],
      fold: 0,
      foldFull: [ 969, 834 ]
  }, {
      code: 8182,
      lower: [ 8182 ],
      title: [ 937, 834 ],
      upper: [ 937, 834 ],
      fold: 0,
      foldFull: [ 969, 834 ]
  }, {
      code: 8183,
      lower: [ 8183 ],
      title: [ 937, 834, 837 ],
      upper: [ 937, 834, 921 ],
      fold: 0,
      foldFull: [ 969, 834, 953 ]
  }, {
      code: 8183,
      lower: [ 8183 ],
      title: [ 937, 834, 837 ],
      upper: [ 937, 834, 921 ],
      fold: 0,
      foldFull: [ 969, 834, 953 ]
  }, {
      code: 8184,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8056,
      foldFull: [ 8056 ]
  }, {
      code: 8185,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8057,
      foldFull: [ 8057 ]
  }, {
      code: 8186,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8060,
      foldFull: [ 8060 ]
  }, {
      code: 8187,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8061,
      foldFull: [ 8061 ]
  }, {
      code: 8188,
      lower: [ 8179 ],
      title: [ 8188 ],
      upper: [ 937, 921 ],
      fold: 8179,
      foldFull: [ 969, 953 ]
  }, {
      code: 8188,
      lower: [ 8179 ],
      title: [ 8188 ],
      upper: [ 937, 921 ],
      fold: 8179,
      foldFull: [ 969, 953 ]
  }, {
      code: 8486,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 969,
      foldFull: [ 969 ]
  }, {
      code: 8490,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 107,
      foldFull: [ 107 ]
  }, {
      code: 8491,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 229,
      foldFull: [ 229 ]
  }, {
      code: 8498,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8526,
      foldFull: [ 8526 ]
  }, {
      code: 8544,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8560,
      foldFull: [ 8560 ]
  }, {
      code: 8545,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8561,
      foldFull: [ 8561 ]
  }, {
      code: 8546,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8562,
      foldFull: [ 8562 ]
  }, {
      code: 8547,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8563,
      foldFull: [ 8563 ]
  }, {
      code: 8548,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8564,
      foldFull: [ 8564 ]
  }, {
      code: 8549,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8565,
      foldFull: [ 8565 ]
  }, {
      code: 8550,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8566,
      foldFull: [ 8566 ]
  }, {
      code: 8551,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8567,
      foldFull: [ 8567 ]
  }, {
      code: 8552,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8568,
      foldFull: [ 8568 ]
  }, {
      code: 8553,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8569,
      foldFull: [ 8569 ]
  }, {
      code: 8554,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8570,
      foldFull: [ 8570 ]
  }, {
      code: 8555,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8571,
      foldFull: [ 8571 ]
  }, {
      code: 8556,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8572,
      foldFull: [ 8572 ]
  }, {
      code: 8557,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8573,
      foldFull: [ 8573 ]
  }, {
      code: 8558,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8574,
      foldFull: [ 8574 ]
  }, {
      code: 8559,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8575,
      foldFull: [ 8575 ]
  }, {
      code: 8579,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8580,
      foldFull: [ 8580 ]
  }, {
      code: 9398,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 9424,
      foldFull: [ 9424 ]
  }, {
      code: 9399,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 9425,
      foldFull: [ 9425 ]
  }, {
      code: 9400,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 9426,
      foldFull: [ 9426 ]
  }, {
      code: 9401,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 9427,
      foldFull: [ 9427 ]
  }, {
      code: 9402,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 9428,
      foldFull: [ 9428 ]
  }, {
      code: 9403,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 9429,
      foldFull: [ 9429 ]
  }, {
      code: 9404,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 9430,
      foldFull: [ 9430 ]
  }, {
      code: 9405,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 9431,
      foldFull: [ 9431 ]
  }, {
      code: 9406,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 9432,
      foldFull: [ 9432 ]
  }, {
      code: 9407,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 9433,
      foldFull: [ 9433 ]
  }, {
      code: 9408,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 9434,
      foldFull: [ 9434 ]
  }, {
      code: 9409,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 9435,
      foldFull: [ 9435 ]
  }, {
      code: 9410,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 9436,
      foldFull: [ 9436 ]
  }, {
      code: 9411,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 9437,
      foldFull: [ 9437 ]
  }, {
      code: 9412,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 9438,
      foldFull: [ 9438 ]
  }, {
      code: 9413,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 9439,
      foldFull: [ 9439 ]
  }, {
      code: 9414,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 9440,
      foldFull: [ 9440 ]
  }, {
      code: 9415,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 9441,
      foldFull: [ 9441 ]
  }, {
      code: 9416,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 9442,
      foldFull: [ 9442 ]
  }, {
      code: 9417,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 9443,
      foldFull: [ 9443 ]
  }, {
      code: 9418,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 9444,
      foldFull: [ 9444 ]
  }, {
      code: 9419,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 9445,
      foldFull: [ 9445 ]
  }, {
      code: 9420,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 9446,
      foldFull: [ 9446 ]
  }, {
      code: 9421,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 9447,
      foldFull: [ 9447 ]
  }, {
      code: 9422,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 9448,
      foldFull: [ 9448 ]
  }, {
      code: 9423,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 9449,
      foldFull: [ 9449 ]
  }, {
      code: 11264,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11312,
      foldFull: [ 11312 ]
  }, {
      code: 11265,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11313,
      foldFull: [ 11313 ]
  }, {
      code: 11266,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11314,
      foldFull: [ 11314 ]
  }, {
      code: 11267,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11315,
      foldFull: [ 11315 ]
  }, {
      code: 11268,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11316,
      foldFull: [ 11316 ]
  }, {
      code: 11269,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11317,
      foldFull: [ 11317 ]
  }, {
      code: 11270,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11318,
      foldFull: [ 11318 ]
  }, {
      code: 11271,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11319,
      foldFull: [ 11319 ]
  }, {
      code: 11272,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11320,
      foldFull: [ 11320 ]
  }, {
      code: 11273,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11321,
      foldFull: [ 11321 ]
  }, {
      code: 11274,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11322,
      foldFull: [ 11322 ]
  }, {
      code: 11275,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11323,
      foldFull: [ 11323 ]
  }, {
      code: 11276,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11324,
      foldFull: [ 11324 ]
  }, {
      code: 11277,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11325,
      foldFull: [ 11325 ]
  }, {
      code: 11278,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11326,
      foldFull: [ 11326 ]
  }, {
      code: 11279,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11327,
      foldFull: [ 11327 ]
  }, {
      code: 11280,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11328,
      foldFull: [ 11328 ]
  }, {
      code: 11281,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11329,
      foldFull: [ 11329 ]
  }, {
      code: 11282,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11330,
      foldFull: [ 11330 ]
  }, {
      code: 11283,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11331,
      foldFull: [ 11331 ]
  }, {
      code: 11284,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11332,
      foldFull: [ 11332 ]
  }, {
      code: 11285,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11333,
      foldFull: [ 11333 ]
  }, {
      code: 11286,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11334,
      foldFull: [ 11334 ]
  }, {
      code: 11287,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11335,
      foldFull: [ 11335 ]
  }, {
      code: 11288,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11336,
      foldFull: [ 11336 ]
  }, {
      code: 11289,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11337,
      foldFull: [ 11337 ]
  }, {
      code: 11290,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11338,
      foldFull: [ 11338 ]
  }, {
      code: 11291,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11339,
      foldFull: [ 11339 ]
  }, {
      code: 11292,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11340,
      foldFull: [ 11340 ]
  }, {
      code: 11293,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11341,
      foldFull: [ 11341 ]
  }, {
      code: 11294,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11342,
      foldFull: [ 11342 ]
  }, {
      code: 11295,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11343,
      foldFull: [ 11343 ]
  }, {
      code: 11296,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11344,
      foldFull: [ 11344 ]
  }, {
      code: 11297,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11345,
      foldFull: [ 11345 ]
  }, {
      code: 11298,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11346,
      foldFull: [ 11346 ]
  }, {
      code: 11299,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11347,
      foldFull: [ 11347 ]
  }, {
      code: 11300,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11348,
      foldFull: [ 11348 ]
  }, {
      code: 11301,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11349,
      foldFull: [ 11349 ]
  }, {
      code: 11302,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11350,
      foldFull: [ 11350 ]
  }, {
      code: 11303,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11351,
      foldFull: [ 11351 ]
  }, {
      code: 11304,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11352,
      foldFull: [ 11352 ]
  }, {
      code: 11305,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11353,
      foldFull: [ 11353 ]
  }, {
      code: 11306,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11354,
      foldFull: [ 11354 ]
  }, {
      code: 11307,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11355,
      foldFull: [ 11355 ]
  }, {
      code: 11308,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11356,
      foldFull: [ 11356 ]
  }, {
      code: 11309,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11357,
      foldFull: [ 11357 ]
  }, {
      code: 11310,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11358,
      foldFull: [ 11358 ]
  }, {
      code: 11360,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11361,
      foldFull: [ 11361 ]
  }, {
      code: 11362,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 619,
      foldFull: [ 619 ]
  }, {
      code: 11363,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7549,
      foldFull: [ 7549 ]
  }, {
      code: 11364,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 637,
      foldFull: [ 637 ]
  }, {
      code: 11367,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11368,
      foldFull: [ 11368 ]
  }, {
      code: 11369,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11370,
      foldFull: [ 11370 ]
  }, {
      code: 11371,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11372,
      foldFull: [ 11372 ]
  }, {
      code: 11373,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 593,
      foldFull: [ 593 ]
  }, {
      code: 11374,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 625,
      foldFull: [ 625 ]
  }, {
      code: 11375,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 592,
      foldFull: [ 592 ]
  }, {
      code: 11376,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 594,
      foldFull: [ 594 ]
  }, {
      code: 11378,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11379,
      foldFull: [ 11379 ]
  }, {
      code: 11381,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11382,
      foldFull: [ 11382 ]
  }, {
      code: 11390,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 575,
      foldFull: [ 575 ]
  }, {
      code: 11391,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 576,
      foldFull: [ 576 ]
  }, {
      code: 11392,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11393,
      foldFull: [ 11393 ]
  }, {
      code: 11394,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11395,
      foldFull: [ 11395 ]
  }, {
      code: 11396,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11397,
      foldFull: [ 11397 ]
  }, {
      code: 11398,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11399,
      foldFull: [ 11399 ]
  }, {
      code: 11400,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11401,
      foldFull: [ 11401 ]
  }, {
      code: 11402,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11403,
      foldFull: [ 11403 ]
  }, {
      code: 11404,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11405,
      foldFull: [ 11405 ]
  }, {
      code: 11406,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11407,
      foldFull: [ 11407 ]
  }, {
      code: 11408,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11409,
      foldFull: [ 11409 ]
  }, {
      code: 11410,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11411,
      foldFull: [ 11411 ]
  }, {
      code: 11412,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11413,
      foldFull: [ 11413 ]
  }, {
      code: 11414,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11415,
      foldFull: [ 11415 ]
  }, {
      code: 11416,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11417,
      foldFull: [ 11417 ]
  }, {
      code: 11418,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11419,
      foldFull: [ 11419 ]
  }, {
      code: 11420,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11421,
      foldFull: [ 11421 ]
  }, {
      code: 11422,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11423,
      foldFull: [ 11423 ]
  }, {
      code: 11424,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11425,
      foldFull: [ 11425 ]
  }, {
      code: 11426,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11427,
      foldFull: [ 11427 ]
  }, {
      code: 11428,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11429,
      foldFull: [ 11429 ]
  }, {
      code: 11430,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11431,
      foldFull: [ 11431 ]
  }, {
      code: 11432,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11433,
      foldFull: [ 11433 ]
  }, {
      code: 11434,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11435,
      foldFull: [ 11435 ]
  }, {
      code: 11436,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11437,
      foldFull: [ 11437 ]
  }, {
      code: 11438,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11439,
      foldFull: [ 11439 ]
  }, {
      code: 11440,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11441,
      foldFull: [ 11441 ]
  }, {
      code: 11442,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11443,
      foldFull: [ 11443 ]
  }, {
      code: 11444,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11445,
      foldFull: [ 11445 ]
  }, {
      code: 11446,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11447,
      foldFull: [ 11447 ]
  }, {
      code: 11448,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11449,
      foldFull: [ 11449 ]
  }, {
      code: 11450,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11451,
      foldFull: [ 11451 ]
  }, {
      code: 11452,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11453,
      foldFull: [ 11453 ]
  }, {
      code: 11454,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11455,
      foldFull: [ 11455 ]
  }, {
      code: 11456,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11457,
      foldFull: [ 11457 ]
  }, {
      code: 11458,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11459,
      foldFull: [ 11459 ]
  }, {
      code: 11460,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11461,
      foldFull: [ 11461 ]
  }, {
      code: 11462,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11463,
      foldFull: [ 11463 ]
  }, {
      code: 11464,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11465,
      foldFull: [ 11465 ]
  }, {
      code: 11466,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11467,
      foldFull: [ 11467 ]
  }, {
      code: 11468,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11469,
      foldFull: [ 11469 ]
  }, {
      code: 11470,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11471,
      foldFull: [ 11471 ]
  }, {
      code: 11472,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11473,
      foldFull: [ 11473 ]
  }, {
      code: 11474,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11475,
      foldFull: [ 11475 ]
  }, {
      code: 11476,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11477,
      foldFull: [ 11477 ]
  }, {
      code: 11478,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11479,
      foldFull: [ 11479 ]
  }, {
      code: 11480,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11481,
      foldFull: [ 11481 ]
  }, {
      code: 11482,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11483,
      foldFull: [ 11483 ]
  }, {
      code: 11484,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11485,
      foldFull: [ 11485 ]
  }, {
      code: 11486,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11487,
      foldFull: [ 11487 ]
  }, {
      code: 11488,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11489,
      foldFull: [ 11489 ]
  }, {
      code: 11490,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11491,
      foldFull: [ 11491 ]
  }, {
      code: 11499,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11500,
      foldFull: [ 11500 ]
  }, {
      code: 11501,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11502,
      foldFull: [ 11502 ]
  }, {
      code: 11506,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11507,
      foldFull: [ 11507 ]
  }, {
      code: 42560,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42561,
      foldFull: [ 42561 ]
  }, {
      code: 42562,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42563,
      foldFull: [ 42563 ]
  }, {
      code: 42564,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42565,
      foldFull: [ 42565 ]
  }, {
      code: 42566,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42567,
      foldFull: [ 42567 ]
  }, {
      code: 42568,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42569,
      foldFull: [ 42569 ]
  }, {
      code: 42570,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42571,
      foldFull: [ 42571 ]
  }, {
      code: 42572,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42573,
      foldFull: [ 42573 ]
  }, {
      code: 42574,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42575,
      foldFull: [ 42575 ]
  }, {
      code: 42576,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42577,
      foldFull: [ 42577 ]
  }, {
      code: 42578,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42579,
      foldFull: [ 42579 ]
  }, {
      code: 42580,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42581,
      foldFull: [ 42581 ]
  }, {
      code: 42582,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42583,
      foldFull: [ 42583 ]
  }, {
      code: 42584,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42585,
      foldFull: [ 42585 ]
  }, {
      code: 42586,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42587,
      foldFull: [ 42587 ]
  }, {
      code: 42588,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42589,
      foldFull: [ 42589 ]
  }, {
      code: 42590,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42591,
      foldFull: [ 42591 ]
  }, {
      code: 42592,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42593,
      foldFull: [ 42593 ]
  }, {
      code: 42594,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42595,
      foldFull: [ 42595 ]
  }, {
      code: 42596,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42597,
      foldFull: [ 42597 ]
  }, {
      code: 42598,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42599,
      foldFull: [ 42599 ]
  }, {
      code: 42600,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42601,
      foldFull: [ 42601 ]
  }, {
      code: 42602,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42603,
      foldFull: [ 42603 ]
  }, {
      code: 42604,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42605,
      foldFull: [ 42605 ]
  }, {
      code: 42624,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42625,
      foldFull: [ 42625 ]
  }, {
      code: 42626,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42627,
      foldFull: [ 42627 ]
  }, {
      code: 42628,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42629,
      foldFull: [ 42629 ]
  }, {
      code: 42630,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42631,
      foldFull: [ 42631 ]
  }, {
      code: 42632,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42633,
      foldFull: [ 42633 ]
  }, {
      code: 42634,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42635,
      foldFull: [ 42635 ]
  }, {
      code: 42636,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42637,
      foldFull: [ 42637 ]
  }, {
      code: 42638,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42639,
      foldFull: [ 42639 ]
  }, {
      code: 42640,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42641,
      foldFull: [ 42641 ]
  }, {
      code: 42642,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42643,
      foldFull: [ 42643 ]
  }, {
      code: 42644,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42645,
      foldFull: [ 42645 ]
  }, {
      code: 42646,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42647,
      foldFull: [ 42647 ]
  }, {
      code: 42648,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42649,
      foldFull: [ 42649 ]
  }, {
      code: 42650,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42651,
      foldFull: [ 42651 ]
  }, {
      code: 42786,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42787,
      foldFull: [ 42787 ]
  }, {
      code: 42788,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42789,
      foldFull: [ 42789 ]
  }, {
      code: 42790,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42791,
      foldFull: [ 42791 ]
  }, {
      code: 42792,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42793,
      foldFull: [ 42793 ]
  }, {
      code: 42794,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42795,
      foldFull: [ 42795 ]
  }, {
      code: 42796,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42797,
      foldFull: [ 42797 ]
  }, {
      code: 42798,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42799,
      foldFull: [ 42799 ]
  }, {
      code: 42802,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42803,
      foldFull: [ 42803 ]
  }, {
      code: 42804,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42805,
      foldFull: [ 42805 ]
  }, {
      code: 42806,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42807,
      foldFull: [ 42807 ]
  }, {
      code: 42808,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42809,
      foldFull: [ 42809 ]
  }, {
      code: 42810,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42811,
      foldFull: [ 42811 ]
  }, {
      code: 42812,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42813,
      foldFull: [ 42813 ]
  }, {
      code: 42814,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42815,
      foldFull: [ 42815 ]
  }, {
      code: 42816,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42817,
      foldFull: [ 42817 ]
  }, {
      code: 42818,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42819,
      foldFull: [ 42819 ]
  }, {
      code: 42820,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42821,
      foldFull: [ 42821 ]
  }, {
      code: 42822,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42823,
      foldFull: [ 42823 ]
  }, {
      code: 42824,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42825,
      foldFull: [ 42825 ]
  }, {
      code: 42826,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42827,
      foldFull: [ 42827 ]
  }, {
      code: 42828,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42829,
      foldFull: [ 42829 ]
  }, {
      code: 42830,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42831,
      foldFull: [ 42831 ]
  }, {
      code: 42832,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42833,
      foldFull: [ 42833 ]
  }, {
      code: 42834,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42835,
      foldFull: [ 42835 ]
  }, {
      code: 42836,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42837,
      foldFull: [ 42837 ]
  }, {
      code: 42838,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42839,
      foldFull: [ 42839 ]
  }, {
      code: 42840,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42841,
      foldFull: [ 42841 ]
  }, {
      code: 42842,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42843,
      foldFull: [ 42843 ]
  }, {
      code: 42844,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42845,
      foldFull: [ 42845 ]
  }, {
      code: 42846,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42847,
      foldFull: [ 42847 ]
  }, {
      code: 42848,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42849,
      foldFull: [ 42849 ]
  }, {
      code: 42850,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42851,
      foldFull: [ 42851 ]
  }, {
      code: 42852,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42853,
      foldFull: [ 42853 ]
  }, {
      code: 42854,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42855,
      foldFull: [ 42855 ]
  }, {
      code: 42856,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42857,
      foldFull: [ 42857 ]
  }, {
      code: 42858,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42859,
      foldFull: [ 42859 ]
  }, {
      code: 42860,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42861,
      foldFull: [ 42861 ]
  }, {
      code: 42862,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42863,
      foldFull: [ 42863 ]
  }, {
      code: 42873,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42874,
      foldFull: [ 42874 ]
  }, {
      code: 42875,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42876,
      foldFull: [ 42876 ]
  }, {
      code: 42877,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7545,
      foldFull: [ 7545 ]
  }, {
      code: 42878,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42879,
      foldFull: [ 42879 ]
  }, {
      code: 42880,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42881,
      foldFull: [ 42881 ]
  }, {
      code: 42882,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42883,
      foldFull: [ 42883 ]
  }, {
      code: 42884,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42885,
      foldFull: [ 42885 ]
  }, {
      code: 42886,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42887,
      foldFull: [ 42887 ]
  }, {
      code: 42891,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42892,
      foldFull: [ 42892 ]
  }, {
      code: 42893,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 613,
      foldFull: [ 613 ]
  }, {
      code: 42896,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42897,
      foldFull: [ 42897 ]
  }, {
      code: 42898,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42899,
      foldFull: [ 42899 ]
  }, {
      code: 42902,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42903,
      foldFull: [ 42903 ]
  }, {
      code: 42904,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42905,
      foldFull: [ 42905 ]
  }, {
      code: 42906,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42907,
      foldFull: [ 42907 ]
  }, {
      code: 42908,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42909,
      foldFull: [ 42909 ]
  }, {
      code: 42910,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42911,
      foldFull: [ 42911 ]
  }, {
      code: 42912,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42913,
      foldFull: [ 42913 ]
  }, {
      code: 42914,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42915,
      foldFull: [ 42915 ]
  }, {
      code: 42916,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42917,
      foldFull: [ 42917 ]
  }, {
      code: 42918,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42919,
      foldFull: [ 42919 ]
  }, {
      code: 42920,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42921,
      foldFull: [ 42921 ]
  }, {
      code: 42922,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 614,
      foldFull: [ 614 ]
  }, {
      code: 42923,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 604,
      foldFull: [ 604 ]
  }, {
      code: 42924,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 609,
      foldFull: [ 609 ]
  }, {
      code: 42925,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 620,
      foldFull: [ 620 ]
  }, {
      code: 42926,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 618,
      foldFull: [ 618 ]
  }, {
      code: 42928,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 670,
      foldFull: [ 670 ]
  }, {
      code: 42929,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 647,
      foldFull: [ 647 ]
  }, {
      code: 42930,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 669,
      foldFull: [ 669 ]
  }, {
      code: 42931,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 43859,
      foldFull: [ 43859 ]
  }, {
      code: 42932,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42933,
      foldFull: [ 42933 ]
  }, {
      code: 42934,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42935,
      foldFull: [ 42935 ]
  }, {
      code: 42936,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42937,
      foldFull: [ 42937 ]
  }, {
      code: 42938,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42939,
      foldFull: [ 42939 ]
  }, {
      code: 42940,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42941,
      foldFull: [ 42941 ]
  }, {
      code: 42942,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42943,
      foldFull: [ 42943 ]
  }, {
      code: 42946,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42947,
      foldFull: [ 42947 ]
  }, {
      code: 42948,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42900,
      foldFull: [ 42900 ]
  }, {
      code: 42949,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 642,
      foldFull: [ 642 ]
  }, {
      code: 42950,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7566,
      foldFull: [ 7566 ]
  }, {
      code: 42951,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42952,
      foldFull: [ 42952 ]
  }, {
      code: 42953,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42954,
      foldFull: [ 42954 ]
  }, {
      code: 42997,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42998,
      foldFull: [ 42998 ]
  }, {
      code: 43888,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5024,
      foldFull: [ 5024 ]
  }, {
      code: 43889,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5025,
      foldFull: [ 5025 ]
  }, {
      code: 43890,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5026,
      foldFull: [ 5026 ]
  }, {
      code: 43891,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5027,
      foldFull: [ 5027 ]
  }, {
      code: 43892,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5028,
      foldFull: [ 5028 ]
  }, {
      code: 43893,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5029,
      foldFull: [ 5029 ]
  }, {
      code: 43894,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5030,
      foldFull: [ 5030 ]
  }, {
      code: 43895,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5031,
      foldFull: [ 5031 ]
  }, {
      code: 43896,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5032,
      foldFull: [ 5032 ]
  }, {
      code: 43897,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5033,
      foldFull: [ 5033 ]
  }, {
      code: 43898,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5034,
      foldFull: [ 5034 ]
  }, {
      code: 43899,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5035,
      foldFull: [ 5035 ]
  }, {
      code: 43900,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5036,
      foldFull: [ 5036 ]
  }, {
      code: 43901,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5037,
      foldFull: [ 5037 ]
  }, {
      code: 43902,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5038,
      foldFull: [ 5038 ]
  }, {
      code: 43903,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5039,
      foldFull: [ 5039 ]
  }, {
      code: 43904,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5040,
      foldFull: [ 5040 ]
  }, {
      code: 43905,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5041,
      foldFull: [ 5041 ]
  }, {
      code: 43906,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5042,
      foldFull: [ 5042 ]
  }, {
      code: 43907,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5043,
      foldFull: [ 5043 ]
  }, {
      code: 43908,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5044,
      foldFull: [ 5044 ]
  }, {
      code: 43909,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5045,
      foldFull: [ 5045 ]
  }, {
      code: 43910,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5046,
      foldFull: [ 5046 ]
  }, {
      code: 43911,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5047,
      foldFull: [ 5047 ]
  }, {
      code: 43912,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5048,
      foldFull: [ 5048 ]
  }, {
      code: 43913,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5049,
      foldFull: [ 5049 ]
  }, {
      code: 43914,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5050,
      foldFull: [ 5050 ]
  }, {
      code: 43915,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5051,
      foldFull: [ 5051 ]
  }, {
      code: 43916,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5052,
      foldFull: [ 5052 ]
  }, {
      code: 43917,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5053,
      foldFull: [ 5053 ]
  }, {
      code: 43918,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5054,
      foldFull: [ 5054 ]
  }, {
      code: 43919,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5055,
      foldFull: [ 5055 ]
  }, {
      code: 43920,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5056,
      foldFull: [ 5056 ]
  }, {
      code: 43921,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5057,
      foldFull: [ 5057 ]
  }, {
      code: 43922,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5058,
      foldFull: [ 5058 ]
  }, {
      code: 43923,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5059,
      foldFull: [ 5059 ]
  }, {
      code: 43924,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5060,
      foldFull: [ 5060 ]
  }, {
      code: 43925,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5061,
      foldFull: [ 5061 ]
  }, {
      code: 43926,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5062,
      foldFull: [ 5062 ]
  }, {
      code: 43927,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5063,
      foldFull: [ 5063 ]
  }, {
      code: 43928,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5064,
      foldFull: [ 5064 ]
  }, {
      code: 43929,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5065,
      foldFull: [ 5065 ]
  }, {
      code: 43930,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5066,
      foldFull: [ 5066 ]
  }, {
      code: 43931,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5067,
      foldFull: [ 5067 ]
  }, {
      code: 43932,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5068,
      foldFull: [ 5068 ]
  }, {
      code: 43933,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5069,
      foldFull: [ 5069 ]
  }, {
      code: 43934,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5070,
      foldFull: [ 5070 ]
  }, {
      code: 43935,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5071,
      foldFull: [ 5071 ]
  }, {
      code: 43936,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5072,
      foldFull: [ 5072 ]
  }, {
      code: 43937,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5073,
      foldFull: [ 5073 ]
  }, {
      code: 43938,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5074,
      foldFull: [ 5074 ]
  }, {
      code: 43939,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5075,
      foldFull: [ 5075 ]
  }, {
      code: 43940,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5076,
      foldFull: [ 5076 ]
  }, {
      code: 43941,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5077,
      foldFull: [ 5077 ]
  }, {
      code: 43942,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5078,
      foldFull: [ 5078 ]
  }, {
      code: 43943,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5079,
      foldFull: [ 5079 ]
  }, {
      code: 43944,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5080,
      foldFull: [ 5080 ]
  }, {
      code: 43945,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5081,
      foldFull: [ 5081 ]
  }, {
      code: 43946,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5082,
      foldFull: [ 5082 ]
  }, {
      code: 43947,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5083,
      foldFull: [ 5083 ]
  }, {
      code: 43948,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5084,
      foldFull: [ 5084 ]
  }, {
      code: 43949,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5085,
      foldFull: [ 5085 ]
  }, {
      code: 43950,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5086,
      foldFull: [ 5086 ]
  }, {
      code: 43951,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5087,
      foldFull: [ 5087 ]
  }, {
      code: 43952,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5088,
      foldFull: [ 5088 ]
  }, {
      code: 43953,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5089,
      foldFull: [ 5089 ]
  }, {
      code: 43954,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5090,
      foldFull: [ 5090 ]
  }, {
      code: 43955,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5091,
      foldFull: [ 5091 ]
  }, {
      code: 43956,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5092,
      foldFull: [ 5092 ]
  }, {
      code: 43957,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5093,
      foldFull: [ 5093 ]
  }, {
      code: 43958,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5094,
      foldFull: [ 5094 ]
  }, {
      code: 43959,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5095,
      foldFull: [ 5095 ]
  }, {
      code: 43960,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5096,
      foldFull: [ 5096 ]
  }, {
      code: 43961,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5097,
      foldFull: [ 5097 ]
  }, {
      code: 43962,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5098,
      foldFull: [ 5098 ]
  }, {
      code: 43963,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5099,
      foldFull: [ 5099 ]
  }, {
      code: 43964,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5100,
      foldFull: [ 5100 ]
  }, {
      code: 43965,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5101,
      foldFull: [ 5101 ]
  }, {
      code: 43966,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5102,
      foldFull: [ 5102 ]
  }, {
      code: 43967,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5103,
      foldFull: [ 5103 ]
  }, {
      code: 64256,
      lower: [ 64256 ],
      title: [ 70, 102 ],
      upper: [ 70, 70 ],
      fold: 0,
      foldFull: [ 102, 102 ]
  }, {
      code: 64256,
      lower: [ 64256 ],
      title: [ 70, 102 ],
      upper: [ 70, 70 ],
      fold: 0,
      foldFull: [ 102, 102 ]
  }, {
      code: 64257,
      lower: [ 64257 ],
      title: [ 70, 105 ],
      upper: [ 70, 73 ],
      fold: 0,
      foldFull: [ 102, 105 ]
  }, {
      code: 64257,
      lower: [ 64257 ],
      title: [ 70, 105 ],
      upper: [ 70, 73 ],
      fold: 0,
      foldFull: [ 102, 105 ]
  }, {
      code: 64258,
      lower: [ 64258 ],
      title: [ 70, 108 ],
      upper: [ 70, 76 ],
      fold: 0,
      foldFull: [ 102, 108 ]
  }, {
      code: 64258,
      lower: [ 64258 ],
      title: [ 70, 108 ],
      upper: [ 70, 76 ],
      fold: 0,
      foldFull: [ 102, 108 ]
  }, {
      code: 64259,
      lower: [ 64259 ],
      title: [ 70, 102, 105 ],
      upper: [ 70, 70, 73 ],
      fold: 0,
      foldFull: [ 102, 102, 105 ]
  }, {
      code: 64259,
      lower: [ 64259 ],
      title: [ 70, 102, 105 ],
      upper: [ 70, 70, 73 ],
      fold: 0,
      foldFull: [ 102, 102, 105 ]
  }, {
      code: 64260,
      lower: [ 64260 ],
      title: [ 70, 102, 108 ],
      upper: [ 70, 70, 76 ],
      fold: 0,
      foldFull: [ 102, 102, 108 ]
  }, {
      code: 64260,
      lower: [ 64260 ],
      title: [ 70, 102, 108 ],
      upper: [ 70, 70, 76 ],
      fold: 0,
      foldFull: [ 102, 102, 108 ]
  }, {
      code: 64261,
      lower: [ 64261 ],
      title: [ 83, 116 ],
      upper: [ 83, 84 ],
      fold: 0,
      foldFull: [ 115, 116 ]
  }, {
      code: 64261,
      lower: [ 64261 ],
      title: [ 83, 116 ],
      upper: [ 83, 84 ],
      fold: 0,
      foldFull: [ 115, 116 ]
  }, {
      code: 64262,
      lower: [ 64262 ],
      title: [ 83, 116 ],
      upper: [ 83, 84 ],
      fold: 0,
      foldFull: [ 115, 116 ]
  }, {
      code: 64262,
      lower: [ 64262 ],
      title: [ 83, 116 ],
      upper: [ 83, 84 ],
      fold: 0,
      foldFull: [ 115, 116 ]
  }, {
      code: 64275,
      lower: [ 64275 ],
      title: [ 1348, 1398 ],
      upper: [ 1348, 1350 ],
      fold: 0,
      foldFull: [ 1396, 1398 ]
  }, {
      code: 64275,
      lower: [ 64275 ],
      title: [ 1348, 1398 ],
      upper: [ 1348, 1350 ],
      fold: 0,
      foldFull: [ 1396, 1398 ]
  }, {
      code: 64276,
      lower: [ 64276 ],
      title: [ 1348, 1381 ],
      upper: [ 1348, 1333 ],
      fold: 0,
      foldFull: [ 1396, 1381 ]
  }, {
      code: 64276,
      lower: [ 64276 ],
      title: [ 1348, 1381 ],
      upper: [ 1348, 1333 ],
      fold: 0,
      foldFull: [ 1396, 1381 ]
  }, {
      code: 64277,
      lower: [ 64277 ],
      title: [ 1348, 1387 ],
      upper: [ 1348, 1339 ],
      fold: 0,
      foldFull: [ 1396, 1387 ]
  }, {
      code: 64277,
      lower: [ 64277 ],
      title: [ 1348, 1387 ],
      upper: [ 1348, 1339 ],
      fold: 0,
      foldFull: [ 1396, 1387 ]
  }, {
      code: 64278,
      lower: [ 64278 ],
      title: [ 1358, 1398 ],
      upper: [ 1358, 1350 ],
      fold: 0,
      foldFull: [ 1406, 1398 ]
  }, {
      code: 64278,
      lower: [ 64278 ],
      title: [ 1358, 1398 ],
      upper: [ 1358, 1350 ],
      fold: 0,
      foldFull: [ 1406, 1398 ]
  }, {
      code: 64279,
      lower: [ 64279 ],
      title: [ 1348, 1389 ],
      upper: [ 1348, 1341 ],
      fold: 0,
      foldFull: [ 1396, 1389 ]
  }, {
      code: 64279,
      lower: [ 64279 ],
      title: [ 1348, 1389 ],
      upper: [ 1348, 1341 ],
      fold: 0,
      foldFull: [ 1396, 1389 ]
  }, {
      code: 65313,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 65345,
      foldFull: [ 65345 ]
  }, {
      code: 65314,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 65346,
      foldFull: [ 65346 ]
  }, {
      code: 65315,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 65347,
      foldFull: [ 65347 ]
  }, {
      code: 65316,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 65348,
      foldFull: [ 65348 ]
  }, {
      code: 65317,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 65349,
      foldFull: [ 65349 ]
  }, {
      code: 65318,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 65350,
      foldFull: [ 65350 ]
  }, {
      code: 65319,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 65351,
      foldFull: [ 65351 ]
  }, {
      code: 65320,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 65352,
      foldFull: [ 65352 ]
  }, {
      code: 65321,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 65353,
      foldFull: [ 65353 ]
  }, {
      code: 65322,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 65354,
      foldFull: [ 65354 ]
  }, {
      code: 65323,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 65355,
      foldFull: [ 65355 ]
  }, {
      code: 65324,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 65356,
      foldFull: [ 65356 ]
  }, {
      code: 65325,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 65357,
      foldFull: [ 65357 ]
  }, {
      code: 65326,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 65358,
      foldFull: [ 65358 ]
  }, {
      code: 65327,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 65359,
      foldFull: [ 65359 ]
  }, {
      code: 65328,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 65360,
      foldFull: [ 65360 ]
  }, {
      code: 65329,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 65361,
      foldFull: [ 65361 ]
  }, {
      code: 65330,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 65362,
      foldFull: [ 65362 ]
  }, {
      code: 65331,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 65363,
      foldFull: [ 65363 ]
  }, {
      code: 65332,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 65364,
      foldFull: [ 65364 ]
  }, {
      code: 65333,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 65365,
      foldFull: [ 65365 ]
  }, {
      code: 65334,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 65366,
      foldFull: [ 65366 ]
  }, {
      code: 65335,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 65367,
      foldFull: [ 65367 ]
  }, {
      code: 65336,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 65368,
      foldFull: [ 65368 ]
  }, {
      code: 65337,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 65369,
      foldFull: [ 65369 ]
  }, {
      code: 65338,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 65370,
      foldFull: [ 65370 ]
  }, {
      code: 66560,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66600,
      foldFull: [ 66600 ]
  }, {
      code: 66561,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66601,
      foldFull: [ 66601 ]
  }, {
      code: 66562,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66602,
      foldFull: [ 66602 ]
  }, {
      code: 66563,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66603,
      foldFull: [ 66603 ]
  }, {
      code: 66564,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66604,
      foldFull: [ 66604 ]
  }, {
      code: 66565,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66605,
      foldFull: [ 66605 ]
  }, {
      code: 66566,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66606,
      foldFull: [ 66606 ]
  }, {
      code: 66567,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66607,
      foldFull: [ 66607 ]
  }, {
      code: 66568,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66608,
      foldFull: [ 66608 ]
  }, {
      code: 66569,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66609,
      foldFull: [ 66609 ]
  }, {
      code: 66570,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66610,
      foldFull: [ 66610 ]
  }, {
      code: 66571,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66611,
      foldFull: [ 66611 ]
  }, {
      code: 66572,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66612,
      foldFull: [ 66612 ]
  }, {
      code: 66573,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66613,
      foldFull: [ 66613 ]
  }, {
      code: 66574,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66614,
      foldFull: [ 66614 ]
  }, {
      code: 66575,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66615,
      foldFull: [ 66615 ]
  }, {
      code: 66576,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66616,
      foldFull: [ 66616 ]
  }, {
      code: 66577,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66617,
      foldFull: [ 66617 ]
  }, {
      code: 66578,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66618,
      foldFull: [ 66618 ]
  }, {
      code: 66579,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66619,
      foldFull: [ 66619 ]
  }, {
      code: 66580,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66620,
      foldFull: [ 66620 ]
  }, {
      code: 66581,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66621,
      foldFull: [ 66621 ]
  }, {
      code: 66582,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66622,
      foldFull: [ 66622 ]
  }, {
      code: 66583,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66623,
      foldFull: [ 66623 ]
  }, {
      code: 66584,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66624,
      foldFull: [ 66624 ]
  }, {
      code: 66585,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66625,
      foldFull: [ 66625 ]
  }, {
      code: 66586,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66626,
      foldFull: [ 66626 ]
  }, {
      code: 66587,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66627,
      foldFull: [ 66627 ]
  }, {
      code: 66588,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66628,
      foldFull: [ 66628 ]
  }, {
      code: 66589,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66629,
      foldFull: [ 66629 ]
  }, {
      code: 66590,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66630,
      foldFull: [ 66630 ]
  }, {
      code: 66591,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66631,
      foldFull: [ 66631 ]
  }, {
      code: 66592,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66632,
      foldFull: [ 66632 ]
  }, {
      code: 66593,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66633,
      foldFull: [ 66633 ]
  }, {
      code: 66594,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66634,
      foldFull: [ 66634 ]
  }, {
      code: 66595,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66635,
      foldFull: [ 66635 ]
  }, {
      code: 66596,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66636,
      foldFull: [ 66636 ]
  }, {
      code: 66597,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66637,
      foldFull: [ 66637 ]
  }, {
      code: 66598,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66638,
      foldFull: [ 66638 ]
  }, {
      code: 66599,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66639,
      foldFull: [ 66639 ]
  }, {
      code: 66736,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66776,
      foldFull: [ 66776 ]
  }, {
      code: 66737,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66777,
      foldFull: [ 66777 ]
  }, {
      code: 66738,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66778,
      foldFull: [ 66778 ]
  }, {
      code: 66739,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66779,
      foldFull: [ 66779 ]
  }, {
      code: 66740,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66780,
      foldFull: [ 66780 ]
  }, {
      code: 66741,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66781,
      foldFull: [ 66781 ]
  }, {
      code: 66742,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66782,
      foldFull: [ 66782 ]
  }, {
      code: 66743,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66783,
      foldFull: [ 66783 ]
  }, {
      code: 66744,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66784,
      foldFull: [ 66784 ]
  }, {
      code: 66745,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66785,
      foldFull: [ 66785 ]
  }, {
      code: 66746,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66786,
      foldFull: [ 66786 ]
  }, {
      code: 66747,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66787,
      foldFull: [ 66787 ]
  }, {
      code: 66748,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66788,
      foldFull: [ 66788 ]
  }, {
      code: 66749,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66789,
      foldFull: [ 66789 ]
  }, {
      code: 66750,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66790,
      foldFull: [ 66790 ]
  }, {
      code: 66751,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66791,
      foldFull: [ 66791 ]
  }, {
      code: 66752,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66792,
      foldFull: [ 66792 ]
  }, {
      code: 66753,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66793,
      foldFull: [ 66793 ]
  }, {
      code: 66754,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66794,
      foldFull: [ 66794 ]
  }, {
      code: 66755,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66795,
      foldFull: [ 66795 ]
  }, {
      code: 66756,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66796,
      foldFull: [ 66796 ]
  }, {
      code: 66757,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66797,
      foldFull: [ 66797 ]
  }, {
      code: 66758,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66798,
      foldFull: [ 66798 ]
  }, {
      code: 66759,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66799,
      foldFull: [ 66799 ]
  }, {
      code: 66760,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66800,
      foldFull: [ 66800 ]
  }, {
      code: 66761,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66801,
      foldFull: [ 66801 ]
  }, {
      code: 66762,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66802,
      foldFull: [ 66802 ]
  }, {
      code: 66763,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66803,
      foldFull: [ 66803 ]
  }, {
      code: 66764,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66804,
      foldFull: [ 66804 ]
  }, {
      code: 66765,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66805,
      foldFull: [ 66805 ]
  }, {
      code: 66766,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66806,
      foldFull: [ 66806 ]
  }, {
      code: 66767,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66807,
      foldFull: [ 66807 ]
  }, {
      code: 66768,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66808,
      foldFull: [ 66808 ]
  }, {
      code: 66769,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66809,
      foldFull: [ 66809 ]
  }, {
      code: 66770,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66810,
      foldFull: [ 66810 ]
  }, {
      code: 66771,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66811,
      foldFull: [ 66811 ]
  }, {
      code: 68736,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68800,
      foldFull: [ 68800 ]
  }, {
      code: 68737,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68801,
      foldFull: [ 68801 ]
  }, {
      code: 68738,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68802,
      foldFull: [ 68802 ]
  }, {
      code: 68739,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68803,
      foldFull: [ 68803 ]
  }, {
      code: 68740,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68804,
      foldFull: [ 68804 ]
  }, {
      code: 68741,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68805,
      foldFull: [ 68805 ]
  }, {
      code: 68742,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68806,
      foldFull: [ 68806 ]
  }, {
      code: 68743,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68807,
      foldFull: [ 68807 ]
  }, {
      code: 68744,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68808,
      foldFull: [ 68808 ]
  }, {
      code: 68745,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68809,
      foldFull: [ 68809 ]
  }, {
      code: 68746,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68810,
      foldFull: [ 68810 ]
  }, {
      code: 68747,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68811,
      foldFull: [ 68811 ]
  }, {
      code: 68748,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68812,
      foldFull: [ 68812 ]
  }, {
      code: 68749,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68813,
      foldFull: [ 68813 ]
  }, {
      code: 68750,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68814,
      foldFull: [ 68814 ]
  }, {
      code: 68751,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68815,
      foldFull: [ 68815 ]
  }, {
      code: 68752,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68816,
      foldFull: [ 68816 ]
  }, {
      code: 68753,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68817,
      foldFull: [ 68817 ]
  }, {
      code: 68754,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68818,
      foldFull: [ 68818 ]
  }, {
      code: 68755,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68819,
      foldFull: [ 68819 ]
  }, {
      code: 68756,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68820,
      foldFull: [ 68820 ]
  }, {
      code: 68757,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68821,
      foldFull: [ 68821 ]
  }, {
      code: 68758,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68822,
      foldFull: [ 68822 ]
  }, {
      code: 68759,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68823,
      foldFull: [ 68823 ]
  }, {
      code: 68760,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68824,
      foldFull: [ 68824 ]
  }, {
      code: 68761,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68825,
      foldFull: [ 68825 ]
  }, {
      code: 68762,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68826,
      foldFull: [ 68826 ]
  }, {
      code: 68763,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68827,
      foldFull: [ 68827 ]
  }, {
      code: 68764,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68828,
      foldFull: [ 68828 ]
  }, {
      code: 68765,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68829,
      foldFull: [ 68829 ]
  }, {
      code: 68766,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68830,
      foldFull: [ 68830 ]
  }, {
      code: 68767,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68831,
      foldFull: [ 68831 ]
  }, {
      code: 68768,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68832,
      foldFull: [ 68832 ]
  }, {
      code: 68769,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68833,
      foldFull: [ 68833 ]
  }, {
      code: 68770,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68834,
      foldFull: [ 68834 ]
  }, {
      code: 68771,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68835,
      foldFull: [ 68835 ]
  }, {
      code: 68772,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68836,
      foldFull: [ 68836 ]
  }, {
      code: 68773,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68837,
      foldFull: [ 68837 ]
  }, {
      code: 68774,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68838,
      foldFull: [ 68838 ]
  }, {
      code: 68775,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68839,
      foldFull: [ 68839 ]
  }, {
      code: 68776,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68840,
      foldFull: [ 68840 ]
  }, {
      code: 68777,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68841,
      foldFull: [ 68841 ]
  }, {
      code: 68778,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68842,
      foldFull: [ 68842 ]
  }, {
      code: 68779,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68843,
      foldFull: [ 68843 ]
  }, {
      code: 68780,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68844,
      foldFull: [ 68844 ]
  }, {
      code: 68781,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68845,
      foldFull: [ 68845 ]
  }, {
      code: 68782,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68846,
      foldFull: [ 68846 ]
  }, {
      code: 68783,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68847,
      foldFull: [ 68847 ]
  }, {
      code: 68784,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68848,
      foldFull: [ 68848 ]
  }, {
      code: 68785,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68849,
      foldFull: [ 68849 ]
  }, {
      code: 68786,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68850,
      foldFull: [ 68850 ]
  }, {
      code: 71840,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71872,
      foldFull: [ 71872 ]
  }, {
      code: 71841,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71873,
      foldFull: [ 71873 ]
  }, {
      code: 71842,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71874,
      foldFull: [ 71874 ]
  }, {
      code: 71843,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71875,
      foldFull: [ 71875 ]
  }, {
      code: 71844,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71876,
      foldFull: [ 71876 ]
  }, {
      code: 71845,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71877,
      foldFull: [ 71877 ]
  }, {
      code: 71846,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71878,
      foldFull: [ 71878 ]
  }, {
      code: 71847,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71879,
      foldFull: [ 71879 ]
  }, {
      code: 71848,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71880,
      foldFull: [ 71880 ]
  }, {
      code: 71849,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71881,
      foldFull: [ 71881 ]
  }, {
      code: 71850,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71882,
      foldFull: [ 71882 ]
  }, {
      code: 71851,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71883,
      foldFull: [ 71883 ]
  }, {
      code: 71852,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71884,
      foldFull: [ 71884 ]
  }, {
      code: 71853,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71885,
      foldFull: [ 71885 ]
  }, {
      code: 71854,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71886,
      foldFull: [ 71886 ]
  }, {
      code: 71855,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71887,
      foldFull: [ 71887 ]
  }, {
      code: 71856,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71888,
      foldFull: [ 71888 ]
  }, {
      code: 71857,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71889,
      foldFull: [ 71889 ]
  }, {
      code: 71858,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71890,
      foldFull: [ 71890 ]
  }, {
      code: 71859,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71891,
      foldFull: [ 71891 ]
  }, {
      code: 71860,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71892,
      foldFull: [ 71892 ]
  }, {
      code: 71861,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71893,
      foldFull: [ 71893 ]
  }, {
      code: 71862,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71894,
      foldFull: [ 71894 ]
  }, {
      code: 71863,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71895,
      foldFull: [ 71895 ]
  }, {
      code: 71864,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71896,
      foldFull: [ 71896 ]
  }, {
      code: 71865,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71897,
      foldFull: [ 71897 ]
  }, {
      code: 71866,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71898,
      foldFull: [ 71898 ]
  }, {
      code: 71867,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71899,
      foldFull: [ 71899 ]
  }, {
      code: 71868,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71900,
      foldFull: [ 71900 ]
  }, {
      code: 71869,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71901,
      foldFull: [ 71901 ]
  }, {
      code: 71870,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71902,
      foldFull: [ 71902 ]
  }, {
      code: 71871,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71903,
      foldFull: [ 71903 ]
  }, {
      code: 93760,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93792,
      foldFull: [ 93792 ]
  }, {
      code: 93761,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93793,
      foldFull: [ 93793 ]
  }, {
      code: 93762,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93794,
      foldFull: [ 93794 ]
  }, {
      code: 93763,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93795,
      foldFull: [ 93795 ]
  }, {
      code: 93764,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93796,
      foldFull: [ 93796 ]
  }, {
      code: 93765,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93797,
      foldFull: [ 93797 ]
  }, {
      code: 93766,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93798,
      foldFull: [ 93798 ]
  }, {
      code: 93767,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93799,
      foldFull: [ 93799 ]
  }, {
      code: 93768,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93800,
      foldFull: [ 93800 ]
  }, {
      code: 93769,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93801,
      foldFull: [ 93801 ]
  }, {
      code: 93770,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93802,
      foldFull: [ 93802 ]
  }, {
      code: 93771,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93803,
      foldFull: [ 93803 ]
  }, {
      code: 93772,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93804,
      foldFull: [ 93804 ]
  }, {
      code: 93773,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93805,
      foldFull: [ 93805 ]
  }, {
      code: 93774,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93806,
      foldFull: [ 93806 ]
  }, {
      code: 93775,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93807,
      foldFull: [ 93807 ]
  }, {
      code: 93776,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93808,
      foldFull: [ 93808 ]
  }, {
      code: 93777,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93809,
      foldFull: [ 93809 ]
  }, {
      code: 93778,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93810,
      foldFull: [ 93810 ]
  }, {
      code: 93779,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93811,
      foldFull: [ 93811 ]
  }, {
      code: 93780,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93812,
      foldFull: [ 93812 ]
  }, {
      code: 93781,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93813,
      foldFull: [ 93813 ]
  }, {
      code: 93782,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93814,
      foldFull: [ 93814 ]
  }, {
      code: 93783,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93815,
      foldFull: [ 93815 ]
  }, {
      code: 93784,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93816,
      foldFull: [ 93816 ]
  }, {
      code: 93785,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93817,
      foldFull: [ 93817 ]
  }, {
      code: 93786,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93818,
      foldFull: [ 93818 ]
  }, {
      code: 93787,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93819,
      foldFull: [ 93819 ]
  }, {
      code: 93788,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93820,
      foldFull: [ 93820 ]
  }, {
      code: 93789,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93821,
      foldFull: [ 93821 ]
  }, {
      code: 93790,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93822,
      foldFull: [ 93822 ]
  }, {
      code: 93791,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93823,
      foldFull: [ 93823 ]
  }, {
      code: 125184,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125218,
      foldFull: [ 125218 ]
  }, {
      code: 125185,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125219,
      foldFull: [ 125219 ]
  }, {
      code: 125186,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125220,
      foldFull: [ 125220 ]
  }, {
      code: 125187,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125221,
      foldFull: [ 125221 ]
  }, {
      code: 125188,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125222,
      foldFull: [ 125222 ]
  }, {
      code: 125189,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125223,
      foldFull: [ 125223 ]
  }, {
      code: 125190,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125224,
      foldFull: [ 125224 ]
  }, {
      code: 125191,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125225,
      foldFull: [ 125225 ]
  }, {
      code: 125192,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125226,
      foldFull: [ 125226 ]
  }, {
      code: 125193,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125227,
      foldFull: [ 125227 ]
  }, {
      code: 125194,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125228,
      foldFull: [ 125228 ]
  }, {
      code: 125195,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125229,
      foldFull: [ 125229 ]
  }, {
      code: 125196,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125230,
      foldFull: [ 125230 ]
  }, {
      code: 125197,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125231,
      foldFull: [ 125231 ]
  }, {
      code: 125198,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125232,
      foldFull: [ 125232 ]
  }, {
      code: 125199,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125233,
      foldFull: [ 125233 ]
  }, {
      code: 125200,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125234,
      foldFull: [ 125234 ]
  }, {
      code: 125201,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125235,
      foldFull: [ 125235 ]
  }, {
      code: 125202,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125236,
      foldFull: [ 125236 ]
  }, {
      code: 125203,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125237,
      foldFull: [ 125237 ]
  }, {
      code: 125204,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125238,
      foldFull: [ 125238 ]
  }, {
      code: 125205,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125239,
      foldFull: [ 125239 ]
  }, {
      code: 125206,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125240,
      foldFull: [ 125240 ]
  }, {
      code: 125207,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125241,
      foldFull: [ 125241 ]
  }, {
      code: 125208,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125242,
      foldFull: [ 125242 ]
  }, {
      code: 125209,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125243,
      foldFull: [ 125243 ]
  }, {
      code: 125210,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125244,
      foldFull: [ 125244 ]
  }, {
      code: 125211,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125245,
      foldFull: [ 125245 ]
  }, {
      code: 125212,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125246,
      foldFull: [ 125246 ]
  }, {
      code: 125213,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125247,
      foldFull: [ 125247 ]
  }, {
      code: 125214,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125248,
      foldFull: [ 125248 ]
  }, {
      code: 125215,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125249,
      foldFull: [ 125249 ]
  }, {
      code: 125216,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125250,
      foldFull: [ 125250 ]
  }, {
      code: 125217,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125251,
      foldFull: [ 125251 ]
  } ];
  var recCmp = function (v) {
      return function (v1) {
          return Data_Ord.compare(Data_Ord.ordInt)(v.code)(v1.code);
      };
  };
  var findRule = function (code) {
      var v = Data_CodePoint_Unicode_Internal.bsearch(zeroRec(code))(rules)(Data_Array.length(rules))(recCmp);
      if (v instanceof Data_Maybe.Nothing) {
          return zeroRec(code);
      };
      if (v instanceof Data_Maybe.Just) {
          return v.value0;
      };
      throw new Error("Failed pattern match at Data.CodePoint.Unicode.Internal.Casing (line 1628, column 17 - line 1630, column 14): " + [ v.constructor.name ]);
  };
  var lower = function (code) {
      var lowered = (findRule(code)).lower;
      var $11 = Data_Array["null"](lowered);
      if ($11) {
          return [ Data_CodePoint_Unicode_Internal.uTowlower(code) ];
      };
      return lowered;
  };
  var title = function (code) {
      var titled = (findRule(code)).title;
      var $12 = Data_Array["null"](titled);
      if ($12) {
          return [ Data_CodePoint_Unicode_Internal.uTowtitle(code) ];
      };
      return titled;
  };
  exports["lower"] = lower;
  exports["title"] = title;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.CodePoint.Unicode"] = $PS["Data.CodePoint.Unicode"] || {};
  var exports = $PS["Data.CodePoint.Unicode"];
  var Data_CodePoint_Unicode_Internal_Casing = $PS["Data.CodePoint.Unicode.Internal.Casing"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var modifyFull = Unsafe_Coerce.unsafeCoerce;
  var toLower = modifyFull(Data_CodePoint_Unicode_Internal_Casing.lower);
  var toTitle = modifyFull(Data_CodePoint_Unicode_Internal_Casing.title);
  exports["toLower"] = toLower;
  exports["toTitle"] = toTitle;
})(PS);
(function(exports) {
  "use strict";

  exports.intSub = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x - y | 0;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
  "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Semiring"] = $PS["Data.Semiring"] || {};
  var exports = $PS["Data.Semiring"];
  var $foreign = $PS["Data.Semiring"];
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };                                                                            
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  exports["semiringInt"] = semiringInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Ring"] = $PS["Data.Ring"] || {};
  var exports = $PS["Data.Ring"];
  var $foreign = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Ring = function (Semiring0, sub) {
      this.Semiring0 = Semiring0;
      this.sub = sub;
  };                  
  var ringInt = new Ring(function () {
      return Data_Semiring.semiringInt;
  }, $foreign.intSub);
  exports["ringInt"] = ringInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.CommutativeRing"] = $PS["Data.CommutativeRing"] || {};
  var exports = $PS["Data.CommutativeRing"];
  var Data_Ring = $PS["Data.Ring"];
  var CommutativeRing = function (Ring0) {
      this.Ring0 = Ring0;
  }; 
  var commutativeRingInt = new CommutativeRing(function () {
      return Data_Ring.ringInt;
  });
  exports["commutativeRingInt"] = commutativeRingInt;
})(PS);
(function(exports) {
  "use strict";

  exports.toCharCode = function (c) {
    return c.charCodeAt(0);
  };

  exports.fromCharCode = function (c) {
    return String.fromCharCode(c);
  };
})(PS["Data.Enum"] = PS["Data.Enum"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Enum"] = $PS["Data.Enum"] || {};
  var exports = $PS["Data.Enum"];
  var $foreign = $PS["Data.Enum"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];                  
  var Enum = function (Ord0, pred, succ) {
      this.Ord0 = Ord0;
      this.pred = pred;
      this.succ = succ;
  };
  var BoundedEnum = function (Bounded0, Enum1, cardinality, fromEnum, toEnum) {
      this.Bounded0 = Bounded0;
      this.Enum1 = Enum1;
      this.cardinality = cardinality;
      this.fromEnum = fromEnum;
      this.toEnum = toEnum;
  };
  var toEnum = function (dict) {
      return dict.toEnum;
  }; 
  var fromEnum = function (dict) {
      return dict.fromEnum;
  };
  var toEnumWithDefaults = function (dictBoundedEnum) {
      return function (low) {
          return function (high) {
              return function (x) {
                  var v = toEnum(dictBoundedEnum)(x);
                  if (v instanceof Data_Maybe.Just) {
                      return v.value0;
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      var $51 = x < fromEnum(dictBoundedEnum)(Data_Bounded.bottom(dictBoundedEnum.Bounded0()));
                      if ($51) {
                          return low;
                      };
                      return high;
                  };
                  throw new Error("Failed pattern match at Data.Enum (line 158, column 33 - line 160, column 62): " + [ v.constructor.name ]);
              };
          };
      };
  };
  var defaultSucc = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) + 1 | 0);
          };
      };
  };
  var defaultPred = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) - 1 | 0);
          };
      };
  };
  var charToEnum = function (v) {
      if (v >= Data_Bounded.bottom(Data_Bounded.boundedInt) && v <= Data_Bounded.top(Data_Bounded.boundedInt)) {
          return new Data_Maybe.Just($foreign.fromCharCode(v));
      };
      return Data_Maybe.Nothing.value;
  };
  var enumChar = new Enum(function () {
      return Data_Ord.ordChar;
  }, defaultPred(charToEnum)($foreign.toCharCode), defaultSucc(charToEnum)($foreign.toCharCode));
  var boundedEnumChar = new BoundedEnum(function () {
      return Data_Bounded.boundedChar;
  }, function () {
      return enumChar;
  }, $foreign.toCharCode(Data_Bounded.top(Data_Bounded.boundedChar)) - $foreign.toCharCode(Data_Bounded.bottom(Data_Bounded.boundedChar)) | 0, $foreign.toCharCode, charToEnum);
  exports["toEnum"] = toEnum;
  exports["fromEnum"] = fromEnum;
  exports["toEnumWithDefaults"] = toEnumWithDefaults;
  exports["boundedEnumChar"] = boundedEnumChar;
})(PS);
(function(exports) {
  "use strict";

  exports.intDegree = function (x) {
    return Math.min(Math.abs(x), 2147483647);
  };

  // See the Euclidean definition in
  // https://en.m.wikipedia.org/wiki/Modulo_operation.
  exports.intDiv = function (x) {
    return function (y) {
      if (y === 0) return 0;
      return y > 0 ? Math.floor(x / y) : -Math.floor(x / -y);
    };
  };

  exports.intMod = function (x) {
    return function (y) {
      if (y === 0) return 0;
      var yy = Math.abs(y);
      return ((x % yy) + yy) % yy;
    };
  };
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.EuclideanRing"] = $PS["Data.EuclideanRing"] || {};
  var exports = $PS["Data.EuclideanRing"];
  var $foreign = $PS["Data.EuclideanRing"];
  var Data_CommutativeRing = $PS["Data.CommutativeRing"];  
  var EuclideanRing = function (CommutativeRing0, degree, div, mod) {
      this.CommutativeRing0 = CommutativeRing0;
      this.degree = degree;
      this.div = div;
      this.mod = mod;
  };
  var mod = function (dict) {
      return dict.mod;
  }; 
  var euclideanRingInt = new EuclideanRing(function () {
      return Data_CommutativeRing.commutativeRingInt;
  }, $foreign.intDegree, $foreign.intDiv, $foreign.intMod);
  var div = function (dict) {
      return dict.div;
  };
  exports["div"] = div;
  exports["mod"] = mod;
  exports["euclideanRingInt"] = euclideanRingInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.GraphQL.AST"] = $PS["Data.GraphQL.AST"] || {};
  var exports = $PS["Data.GraphQL.AST"];           
  var Variable = function (x) {
      return x;
  };
  var SCHEMA = (function () {
      function SCHEMA() {

      };
      SCHEMA.value = new SCHEMA();
      return SCHEMA;
  })();
  var SCALAR = (function () {
      function SCALAR() {

      };
      SCALAR.value = new SCALAR();
      return SCALAR;
  })();
  var OBJECT = (function () {
      function OBJECT() {

      };
      OBJECT.value = new OBJECT();
      return OBJECT;
  })();
  var FIELD_DEFINITION = (function () {
      function FIELD_DEFINITION() {

      };
      FIELD_DEFINITION.value = new FIELD_DEFINITION();
      return FIELD_DEFINITION;
  })();
  var ARGUMENT_DEFINITION = (function () {
      function ARGUMENT_DEFINITION() {

      };
      ARGUMENT_DEFINITION.value = new ARGUMENT_DEFINITION();
      return ARGUMENT_DEFINITION;
  })();
  var INTERFACE = (function () {
      function INTERFACE() {

      };
      INTERFACE.value = new INTERFACE();
      return INTERFACE;
  })();
  var UNION = (function () {
      function UNION() {

      };
      UNION.value = new UNION();
      return UNION;
  })();
  var ENUM = (function () {
      function ENUM() {

      };
      ENUM.value = new ENUM();
      return ENUM;
  })();
  var ENUM_VALUE = (function () {
      function ENUM_VALUE() {

      };
      ENUM_VALUE.value = new ENUM_VALUE();
      return ENUM_VALUE;
  })();
  var INPUT_OBJECT = (function () {
      function INPUT_OBJECT() {

      };
      INPUT_OBJECT.value = new INPUT_OBJECT();
      return INPUT_OBJECT;
  })();
  var INPUT_FIELD_DEFINITION = (function () {
      function INPUT_FIELD_DEFINITION() {

      };
      INPUT_FIELD_DEFINITION.value = new INPUT_FIELD_DEFINITION();
      return INPUT_FIELD_DEFINITION;
  })();
  var StringValue = function (x) {
      return x;
  };
  var Query = (function () {
      function Query() {

      };
      Query.value = new Query();
      return Query;
  })();
  var Mutation = (function () {
      function Mutation() {

      };
      Mutation.value = new Mutation();
      return Mutation;
  })();
  var Subscription = (function () {
      function Subscription() {

      };
      Subscription.value = new Subscription();
      return Subscription;
  })();
  var NullValue = (function () {
      function NullValue() {

      };
      NullValue.value = new NullValue();
      return NullValue;
  })();
  var NamedType = function (x) {
      return x;
  };
  var OperationTypeDefinition = function (x) {
      return x;
  };
  var RootOperationTypeDefinition = function (x) {
      return x;
  };
  var TypeCondition = function (x) {
      return x;
  };
  var UnionMemberTypes = function (x) {
      return x;
  };
  var ListType = function (x) {
      return x;
  };
  var Type_NamedType = (function () {
      function Type_NamedType(value0) {
          this.value0 = value0;
      };
      Type_NamedType.create = function (value0) {
          return new Type_NamedType(value0);
      };
      return Type_NamedType;
  })();
  var Type_ListType = (function () {
      function Type_ListType(value0) {
          this.value0 = value0;
      };
      Type_ListType.create = function (value0) {
          return new Type_ListType(value0);
      };
      return Type_ListType;
  })();
  var Type_NonNullType = (function () {
      function Type_NonNullType(value0) {
          this.value0 = value0;
      };
      Type_NonNullType.create = function (value0) {
          return new Type_NonNullType(value0);
      };
      return Type_NonNullType;
  })();
  var NonNullType_NamedType = (function () {
      function NonNullType_NamedType(value0) {
          this.value0 = value0;
      };
      NonNullType_NamedType.create = function (value0) {
          return new NonNullType_NamedType(value0);
      };
      return NonNullType_NamedType;
  })();
  var NonNullType_ListType = (function () {
      function NonNullType_ListType(value0) {
          this.value0 = value0;
      };
      NonNullType_ListType.create = function (value0) {
          return new NonNullType_ListType(value0);
      };
      return NonNullType_ListType;
  })();
  var IntValue = function (x) {
      return x;
  };
  var ImplementsInterfaces = function (x) {
      return x;
  };
  var FloatValue = function (x) {
      return x;
  };
  var QUERY = (function () {
      function QUERY() {

      };
      QUERY.value = new QUERY();
      return QUERY;
  })();
  var MUTATION = (function () {
      function MUTATION() {

      };
      MUTATION.value = new MUTATION();
      return MUTATION;
  })();
  var SUBSCRIPTION = (function () {
      function SUBSCRIPTION() {

      };
      SUBSCRIPTION.value = new SUBSCRIPTION();
      return SUBSCRIPTION;
  })();
  var FIELD = (function () {
      function FIELD() {

      };
      FIELD.value = new FIELD();
      return FIELD;
  })();
  var FRAGMENT_DEFINITION = (function () {
      function FRAGMENT_DEFINITION() {

      };
      FRAGMENT_DEFINITION.value = new FRAGMENT_DEFINITION();
      return FRAGMENT_DEFINITION;
  })();
  var FRAGMENT_SPREAD = (function () {
      function FRAGMENT_SPREAD() {

      };
      FRAGMENT_SPREAD.value = new FRAGMENT_SPREAD();
      return FRAGMENT_SPREAD;
  })();
  var INLINE_FRAGMENT = (function () {
      function INLINE_FRAGMENT() {

      };
      INLINE_FRAGMENT.value = new INLINE_FRAGMENT();
      return INLINE_FRAGMENT;
  })();
  var EnumValue = function (x) {
      return x;
  };
  var DirectiveLocation_ExecutableDirectiveLocation = (function () {
      function DirectiveLocation_ExecutableDirectiveLocation(value0) {
          this.value0 = value0;
      };
      DirectiveLocation_ExecutableDirectiveLocation.create = function (value0) {
          return new DirectiveLocation_ExecutableDirectiveLocation(value0);
      };
      return DirectiveLocation_ExecutableDirectiveLocation;
  })();
  var DirectiveLocation_TypeSystemDirectiveLocation = (function () {
      function DirectiveLocation_TypeSystemDirectiveLocation(value0) {
          this.value0 = value0;
      };
      DirectiveLocation_TypeSystemDirectiveLocation.create = function (value0) {
          return new DirectiveLocation_TypeSystemDirectiveLocation(value0);
      };
      return DirectiveLocation_TypeSystemDirectiveLocation;
  })();
  var DirectiveLocations = function (x) {
      return x;
  };
  var BooleanValue = function (x) {
      return x;
  };
  var Argument = function (x) {
      return x;
  };
  var Value_Variable = (function () {
      function Value_Variable(value0) {
          this.value0 = value0;
      };
      Value_Variable.create = function (value0) {
          return new Value_Variable(value0);
      };
      return Value_Variable;
  })();
  var Value_IntValue = (function () {
      function Value_IntValue(value0) {
          this.value0 = value0;
      };
      Value_IntValue.create = function (value0) {
          return new Value_IntValue(value0);
      };
      return Value_IntValue;
  })();
  var Value_FloatValue = (function () {
      function Value_FloatValue(value0) {
          this.value0 = value0;
      };
      Value_FloatValue.create = function (value0) {
          return new Value_FloatValue(value0);
      };
      return Value_FloatValue;
  })();
  var Value_StringValue = (function () {
      function Value_StringValue(value0) {
          this.value0 = value0;
      };
      Value_StringValue.create = function (value0) {
          return new Value_StringValue(value0);
      };
      return Value_StringValue;
  })();
  var Value_BooleanValue = (function () {
      function Value_BooleanValue(value0) {
          this.value0 = value0;
      };
      Value_BooleanValue.create = function (value0) {
          return new Value_BooleanValue(value0);
      };
      return Value_BooleanValue;
  })();
  var Value_NullValue = (function () {
      function Value_NullValue(value0) {
          this.value0 = value0;
      };
      Value_NullValue.create = function (value0) {
          return new Value_NullValue(value0);
      };
      return Value_NullValue;
  })();
  var Value_EnumValue = (function () {
      function Value_EnumValue(value0) {
          this.value0 = value0;
      };
      Value_EnumValue.create = function (value0) {
          return new Value_EnumValue(value0);
      };
      return Value_EnumValue;
  })();
  var Value_ListValue = (function () {
      function Value_ListValue(value0) {
          this.value0 = value0;
      };
      Value_ListValue.create = function (value0) {
          return new Value_ListValue(value0);
      };
      return Value_ListValue;
  })();
  var Value_ObjectValue = (function () {
      function Value_ObjectValue(value0) {
          this.value0 = value0;
      };
      Value_ObjectValue.create = function (value0) {
          return new Value_ObjectValue(value0);
      };
      return Value_ObjectValue;
  })();
  var ListValue = function (x) {
      return x;
  };
  var ObjectValue = function (x) {
      return x;
  };
  var Arguments = function (x) {
      return x;
  };
  var Directive = function (x) {
      return x;
  };
  var Directives = function (x) {
      return x;
  };
  var EnumValueDefinition = function (x) {
      return x;
  };
  var EnumValuesDefinition = function (x) {
      return x;
  };
  var EnumTypeDefinition = function (x) {
      return x;
  };
  var EnumTypeExtension_With_EnumValuesDefinition = (function () {
      function EnumTypeExtension_With_EnumValuesDefinition(value0) {
          this.value0 = value0;
      };
      EnumTypeExtension_With_EnumValuesDefinition.create = function (value0) {
          return new EnumTypeExtension_With_EnumValuesDefinition(value0);
      };
      return EnumTypeExtension_With_EnumValuesDefinition;
  })();
  var EnumTypeExtension_With_Directives = (function () {
      function EnumTypeExtension_With_Directives(value0) {
          this.value0 = value0;
      };
      EnumTypeExtension_With_Directives.create = function (value0) {
          return new EnumTypeExtension_With_Directives(value0);
      };
      return EnumTypeExtension_With_Directives;
  })();
  var FragmentSpread = function (x) {
      return x;
  };
  var ScalarTypeDefinition = function (x) {
      return x;
  };
  var ScalarTypeExtension = function (x) {
      return x;
  };
  var SchemaDefinition = function (x) {
      return x;
  };
  var SchemaExtension_With_OperationTypeDefinition = (function () {
      function SchemaExtension_With_OperationTypeDefinition(value0) {
          this.value0 = value0;
      };
      SchemaExtension_With_OperationTypeDefinition.create = function (value0) {
          return new SchemaExtension_With_OperationTypeDefinition(value0);
      };
      return SchemaExtension_With_OperationTypeDefinition;
  })();
  var SchemaExtension_With_Directives = (function () {
      function SchemaExtension_With_Directives(value0) {
          this.value0 = value0;
      };
      SchemaExtension_With_Directives.create = function (value0) {
          return new SchemaExtension_With_Directives(value0);
      };
      return SchemaExtension_With_Directives;
  })();
  var UnionTypeDefinition = function (x) {
      return x;
  };
  var UnionTypeExtension_With_UnionMemberTypes = (function () {
      function UnionTypeExtension_With_UnionMemberTypes(value0) {
          this.value0 = value0;
      };
      UnionTypeExtension_With_UnionMemberTypes.create = function (value0) {
          return new UnionTypeExtension_With_UnionMemberTypes(value0);
      };
      return UnionTypeExtension_With_UnionMemberTypes;
  })();
  var UnionTypeExtension_With_Directives = (function () {
      function UnionTypeExtension_With_Directives(value0) {
          this.value0 = value0;
      };
      UnionTypeExtension_With_Directives.create = function (value0) {
          return new UnionTypeExtension_With_Directives(value0);
      };
      return UnionTypeExtension_With_Directives;
  })();
  var SelectionSet = function (x) {
      return x;
  };
  var Selection_Field = (function () {
      function Selection_Field(value0) {
          this.value0 = value0;
      };
      Selection_Field.create = function (value0) {
          return new Selection_Field(value0);
      };
      return Selection_Field;
  })();
  var Selection_FragmentSpread = (function () {
      function Selection_FragmentSpread(value0) {
          this.value0 = value0;
      };
      Selection_FragmentSpread.create = function (value0) {
          return new Selection_FragmentSpread(value0);
      };
      return Selection_FragmentSpread;
  })();
  var Selection_InlineFragment = (function () {
      function Selection_InlineFragment(value0) {
          this.value0 = value0;
      };
      Selection_InlineFragment.create = function (value0) {
          return new Selection_InlineFragment(value0);
      };
      return Selection_InlineFragment;
  })();
  var Field = function (x) {
      return x;
  };
  var InlineFragment = function (x) {
      return x;
  };
  var FragmentDefinition = function (x) {
      return x;
  };
  var DefaultValue = function (x) {
      return x;
  };
  var InputValueDefinition = function (x) {
      return x;
  };
  var ArgumentsDefinition = function (x) {
      return x;
  };
  var DirectiveDefinition = function (x) {
      return x;
  };
  var FieldDefinition = function (x) {
      return x;
  };
  var FieldsDefinition = function (x) {
      return x;
  };
  var InterfaceTypeDefinition = function (x) {
      return x;
  };
  var InterfaceTypeExtension_With_FieldsDefinition = (function () {
      function InterfaceTypeExtension_With_FieldsDefinition(value0) {
          this.value0 = value0;
      };
      InterfaceTypeExtension_With_FieldsDefinition.create = function (value0) {
          return new InterfaceTypeExtension_With_FieldsDefinition(value0);
      };
      return InterfaceTypeExtension_With_FieldsDefinition;
  })();
  var InterfaceTypeExtension_With_Directives = (function () {
      function InterfaceTypeExtension_With_Directives(value0) {
          this.value0 = value0;
      };
      InterfaceTypeExtension_With_Directives.create = function (value0) {
          return new InterfaceTypeExtension_With_Directives(value0);
      };
      return InterfaceTypeExtension_With_Directives;
  })();
  var ObjectTypeDefinition = function (x) {
      return x;
  };
  var ObjectTypeExtension_With_FieldsDefinition = (function () {
      function ObjectTypeExtension_With_FieldsDefinition(value0) {
          this.value0 = value0;
      };
      ObjectTypeExtension_With_FieldsDefinition.create = function (value0) {
          return new ObjectTypeExtension_With_FieldsDefinition(value0);
      };
      return ObjectTypeExtension_With_FieldsDefinition;
  })();
  var ObjectTypeExtension_With_Directives = (function () {
      function ObjectTypeExtension_With_Directives(value0) {
          this.value0 = value0;
      };
      ObjectTypeExtension_With_Directives.create = function (value0) {
          return new ObjectTypeExtension_With_Directives(value0);
      };
      return ObjectTypeExtension_With_Directives;
  })();
  var ObjectTypeExtension_With_ImplementsInterfaces = (function () {
      function ObjectTypeExtension_With_ImplementsInterfaces(value0) {
          this.value0 = value0;
      };
      ObjectTypeExtension_With_ImplementsInterfaces.create = function (value0) {
          return new ObjectTypeExtension_With_ImplementsInterfaces(value0);
      };
      return ObjectTypeExtension_With_ImplementsInterfaces;
  })();
  var InputFieldsDefinition = function (x) {
      return x;
  };
  var InputObjectTypeDefinition = function (x) {
      return x;
  };
  var TypeDefinition_ScalarTypeDefinition = (function () {
      function TypeDefinition_ScalarTypeDefinition(value0) {
          this.value0 = value0;
      };
      TypeDefinition_ScalarTypeDefinition.create = function (value0) {
          return new TypeDefinition_ScalarTypeDefinition(value0);
      };
      return TypeDefinition_ScalarTypeDefinition;
  })();
  var TypeDefinition_ObjectTypeDefinition = (function () {
      function TypeDefinition_ObjectTypeDefinition(value0) {
          this.value0 = value0;
      };
      TypeDefinition_ObjectTypeDefinition.create = function (value0) {
          return new TypeDefinition_ObjectTypeDefinition(value0);
      };
      return TypeDefinition_ObjectTypeDefinition;
  })();
  var TypeDefinition_InterfaceTypeDefinition = (function () {
      function TypeDefinition_InterfaceTypeDefinition(value0) {
          this.value0 = value0;
      };
      TypeDefinition_InterfaceTypeDefinition.create = function (value0) {
          return new TypeDefinition_InterfaceTypeDefinition(value0);
      };
      return TypeDefinition_InterfaceTypeDefinition;
  })();
  var TypeDefinition_UnionTypeDefinition = (function () {
      function TypeDefinition_UnionTypeDefinition(value0) {
          this.value0 = value0;
      };
      TypeDefinition_UnionTypeDefinition.create = function (value0) {
          return new TypeDefinition_UnionTypeDefinition(value0);
      };
      return TypeDefinition_UnionTypeDefinition;
  })();
  var TypeDefinition_EnumTypeDefinition = (function () {
      function TypeDefinition_EnumTypeDefinition(value0) {
          this.value0 = value0;
      };
      TypeDefinition_EnumTypeDefinition.create = function (value0) {
          return new TypeDefinition_EnumTypeDefinition(value0);
      };
      return TypeDefinition_EnumTypeDefinition;
  })();
  var TypeDefinition_InputObjectTypeDefinition = (function () {
      function TypeDefinition_InputObjectTypeDefinition(value0) {
          this.value0 = value0;
      };
      TypeDefinition_InputObjectTypeDefinition.create = function (value0) {
          return new TypeDefinition_InputObjectTypeDefinition(value0);
      };
      return TypeDefinition_InputObjectTypeDefinition;
  })();
  var TypeSystemDefinition_SchemaDefinition = (function () {
      function TypeSystemDefinition_SchemaDefinition(value0) {
          this.value0 = value0;
      };
      TypeSystemDefinition_SchemaDefinition.create = function (value0) {
          return new TypeSystemDefinition_SchemaDefinition(value0);
      };
      return TypeSystemDefinition_SchemaDefinition;
  })();
  var TypeSystemDefinition_TypeDefinition = (function () {
      function TypeSystemDefinition_TypeDefinition(value0) {
          this.value0 = value0;
      };
      TypeSystemDefinition_TypeDefinition.create = function (value0) {
          return new TypeSystemDefinition_TypeDefinition(value0);
      };
      return TypeSystemDefinition_TypeDefinition;
  })();
  var TypeSystemDefinition_DirectiveDefinition = (function () {
      function TypeSystemDefinition_DirectiveDefinition(value0) {
          this.value0 = value0;
      };
      TypeSystemDefinition_DirectiveDefinition.create = function (value0) {
          return new TypeSystemDefinition_DirectiveDefinition(value0);
      };
      return TypeSystemDefinition_DirectiveDefinition;
  })();
  var InputObjectTypeExtension_With_InputFieldsDefinition = (function () {
      function InputObjectTypeExtension_With_InputFieldsDefinition(value0) {
          this.value0 = value0;
      };
      InputObjectTypeExtension_With_InputFieldsDefinition.create = function (value0) {
          return new InputObjectTypeExtension_With_InputFieldsDefinition(value0);
      };
      return InputObjectTypeExtension_With_InputFieldsDefinition;
  })();
  var InputObjectTypeExtension_With_Directives = (function () {
      function InputObjectTypeExtension_With_Directives(value0) {
          this.value0 = value0;
      };
      InputObjectTypeExtension_With_Directives.create = function (value0) {
          return new InputObjectTypeExtension_With_Directives(value0);
      };
      return InputObjectTypeExtension_With_Directives;
  })();
  var TypeExtension_ScalarTypeExtension = (function () {
      function TypeExtension_ScalarTypeExtension(value0) {
          this.value0 = value0;
      };
      TypeExtension_ScalarTypeExtension.create = function (value0) {
          return new TypeExtension_ScalarTypeExtension(value0);
      };
      return TypeExtension_ScalarTypeExtension;
  })();
  var TypeExtension_ObjectTypeExtension = (function () {
      function TypeExtension_ObjectTypeExtension(value0) {
          this.value0 = value0;
      };
      TypeExtension_ObjectTypeExtension.create = function (value0) {
          return new TypeExtension_ObjectTypeExtension(value0);
      };
      return TypeExtension_ObjectTypeExtension;
  })();
  var TypeExtension_InterfaceTypeExtension = (function () {
      function TypeExtension_InterfaceTypeExtension(value0) {
          this.value0 = value0;
      };
      TypeExtension_InterfaceTypeExtension.create = function (value0) {
          return new TypeExtension_InterfaceTypeExtension(value0);
      };
      return TypeExtension_InterfaceTypeExtension;
  })();
  var TypeExtension_UnionTypeExtension = (function () {
      function TypeExtension_UnionTypeExtension(value0) {
          this.value0 = value0;
      };
      TypeExtension_UnionTypeExtension.create = function (value0) {
          return new TypeExtension_UnionTypeExtension(value0);
      };
      return TypeExtension_UnionTypeExtension;
  })();
  var TypeExtension_EnumTypeExtension = (function () {
      function TypeExtension_EnumTypeExtension(value0) {
          this.value0 = value0;
      };
      TypeExtension_EnumTypeExtension.create = function (value0) {
          return new TypeExtension_EnumTypeExtension(value0);
      };
      return TypeExtension_EnumTypeExtension;
  })();
  var TypeExtension_InputObjectTypeExtension = (function () {
      function TypeExtension_InputObjectTypeExtension(value0) {
          this.value0 = value0;
      };
      TypeExtension_InputObjectTypeExtension.create = function (value0) {
          return new TypeExtension_InputObjectTypeExtension(value0);
      };
      return TypeExtension_InputObjectTypeExtension;
  })();
  var TypeSystemExtension_SchemaExtension = (function () {
      function TypeSystemExtension_SchemaExtension(value0) {
          this.value0 = value0;
      };
      TypeSystemExtension_SchemaExtension.create = function (value0) {
          return new TypeSystemExtension_SchemaExtension(value0);
      };
      return TypeSystemExtension_SchemaExtension;
  })();
  var TypeSystemExtension_TypeExtension = (function () {
      function TypeSystemExtension_TypeExtension(value0) {
          this.value0 = value0;
      };
      TypeSystemExtension_TypeExtension.create = function (value0) {
          return new TypeSystemExtension_TypeExtension(value0);
      };
      return TypeSystemExtension_TypeExtension;
  })();
  var VariableDefinition = function (x) {
      return x;
  };
  var VariableDefinitions = function (x) {
      return x;
  };
  var OperationDefinition_SelectionSet = (function () {
      function OperationDefinition_SelectionSet(value0) {
          this.value0 = value0;
      };
      OperationDefinition_SelectionSet.create = function (value0) {
          return new OperationDefinition_SelectionSet(value0);
      };
      return OperationDefinition_SelectionSet;
  })();
  var OperationDefinition_OperationType = (function () {
      function OperationDefinition_OperationType(value0) {
          this.value0 = value0;
      };
      OperationDefinition_OperationType.create = function (value0) {
          return new OperationDefinition_OperationType(value0);
      };
      return OperationDefinition_OperationType;
  })();
  var ExecutableDefinition_OperationDefinition = (function () {
      function ExecutableDefinition_OperationDefinition(value0) {
          this.value0 = value0;
      };
      ExecutableDefinition_OperationDefinition.create = function (value0) {
          return new ExecutableDefinition_OperationDefinition(value0);
      };
      return ExecutableDefinition_OperationDefinition;
  })();
  var ExecutableDefinition_FragmentDefinition = (function () {
      function ExecutableDefinition_FragmentDefinition(value0) {
          this.value0 = value0;
      };
      ExecutableDefinition_FragmentDefinition.create = function (value0) {
          return new ExecutableDefinition_FragmentDefinition(value0);
      };
      return ExecutableDefinition_FragmentDefinition;
  })();
  var Definition_ExecutableDefinition = (function () {
      function Definition_ExecutableDefinition(value0) {
          this.value0 = value0;
      };
      Definition_ExecutableDefinition.create = function (value0) {
          return new Definition_ExecutableDefinition(value0);
      };
      return Definition_ExecutableDefinition;
  })();
  var Definition_TypeSystemDefinition = (function () {
      function Definition_TypeSystemDefinition(value0) {
          this.value0 = value0;
      };
      Definition_TypeSystemDefinition.create = function (value0) {
          return new Definition_TypeSystemDefinition(value0);
      };
      return Definition_TypeSystemDefinition;
  })();
  var Definition_TypeSystemExtension = (function () {
      function Definition_TypeSystemExtension(value0) {
          this.value0 = value0;
      };
      Definition_TypeSystemExtension.create = function (value0) {
          return new Definition_TypeSystemExtension(value0);
      };
      return Definition_TypeSystemExtension;
  })();
  var Document = function (x) {
      return x;
  };
  exports["Document"] = Document;
  exports["Definition_ExecutableDefinition"] = Definition_ExecutableDefinition;
  exports["Definition_TypeSystemDefinition"] = Definition_TypeSystemDefinition;
  exports["Definition_TypeSystemExtension"] = Definition_TypeSystemExtension;
  exports["ExecutableDefinition_OperationDefinition"] = ExecutableDefinition_OperationDefinition;
  exports["ExecutableDefinition_FragmentDefinition"] = ExecutableDefinition_FragmentDefinition;
  exports["OperationDefinition_SelectionSet"] = OperationDefinition_SelectionSet;
  exports["OperationDefinition_OperationType"] = OperationDefinition_OperationType;
  exports["Query"] = Query;
  exports["Mutation"] = Mutation;
  exports["Subscription"] = Subscription;
  exports["SelectionSet"] = SelectionSet;
  exports["Selection_Field"] = Selection_Field;
  exports["Selection_FragmentSpread"] = Selection_FragmentSpread;
  exports["Selection_InlineFragment"] = Selection_InlineFragment;
  exports["Field"] = Field;
  exports["Arguments"] = Arguments;
  exports["Argument"] = Argument;
  exports["FragmentSpread"] = FragmentSpread;
  exports["InlineFragment"] = InlineFragment;
  exports["FragmentDefinition"] = FragmentDefinition;
  exports["TypeCondition"] = TypeCondition;
  exports["Value_Variable"] = Value_Variable;
  exports["Value_IntValue"] = Value_IntValue;
  exports["Value_FloatValue"] = Value_FloatValue;
  exports["Value_StringValue"] = Value_StringValue;
  exports["Value_BooleanValue"] = Value_BooleanValue;
  exports["Value_NullValue"] = Value_NullValue;
  exports["Value_EnumValue"] = Value_EnumValue;
  exports["Value_ListValue"] = Value_ListValue;
  exports["Value_ObjectValue"] = Value_ObjectValue;
  exports["IntValue"] = IntValue;
  exports["FloatValue"] = FloatValue;
  exports["BooleanValue"] = BooleanValue;
  exports["StringValue"] = StringValue;
  exports["NullValue"] = NullValue;
  exports["EnumValue"] = EnumValue;
  exports["ListValue"] = ListValue;
  exports["ObjectValue"] = ObjectValue;
  exports["VariableDefinitions"] = VariableDefinitions;
  exports["VariableDefinition"] = VariableDefinition;
  exports["Variable"] = Variable;
  exports["DefaultValue"] = DefaultValue;
  exports["Type_NamedType"] = Type_NamedType;
  exports["Type_ListType"] = Type_ListType;
  exports["Type_NonNullType"] = Type_NonNullType;
  exports["NamedType"] = NamedType;
  exports["ListType"] = ListType;
  exports["NonNullType_NamedType"] = NonNullType_NamedType;
  exports["NonNullType_ListType"] = NonNullType_ListType;
  exports["Directives"] = Directives;
  exports["Directive"] = Directive;
  exports["TypeSystemDefinition_SchemaDefinition"] = TypeSystemDefinition_SchemaDefinition;
  exports["TypeSystemDefinition_TypeDefinition"] = TypeSystemDefinition_TypeDefinition;
  exports["TypeSystemDefinition_DirectiveDefinition"] = TypeSystemDefinition_DirectiveDefinition;
  exports["TypeSystemExtension_SchemaExtension"] = TypeSystemExtension_SchemaExtension;
  exports["TypeSystemExtension_TypeExtension"] = TypeSystemExtension_TypeExtension;
  exports["SchemaDefinition"] = SchemaDefinition;
  exports["RootOperationTypeDefinition"] = RootOperationTypeDefinition;
  exports["SchemaExtension_With_OperationTypeDefinition"] = SchemaExtension_With_OperationTypeDefinition;
  exports["SchemaExtension_With_Directives"] = SchemaExtension_With_Directives;
  exports["OperationTypeDefinition"] = OperationTypeDefinition;
  exports["TypeDefinition_ScalarTypeDefinition"] = TypeDefinition_ScalarTypeDefinition;
  exports["TypeDefinition_ObjectTypeDefinition"] = TypeDefinition_ObjectTypeDefinition;
  exports["TypeDefinition_InterfaceTypeDefinition"] = TypeDefinition_InterfaceTypeDefinition;
  exports["TypeDefinition_UnionTypeDefinition"] = TypeDefinition_UnionTypeDefinition;
  exports["TypeDefinition_EnumTypeDefinition"] = TypeDefinition_EnumTypeDefinition;
  exports["TypeDefinition_InputObjectTypeDefinition"] = TypeDefinition_InputObjectTypeDefinition;
  exports["TypeExtension_ScalarTypeExtension"] = TypeExtension_ScalarTypeExtension;
  exports["TypeExtension_ObjectTypeExtension"] = TypeExtension_ObjectTypeExtension;
  exports["TypeExtension_InterfaceTypeExtension"] = TypeExtension_InterfaceTypeExtension;
  exports["TypeExtension_UnionTypeExtension"] = TypeExtension_UnionTypeExtension;
  exports["TypeExtension_EnumTypeExtension"] = TypeExtension_EnumTypeExtension;
  exports["TypeExtension_InputObjectTypeExtension"] = TypeExtension_InputObjectTypeExtension;
  exports["ScalarTypeDefinition"] = ScalarTypeDefinition;
  exports["ScalarTypeExtension"] = ScalarTypeExtension;
  exports["ObjectTypeDefinition"] = ObjectTypeDefinition;
  exports["ObjectTypeExtension_With_FieldsDefinition"] = ObjectTypeExtension_With_FieldsDefinition;
  exports["ObjectTypeExtension_With_Directives"] = ObjectTypeExtension_With_Directives;
  exports["ObjectTypeExtension_With_ImplementsInterfaces"] = ObjectTypeExtension_With_ImplementsInterfaces;
  exports["ImplementsInterfaces"] = ImplementsInterfaces;
  exports["FieldsDefinition"] = FieldsDefinition;
  exports["FieldDefinition"] = FieldDefinition;
  exports["ArgumentsDefinition"] = ArgumentsDefinition;
  exports["InputValueDefinition"] = InputValueDefinition;
  exports["InterfaceTypeDefinition"] = InterfaceTypeDefinition;
  exports["InterfaceTypeExtension_With_FieldsDefinition"] = InterfaceTypeExtension_With_FieldsDefinition;
  exports["InterfaceTypeExtension_With_Directives"] = InterfaceTypeExtension_With_Directives;
  exports["UnionTypeDefinition"] = UnionTypeDefinition;
  exports["UnionMemberTypes"] = UnionMemberTypes;
  exports["UnionTypeExtension_With_UnionMemberTypes"] = UnionTypeExtension_With_UnionMemberTypes;
  exports["UnionTypeExtension_With_Directives"] = UnionTypeExtension_With_Directives;
  exports["EnumTypeDefinition"] = EnumTypeDefinition;
  exports["EnumValuesDefinition"] = EnumValuesDefinition;
  exports["EnumValueDefinition"] = EnumValueDefinition;
  exports["EnumTypeExtension_With_EnumValuesDefinition"] = EnumTypeExtension_With_EnumValuesDefinition;
  exports["EnumTypeExtension_With_Directives"] = EnumTypeExtension_With_Directives;
  exports["InputObjectTypeDefinition"] = InputObjectTypeDefinition;
  exports["InputFieldsDefinition"] = InputFieldsDefinition;
  exports["InputObjectTypeExtension_With_InputFieldsDefinition"] = InputObjectTypeExtension_With_InputFieldsDefinition;
  exports["InputObjectTypeExtension_With_Directives"] = InputObjectTypeExtension_With_Directives;
  exports["DirectiveDefinition"] = DirectiveDefinition;
  exports["DirectiveLocations"] = DirectiveLocations;
  exports["DirectiveLocation_ExecutableDirectiveLocation"] = DirectiveLocation_ExecutableDirectiveLocation;
  exports["DirectiveLocation_TypeSystemDirectiveLocation"] = DirectiveLocation_TypeSystemDirectiveLocation;
  exports["QUERY"] = QUERY;
  exports["MUTATION"] = MUTATION;
  exports["SUBSCRIPTION"] = SUBSCRIPTION;
  exports["FIELD"] = FIELD;
  exports["FRAGMENT_DEFINITION"] = FRAGMENT_DEFINITION;
  exports["FRAGMENT_SPREAD"] = FRAGMENT_SPREAD;
  exports["INLINE_FRAGMENT"] = INLINE_FRAGMENT;
  exports["SCHEMA"] = SCHEMA;
  exports["SCALAR"] = SCALAR;
  exports["OBJECT"] = OBJECT;
  exports["FIELD_DEFINITION"] = FIELD_DEFINITION;
  exports["ARGUMENT_DEFINITION"] = ARGUMENT_DEFINITION;
  exports["INTERFACE"] = INTERFACE;
  exports["UNION"] = UNION;
  exports["ENUM"] = ENUM;
  exports["ENUM_VALUE"] = ENUM_VALUE;
  exports["INPUT_OBJECT"] = INPUT_OBJECT;
  exports["INPUT_FIELD_DEFINITION"] = INPUT_FIELD_DEFINITION;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.List.Internal"] = $PS["Data.List.Internal"] || {};
  var exports = $PS["Data.List.Internal"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Ordering = $PS["Data.Ordering"];                
  var Leaf = (function () {
      function Leaf() {

      };
      Leaf.value = new Leaf();
      return Leaf;
  })();
  var Two = (function () {
      function Two(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Two.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Two(value0, value1, value2);
              };
          };
      };
      return Two;
  })();
  var Three = (function () {
      function Three(value0, value1, value2, value3, value4) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
      };
      Three.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return new Three(value0, value1, value2, value3, value4);
                      };
                  };
              };
          };
      };
      return Three;
  })();
  var TwoLeft = (function () {
      function TwoLeft(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TwoLeft.create = function (value0) {
          return function (value1) {
              return new TwoLeft(value0, value1);
          };
      };
      return TwoLeft;
  })();
  var TwoRight = (function () {
      function TwoRight(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TwoRight.create = function (value0) {
          return function (value1) {
              return new TwoRight(value0, value1);
          };
      };
      return TwoRight;
  })();
  var ThreeLeft = (function () {
      function ThreeLeft(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      ThreeLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new ThreeLeft(value0, value1, value2, value3);
                  };
              };
          };
      };
      return ThreeLeft;
  })();
  var ThreeMiddle = (function () {
      function ThreeMiddle(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      ThreeMiddle.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new ThreeMiddle(value0, value1, value2, value3);
                  };
              };
          };
      };
      return ThreeMiddle;
  })();
  var ThreeRight = (function () {
      function ThreeRight(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      ThreeRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new ThreeRight(value0, value1, value2, value3);
                  };
              };
          };
      };
      return ThreeRight;
  })();
  var KickUp = (function () {
      function KickUp(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      KickUp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new KickUp(value0, value1, value2);
              };
          };
      };
      return KickUp;
  })();
  var fromZipper = function ($copy_v) {
      return function ($copy_tree) {
          var $tco_var_v = $copy_v;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v, tree) {
              if (v instanceof Data_List_Types.Nil) {
                  $tco_done = true;
                  return tree;
              };
              if (v instanceof Data_List_Types.Cons) {
                  if (v.value0 instanceof TwoLeft) {
                      $tco_var_v = v.value1;
                      $copy_tree = new Two(tree, v.value0.value0, v.value0.value1);
                      return;
                  };
                  if (v.value0 instanceof TwoRight) {
                      $tco_var_v = v.value1;
                      $copy_tree = new Two(v.value0.value0, v.value0.value1, tree);
                      return;
                  };
                  if (v.value0 instanceof ThreeLeft) {
                      $tco_var_v = v.value1;
                      $copy_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3);
                      return;
                  };
                  if (v.value0 instanceof ThreeMiddle) {
                      $tco_var_v = v.value1;
                      $copy_tree = new Three(v.value0.value0, v.value0.value1, tree, v.value0.value2, v.value0.value3);
                      return;
                  };
                  if (v.value0 instanceof ThreeRight) {
                      $tco_var_v = v.value1;
                      $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, tree);
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Internal (line 25, column 3 - line 30, column 76): " + [ v.value0.constructor.name ]);
              };
              throw new Error("Failed pattern match at Data.List.Internal (line 22, column 1 - line 22, column 63): " + [ v.constructor.name, tree.constructor.name ]);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_v, $copy_tree);
          };
          return $tco_result;
      };
  };
  var insertAndLookupBy = function (comp) {
      return function (k) {
          return function (orig) {
              var up = function ($copy_v) {
                  return function ($copy_v1) {
                      var $tco_var_v = $copy_v;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(v, v1) {
                          if (v instanceof Data_List_Types.Nil) {
                              $tco_done = true;
                              return new Two(v1.value0, v1.value1, v1.value2);
                          };
                          if (v instanceof Data_List_Types.Cons) {
                              if (v.value0 instanceof TwoLeft) {
                                  $tco_done = true;
                                  return fromZipper(v.value1)(new Three(v1.value0, v1.value1, v1.value2, v.value0.value0, v.value0.value1));
                              };
                              if (v.value0 instanceof TwoRight) {
                                  $tco_done = true;
                                  return fromZipper(v.value1)(new Three(v.value0.value0, v.value0.value1, v1.value0, v1.value1, v1.value2));
                              };
                              if (v.value0 instanceof ThreeLeft) {
                                  $tco_var_v = v.value1;
                                  $copy_v1 = new KickUp(new Two(v1.value0, v1.value1, v1.value2), v.value0.value0, new Two(v.value0.value1, v.value0.value2, v.value0.value3));
                                  return;
                              };
                              if (v.value0 instanceof ThreeMiddle) {
                                  $tco_var_v = v.value1;
                                  $copy_v1 = new KickUp(new Two(v.value0.value0, v.value0.value1, v1.value0), v1.value1, new Two(v1.value2, v.value0.value2, v.value0.value3));
                                  return;
                              };
                              if (v.value0 instanceof ThreeRight) {
                                  $tco_var_v = v.value1;
                                  $copy_v1 = new KickUp(new Two(v.value0.value0, v.value0.value1, v.value0.value2), v.value0.value3, new Two(v1.value0, v1.value1, v1.value2));
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.List.Internal (line 58, column 5 - line 63, column 90): " + [ v.value0.constructor.name, v1.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Data.List.Internal (line 55, column 3 - line 55, column 50): " + [ v.constructor.name, v1.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_v, $copy_v1);
                      };
                      return $tco_result;
                  };
              };
              var down = function ($copy_ctx) {
                  return function ($copy_v) {
                      var $tco_var_ctx = $copy_ctx;
                      var $tco_done1 = false;
                      var $tco_result;
                      function $tco_loop(ctx, v) {
                          if (v instanceof Leaf) {
                              $tco_done1 = true;
                              return {
                                  found: false,
                                  result: up(ctx)(new KickUp(Leaf.value, k, Leaf.value))
                              };
                          };
                          if (v instanceof Two) {
                              var v1 = comp(k)(v.value1);
                              if (v1 instanceof Data_Ordering.EQ) {
                                  $tco_done1 = true;
                                  return {
                                      found: true,
                                      result: orig
                                  };
                              };
                              if (v1 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(v.value1, v.value2), ctx);
                                  $copy_v = v.value0;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(v.value0, v.value1), ctx);
                              $copy_v = v.value2;
                              return;
                          };
                          if (v instanceof Three) {
                              var v1 = comp(k)(v.value1);
                              if (v1 instanceof Data_Ordering.EQ) {
                                  $tco_done1 = true;
                                  return {
                                      found: true,
                                      result: orig
                                  };
                              };
                              var v2 = comp(k)(v.value3);
                              if (v2 instanceof Data_Ordering.EQ) {
                                  $tco_done1 = true;
                                  return {
                                      found: true,
                                      result: orig
                                  };
                              };
                              if (v1 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(v.value1, v.value2, v.value3, v.value4), ctx);
                                  $copy_v = v.value0;
                                  return;
                              };
                              if (v1 instanceof Data_Ordering.GT && v2 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(v.value0, v.value1, v.value3, v.value4), ctx);
                                  $copy_v = v.value2;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(v.value0, v.value1, v.value2, v.value3), ctx);
                              $copy_v = v.value4;
                              return;
                          };
                          throw new Error("Failed pattern match at Data.List.Internal (line 38, column 3 - line 38, column 81): " + [ ctx.constructor.name, v.constructor.name ]);
                      };
                      while (!$tco_done1) {
                          $tco_result = $tco_loop($tco_var_ctx, $copy_v);
                      };
                      return $tco_result;
                  };
              };
              return down(Data_List_Types.Nil.value)(orig);
          };
      };
  };
  var emptySet = Leaf.value;
  exports["emptySet"] = emptySet;
  exports["insertAndLookupBy"] = insertAndLookupBy;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.List"] = $PS["Data.List"] || {};
  var exports = $PS["Data.List"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_Internal = $PS["Data.List.Internal"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var singleton = function (a) {
      return new Data_List_Types.Cons(a, Data_List_Types.Nil.value);
  };
  var sortBy = function (cmp) {
      var merge = function (v) {
          return function (v1) {
              if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                  if (Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v1.value0))(Data_Ordering.GT.value)) {
                      return new Data_List_Types.Cons(v1.value0, merge(v)(v1.value1));
                  };
                  if (Data_Boolean.otherwise) {
                      return new Data_List_Types.Cons(v.value0, merge(v.value1)(v1));
                  };
              };
              if (v instanceof Data_List_Types.Nil) {
                  return v1;
              };
              if (v1 instanceof Data_List_Types.Nil) {
                  return v;
              };
              throw new Error("Failed pattern match at Data.List (line 477, column 3 - line 477, column 38): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
      var mergePairs = function (v) {
          if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Cons) {
              return new Data_List_Types.Cons(merge(v.value0)(v.value1.value0), mergePairs(v.value1.value1));
          };
          return v;
      };
      var mergeAll = function ($copy_v) {
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v) {
              if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
                  $tco_done = true;
                  return v.value0;
              };
              $copy_v = mergePairs(v);
              return;
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($copy_v);
          };
          return $tco_result;
      };
      var sequences = function (v) {
          if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Cons) {
              if (Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v.value1.value0))(Data_Ordering.GT.value)) {
                  return descending(v.value1.value0)(singleton(v.value0))(v.value1.value1);
              };
              if (Data_Boolean.otherwise) {
                  return ascending(v.value1.value0)(function (v1) {
                      return new Data_List_Types.Cons(v.value0, v1);
                  })(v.value1.value1);
              };
          };
          return singleton(v);
      };
      var descending = function ($copy_a) {
          return function ($copy_as) {
              return function ($copy_v) {
                  var $tco_var_a = $copy_a;
                  var $tco_var_as = $copy_as;
                  var $tco_done1 = false;
                  var $tco_result;
                  function $tco_loop(a, as, v) {
                      if (v instanceof Data_List_Types.Cons && Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(a)(v.value0))(Data_Ordering.GT.value)) {
                          $tco_var_a = v.value0;
                          $tco_var_as = new Data_List_Types.Cons(a, as);
                          $copy_v = v.value1;
                          return;
                      };
                      $tco_done1 = true;
                      return new Data_List_Types.Cons(new Data_List_Types.Cons(a, as), sequences(v));
                  };
                  while (!$tco_done1) {
                      $tco_result = $tco_loop($tco_var_a, $tco_var_as, $copy_v);
                  };
                  return $tco_result;
              };
          };
      };
      var ascending = function ($copy_a) {
          return function ($copy_as) {
              return function ($copy_v) {
                  var $tco_var_a = $copy_a;
                  var $tco_var_as = $copy_as;
                  var $tco_done2 = false;
                  var $tco_result;
                  function $tco_loop(a, as, v) {
                      if (v instanceof Data_List_Types.Cons && Data_Eq.notEq(Data_Ordering.eqOrdering)(cmp(a)(v.value0))(Data_Ordering.GT.value)) {
                          $tco_var_a = v.value0;
                          $tco_var_as = function (ys) {
                              return as(new Data_List_Types.Cons(a, ys));
                          };
                          $copy_v = v.value1;
                          return;
                      };
                      $tco_done2 = true;
                      return new Data_List_Types.Cons(as(singleton(a)), sequences(v));
                  };
                  while (!$tco_done2) {
                      $tco_result = $tco_loop($tco_var_a, $tco_var_as, $copy_v);
                  };
                  return $tco_result;
              };
          };
      };
      return function ($344) {
          return mergeAll(sequences($344));
      };
  };
  var sort = function (dictOrd) {
      return function (xs) {
          return sortBy(Data_Ord.compare(dictOrd))(xs);
      };
  };
  var reverse = (function () {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return acc;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List (line 372, column 3 - line 372, column 19): " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  })();
  var nubBy = function (p) {
      var go = function ($copy_v) {
          return function ($copy_acc) {
              return function ($copy_v1) {
                  var $tco_var_v = $copy_v;
                  var $tco_var_acc = $copy_acc;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(v, acc, v1) {
                      if (v1 instanceof Data_List_Types.Nil) {
                          $tco_done = true;
                          return acc;
                      };
                      if (v1 instanceof Data_List_Types.Cons) {
                          var v2 = Data_List_Internal.insertAndLookupBy(p)(v1.value0)(v);
                          if (v2.found) {
                              $tco_var_v = v2.result;
                              $tco_var_acc = acc;
                              $copy_v1 = v1.value1;
                              return;
                          };
                          $tco_var_v = v2.result;
                          $tco_var_acc = new Data_List_Types.Cons(v1.value0, acc);
                          $copy_v1 = v1.value1;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.List (line 689, column 5 - line 689, column 23): " + [ v.constructor.name, acc.constructor.name, v1.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_v, $tco_var_acc, $copy_v1);
                  };
                  return $tco_result;
              };
          };
      };
      var $345 = go(Data_List_Internal.emptySet)(Data_List_Types.Nil.value);
      return function ($346) {
          return reverse($345($346));
      };
  };
  var nub = function (dictOrd) {
      return nubBy(Data_Ord.compare(dictOrd));
  };                                                                                          
  var mapMaybe = function (f) {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return reverse(acc);
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      var v1 = f(v.value0);
                      if (v1 instanceof Data_Maybe.Nothing) {
                          $tco_var_acc = acc;
                          $copy_v = v.value1;
                          return;
                      };
                      if (v1 instanceof Data_Maybe.Just) {
                          $tco_var_acc = new Data_List_Types.Cons(v1.value0, acc);
                          $copy_v = v.value1;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.List (line 423, column 5 - line 425, column 32): " + [ v1.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.List (line 421, column 3 - line 421, column 27): " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  };
  var some = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Apply.apply((dictAlternative.Applicative0()).Apply0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())(Data_List_Types.Cons.create)(v))(Control_Lazy.defer(dictLazy)(function (v1) {
                  return many(dictAlternative)(dictLazy)(v);
              }));
          };
      };
  };
  var many = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Alt.alt((dictAlternative.Plus1()).Alt0())(some(dictAlternative)(dictLazy)(v))(Control_Applicative.pure(dictAlternative.Applicative0())(Data_List_Types.Nil.value));
          };
      };
  };
  var fromFoldable = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(Data_List_Types.Cons.create)(Data_List_Types.Nil.value);
  };
  exports["fromFoldable"] = fromFoldable;
  exports["singleton"] = singleton;
  exports["many"] = many;
  exports["mapMaybe"] = mapMaybe;
  exports["sort"] = sort;
  exports["nub"] = nub;
})(PS);
(function(exports) {
  "use strict";
  /* global Symbol */

  var hasArrayFrom = typeof Array.from === "function";
  var hasStringIterator =
    typeof Symbol !== "undefined" &&
    Symbol != null &&
    typeof Symbol.iterator !== "undefined" &&
    typeof String.prototype[Symbol.iterator] === "function";
  var hasFromCodePoint = typeof String.prototype.fromCodePoint === "function";
  var hasCodePointAt = typeof String.prototype.codePointAt === "function";

  exports._unsafeCodePointAt0 = function (fallback) {
    return hasCodePointAt
      ? function (str) { return str.codePointAt(0); }
      : fallback;
  };

  exports._countPrefix = function (fallback) {
    return function (unsafeCodePointAt0) {
      if (hasStringIterator) {
        return function (pred) {
          return function (str) {
            var iter = str[Symbol.iterator]();
            for (var cpCount = 0; ; ++cpCount) {
              var o = iter.next();
              if (o.done) return cpCount;
              var cp = unsafeCodePointAt0(o.value);
              if (!pred(cp)) return cpCount;
            }
          };
        };
      }
      return fallback;
    };
  };

  exports._fromCodePointArray = function (singleton) {
    return hasFromCodePoint
      ? function (cps) {
        // Function.prototype.apply will fail for very large second parameters,
        // so we don't use it for arrays with 10,000 or more entries.
        if (cps.length < 10e3) {
          return String.fromCodePoint.apply(String, cps);
        }
        return cps.map(singleton).join("");
      }
      : function (cps) {
        return cps.map(singleton).join("");
      };
  };

  exports._singleton = function (fallback) {
    return hasFromCodePoint ? String.fromCodePoint : fallback;
  };

  exports._take = function (fallback) {
    return function (n) {
      if (hasStringIterator) {
        return function (str) {
          var accum = "";
          var iter = str[Symbol.iterator]();
          for (var i = 0; i < n; ++i) {
            var o = iter.next();
            if (o.done) return accum;
            accum += o.value;
          }
          return accum;
        };
      }
      return fallback(n);
    };
  };

  exports._toCodePointArray = function (fallback) {
    return function (unsafeCodePointAt0) {
      if (hasArrayFrom) {
        return function (str) {
          return Array.from(str, unsafeCodePointAt0);
        };
      }
      return fallback;
    };
  };
})(PS["Data.String.CodePoints"] = PS["Data.String.CodePoints"] || {});
(function(exports) {
  "use strict";

  exports.fromCharArray = function (a) {
    return a.join("");
  };

  exports.singleton = function (c) {
    return c;
  };

  exports._charAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (s) {
          return i >= 0 && i < s.length ? just(s.charAt(i)) : nothing;
        };
      };
    };
  };

  exports.length = function (s) {
    return s.length;
  };

  exports._indexOf = function (just) {
    return function (nothing) {
      return function (x) {
        return function (s) {
          var i = s.indexOf(x);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };

  exports.drop = function (n) {
    return function (s) {
      return s.substring(n);
    };
  };

  exports.splitAt = function (i) {
    return function (s) {
      return { before: s.substring(0, i), after: s.substring(i) };
    };
  };
})(PS["Data.String.CodeUnits"] = PS["Data.String.CodeUnits"] || {});
(function(exports) {
  "use strict";

  exports.charAt = function (i) {
    return function (s) {
      if (i >= 0 && i < s.length) return s.charAt(i);
      throw new Error("Data.String.Unsafe.charAt: Invalid index.");
    };
  };
})(PS["Data.String.Unsafe"] = PS["Data.String.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.String.Unsafe"] = $PS["Data.String.Unsafe"] || {};
  var exports = $PS["Data.String.Unsafe"];
  var $foreign = $PS["Data.String.Unsafe"];
  exports["charAt"] = $foreign.charAt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.String.CodeUnits"] = $PS["Data.String.CodeUnits"] || {};
  var exports = $PS["Data.String.CodeUnits"];
  var $foreign = $PS["Data.String.CodeUnits"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_String_Unsafe = $PS["Data.String.Unsafe"];                
  var uncons = function (v) {
      if (v === "") {
          return Data_Maybe.Nothing.value;
      };
      return new Data_Maybe.Just({
          head: Data_String_Unsafe.charAt(0)(v),
          tail: $foreign.drop(1)(v)
      });
  };
  var stripPrefix = function (v) {
      return function (str) {
          var v1 = $foreign.splitAt($foreign.length(v))(str);
          var $15 = v1.before === v;
          if ($15) {
              return new Data_Maybe.Just(v1.after);
          };
          return Data_Maybe.Nothing.value;
      };
  };                                                                                                   
  var indexOf = $foreign["_indexOf"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var contains = function (pat) {
      var $20 = indexOf(pat);
      return function ($21) {
          return Data_Maybe.isJust($20($21));
      };
  };
  var charAt = $foreign["_charAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["stripPrefix"] = stripPrefix;
  exports["contains"] = contains;
  exports["uncons"] = uncons;
  exports["singleton"] = $foreign.singleton;
  exports["fromCharArray"] = $foreign.fromCharArray;
  exports["length"] = $foreign.length;
  exports["drop"] = $foreign.drop;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.String.CodePoints"] = $PS["Data.String.CodePoints"] || {};
  var exports = $PS["Data.String.CodePoints"];
  var $foreign = $PS["Data.String.CodePoints"];
  var Data_Array = $PS["Data.Array"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Unsafe = $PS["Data.String.Unsafe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];                
  var CodePoint = function (x) {
      return x;
  };
  var unsurrogate = function (lead) {
      return function (trail) {
          return (((lead - 55296 | 0) * 1024 | 0) + (trail - 56320 | 0) | 0) + 65536 | 0;
      };
  }; 
  var isTrail = function (cu) {
      return 56320 <= cu && cu <= 57343;
  };
  var isLead = function (cu) {
      return 55296 <= cu && cu <= 56319;
  };
  var uncons = function (s) {
      var v = Data_String_CodeUnits.length(s);
      if (v === 0) {
          return Data_Maybe.Nothing.value;
      };
      if (v === 1) {
          return new Data_Maybe.Just({
              head: Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s)),
              tail: ""
          });
      };
      var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $21 = isLead(cu0) && isTrail(cu1);
      if ($21) {
          return new Data_Maybe.Just({
              head: unsurrogate(cu0)(cu1),
              tail: Data_String_CodeUnits.drop(2)(s)
          });
      };
      return new Data_Maybe.Just({
          head: cu0,
          tail: Data_String_CodeUnits.drop(1)(s)
      });
  };
  var unconsButWithTuple = function (s) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return new Data_Tuple.Tuple(v.head, v.tail);
      })(uncons(s));
  };
  var toCodePointArrayFallback = function (s) {
      return Data_Unfoldable.unfoldr(Data_Unfoldable.unfoldableArray)(unconsButWithTuple)(s);
  };
  var unsafeCodePointAt0Fallback = function (s) {
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $25 = isLead(cu0) && Data_String_CodeUnits.length(s) > 1;
      if ($25) {
          var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
          var $26 = isTrail(cu1);
          if ($26) {
              return unsurrogate(cu0)(cu1);
          };
          return cu0;
      };
      return cu0;
  };
  var unsafeCodePointAt0 = $foreign["_unsafeCodePointAt0"](unsafeCodePointAt0Fallback);
  var toCodePointArray = $foreign["_toCodePointArray"](toCodePointArrayFallback)(unsafeCodePointAt0);
  var length = function ($52) {
      return Data_Array.length(toCodePointArray($52));
  };
  var fromCharCode = (function () {
      var $53 = Data_Enum.toEnumWithDefaults(Data_Enum.boundedEnumChar)(Data_Bounded.bottom(Data_Bounded.boundedChar))(Data_Bounded.top(Data_Bounded.boundedChar));
      return function ($54) {
          return Data_String_CodeUnits.singleton($53($54));
      };
  })();
  var singletonFallback = function (v) {
      if (v <= 65535) {
          return fromCharCode(v);
      };
      var lead = Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 55296 | 0;
      var trail = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 56320 | 0;
      return fromCharCode(lead) + fromCharCode(trail);
  };
  var fromCodePointArray = $foreign["_fromCodePointArray"](singletonFallback);
  var singleton = $foreign["_singleton"](singletonFallback);
  var takeFallback = function (n) {
      return function (v) {
          if (n < 1) {
              return "";
          };
          var v1 = uncons(v);
          if (v1 instanceof Data_Maybe.Just) {
              return singleton(v1.value0.head) + takeFallback(n - 1 | 0)(v1.value0.tail);
          };
          return v;
      };
  };
  var take = $foreign["_take"](takeFallback);
  var eqCodePoint = new Data_Eq.Eq(function (x) {
      return function (y) {
          return x === y;
      };
  });
  var drop = function (n) {
      return function (s) {
          return Data_String_CodeUnits.drop(Data_String_CodeUnits.length(take(n)(s)))(s);
      };
  };
  var countTail = function ($copy_p) {
      return function ($copy_s) {
          return function ($copy_accum) {
              var $tco_var_p = $copy_p;
              var $tco_var_s = $copy_s;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(p, s, accum) {
                  var v = uncons(s);
                  if (v instanceof Data_Maybe.Just) {
                      var $39 = p(v.value0.head);
                      if ($39) {
                          $tco_var_p = p;
                          $tco_var_s = v.value0.tail;
                          $copy_accum = accum + 1 | 0;
                          return;
                      };
                      $tco_done = true;
                      return accum;
                  };
                  $tco_done = true;
                  return accum;
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_p, $tco_var_s, $copy_accum);
              };
              return $tco_result;
          };
      };
  };
  var countFallback = function (p) {
      return function (s) {
          return countTail(p)(s)(0);
      };
  };
  var countPrefix = $foreign["_countPrefix"](countFallback)(unsafeCodePointAt0);
  var takeWhile = function (p) {
      return function (s) {
          return take(countPrefix(p)(s))(s);
      };
  };
  var codePointFromChar = (function () {
      var $55 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar);
      return function ($56) {
          return CodePoint($55($56));
      };
  })();
  exports["codePointFromChar"] = codePointFromChar;
  exports["singleton"] = singleton;
  exports["fromCodePointArray"] = fromCodePointArray;
  exports["toCodePointArray"] = toCodePointArray;
  exports["uncons"] = uncons;
  exports["take"] = take;
  exports["takeWhile"] = takeWhile;
  exports["drop"] = drop;
  exports["eqCodePoint"] = eqCodePoint;
})(PS);
(function(exports) {
  "use strict";

  exports.split = function (sep) {
    return function (s) {
      return s.split(sep);
    };
  };

  exports.toUpper = function (s) {
    return s.toUpperCase();
  };

  exports.joinWith = function (s) {
    return function (xs) {
      return xs.join(s);
    };
  };
})(PS["Data.String.Common"] = PS["Data.String.Common"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.String.Common"] = $PS["Data.String.Common"] || {};
  var exports = $PS["Data.String.Common"];
  var $foreign = $PS["Data.String.Common"];                
  var $$null = function (s) {
      return s === "";
  };
  exports["null"] = $$null;
  exports["split"] = $foreign.split;
  exports["toUpper"] = $foreign.toUpper;
  exports["joinWith"] = $foreign.joinWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Text.Parsing.Parser.Pos"] = $PS["Text.Parsing.Parser.Pos"] || {};
  var exports = $PS["Text.Parsing.Parser.Pos"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_String_Common = $PS["Data.String.Common"];
  var updatePosString = function (pos$prime) {
      return function (str) {
          var updatePosChar = function (v) {
              return function (c) {
                  if (c === "\x0a") {
                      return {
                          line: v.line + 1 | 0,
                          column: 1
                      };
                  };
                  if (c === "\x0d") {
                      return {
                          line: v.line + 1 | 0,
                          column: 1
                      };
                  };
                  if (c === "\x09") {
                      return {
                          line: v.line,
                          column: (v.column + 8 | 0) - Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(v.column - 1 | 0)(8) | 0
                      };
                  };
                  return {
                      line: v.line,
                      column: v.column + 1 | 0
                  };
              };
          };
          return Data_Foldable.foldl(Data_Foldable.foldableArray)(updatePosChar)(pos$prime)(Data_String_Common.split(Data_Newtype.wrap()(""))(str));
      };
  }; 
  var initialPos = {
      line: 1,
      column: 1
  };
  exports["initialPos"] = initialPos;
  exports["updatePosString"] = updatePosString;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Text.Parsing.Parser"] = $PS["Text.Parsing.Parser"] || {};
  var exports = $PS["Text.Parsing.Parser"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Alternative = $PS["Control.Alternative"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = $PS["Control.Monad.State.Trans"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Either = $PS["Data.Either"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Text_Parsing_Parser_Pos = $PS["Text.Parsing.Parser.Pos"];                
  var ParseState = (function () {
      function ParseState(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      ParseState.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new ParseState(value0, value1, value2);
              };
          };
      };
      return ParseState;
  })();
  var ParseError = (function () {
      function ParseError(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ParseError.create = function (value0) {
          return function (value1) {
              return new ParseError(value0, value1);
          };
      };
      return ParseError;
  })();
  var ParserT = function (x) {
      return x;
  };
  var parseErrorMessage = function (v) {
      return v.value0;
  }; 
  var runParserT = function (dictMonad) {
      return function (s) {
          return function (p) {
              var initialState = new ParseState(s, Text_Parsing_Parser_Pos.initialPos, false);
              return Control_Monad_State_Trans.evalStateT(((dictMonad.Bind1()).Apply0()).Functor0())(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap()(p)))(initialState);
          };
      };
  };
  var runParser = function (s) {
      var $88 = Data_Newtype.unwrap();
      var $89 = runParserT(Data_Identity.monadIdentity)(s);
      return function ($90) {
          return $88($89($90));
      };
  }; 
  var monadThrowParserT = function (dictMonad) {
      return Control_Monad_Except_Trans.monadThrowExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
  };
  var monadStateParserT = function (dictMonad) {
      return Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(dictMonad));
  };
  var position = function (dictMonad) {
      return Control_Monad_State_Class.gets(monadStateParserT(dictMonad))(function (v) {
          return v.value1;
      });
  };   
  var lazyParserT = new Control_Lazy.Lazy(function (f) {
      return Control_Lazy.defer(Control_Monad_State_Trans.lazyStateT)((function () {
          var $96 = Data_Newtype.unwrap();
          return function ($97) {
              return Control_Monad_Except_Trans.runExceptT($96(f($97)));
          };
      })());
  });                           
  var functorParserT = function (dictFunctor) {
      return Control_Monad_Except_Trans.functorExceptT(Control_Monad_State_Trans.functorStateT(dictFunctor));
  };
  var failWithPosition = function (dictMonad) {
      return function (message) {
          return function (pos) {
              return Control_Monad_Error_Class.throwError(monadThrowParserT(dictMonad))(new ParseError(message, pos));
          };
      };
  };
  var bindParserT = function (dictMonad) {
      return Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
  };
  var fail = function (dictMonad) {
      return function (message) {
          return Control_Bind.bindFlipped(bindParserT(dictMonad))(failWithPosition(dictMonad)(message))(position(dictMonad));
      };
  };
  var applyParserT = function (dictMonad) {
      return Control_Monad_Except_Trans.applyExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
  };
  var applicativeParserT = function (dictMonad) {
      return Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
  };
  var altParserT = function (dictMonad) {
      return new Control_Alt.Alt(function () {
          return functorParserT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, function (p1) {
          return function (p2) {
              return ParserT(Control_Monad_Except_Trans.ExceptT(Control_Monad_State_Trans.StateT(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap()(p1)))(new ParseState(v.value0, v.value1, false)))(function (v1) {
                      if (v1.value0 instanceof Data_Either.Left && !v1.value1.value2) {
                          return Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap()(p2)))(v);
                      };
                      return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0, v1.value1));
                  });
              })));
          };
      });
  };
  var plusParserT = function (dictMonad) {
      return new Control_Plus.Plus(function () {
          return altParserT(dictMonad);
      }, fail(dictMonad)("No alternative"));
  };
  var alternativeParserT = function (dictMonad) {
      return new Control_Alternative.Alternative(function () {
          return applicativeParserT(dictMonad);
      }, function () {
          return plusParserT(dictMonad);
      });
  };
  exports["ParseError"] = ParseError;
  exports["parseErrorMessage"] = parseErrorMessage;
  exports["ParseState"] = ParseState;
  exports["ParserT"] = ParserT;
  exports["runParser"] = runParser;
  exports["fail"] = fail;
  exports["lazyParserT"] = lazyParserT;
  exports["functorParserT"] = functorParserT;
  exports["applyParserT"] = applyParserT;
  exports["applicativeParserT"] = applicativeParserT;
  exports["bindParserT"] = bindParserT;
  exports["monadStateParserT"] = monadStateParserT;
  exports["altParserT"] = altParserT;
  exports["alternativeParserT"] = alternativeParserT;
})(PS);
(function($PS) {
  
  // | Combinators for creating parsers.
  // |
  // | ### Notes
  // |
  // | A few of the known combinators from Parsec are missing in this module. That
  // | is because they have already been defined in other libraries.
  // |
  // | ```purescript
  // | Text.Parsec.many  = Data.(Array|List).many
  // | Text.Parsec.many1 = Data.(Array|List).some
  // | Text.Parsec.(<|>) = Control.Alt.alt (<|>)
  // | ```
  // |
  // | Because Strings are not Char Arrays in PureScript `many` and `some` on Char Parsers need to
  // | be used in conjunction with `Data.String.CodeUnits.fromCharArray` to achieve "Parsec-like" results.
  // |
  // | ```purescript
  // | Text.Parsec.many  (char 'x') <=> fromCharArray <$> Data.Array.many (char 'x')
  // | ```
  // |
  // | Note that `Data.(Array|List).(many|some)` are not stack safe. If you need to parse
  // | large numbers of items then consider using `Data.List.(manyRec|someRec)` instead.
  "use strict";
  $PS["Text.Parsing.Parser.Combinators"] = $PS["Text.Parsing.Parser.Combinators"] || {};
  var exports = $PS["Text.Parsing.Parser.Combinators"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Control_Monad_State_Trans = $PS["Control.Monad.State.Trans"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List = $PS["Data.List"];
  var Data_List_NonEmpty = $PS["Data.List.NonEmpty"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];                

  // | Provide an error message in the case of failure.
  var withErrorMessage = function (dictMonad) {
      return function (p) {
          return function (msg) {
              return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(p)(Text_Parsing_Parser.fail(dictMonad)("Expected " + msg));
          };
      };
  };

  // | Like `try`, but will reannotate the error location to the `try` point.
  var tryRethrow = function (dictMonad) {
      return function (p) {
          return Text_Parsing_Parser.ParserT(Control_Monad_Except_Trans.ExceptT(Control_Monad_State_Trans.StateT(function (v) {
              return Control_Bind.bind(dictMonad.Bind1())(Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap()(p)))(v))(function (v1) {
                  if (v1.value0 instanceof Data_Either.Left) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(new Data_Either.Left(new Text_Parsing_Parser.ParseError(v1.value0.value0.value0, v.value1)), new Text_Parsing_Parser.ParseState(v1.value1.value0, v1.value1.value1, v.value2)));
                  };
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0, v1.value1));
              });
          })));
      };
  };

  // | In case of failure, reset the stream to the unconsumed state.
  var $$try = function (dictMonad) {
      return function (p) {
          return Text_Parsing_Parser.ParserT(Control_Monad_Except_Trans.ExceptT(Control_Monad_State_Trans.StateT(function (v) {
              return Control_Bind.bind(dictMonad.Bind1())(Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap()(p)))(v))(function (v1) {
                  if (v1.value0 instanceof Data_Either.Left) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0, new Text_Parsing_Parser.ParseState(v1.value1.value0, v1.value1.value1, v.value2)));
                  };
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0, v1.value1));
              });
          })));
      };
  };

  // | Parse phrases delimited by a separator, requiring at least one match.
  var sepBy1 = function (dictMonad) {
      return function (p) {
          return function (sep) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(p)(function (a) {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Data_List.many(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(sep)(p)))(function (as) {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_List_NonEmpty["cons'"](a)(as));
                  });
              });
          };
      };
  };

  // | Optionally parse something, failing quietly.
  var optional = function (dictMonad) {
      return function (p) {
          return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Data_Functor["void"](Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(p))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_Unit.unit));
      };
  };

  // | Provide a default result in the case where a parser fails without consuming input.
  var option = function (dictMonad) {
      return function (a) {
          return function (p) {
              return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(p)(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(a));
          };
      };
  };

  // | Parse a phrase, without modifying the consumed state or stream position.
  var lookAhead = function (dictMonad) {
      return function (p) {
          return Text_Parsing_Parser.ParserT(Control_Monad_Except_Trans.ExceptT(Control_Monad_State_Trans.StateT(function (s) {
              return Control_Bind.bind(dictMonad.Bind1())(Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap()(p)))(s))(function (v) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v.value0, s));
              });
          })));
      };
  };

  // | Wrap a parser with opening and closing markers.
  // |
  // | For example:
  // |
  // | ```purescript
  // | parens = between (string "(") (string ")")
  // | ```
  var between = function (dictMonad) {
      return function (open) {
          return function (close) {
              return function (p) {
                  return Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(dictMonad))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(open)(p))(close);
              };
          };
      };
  };
  exports["withErrorMessage"] = withErrorMessage;
  exports["between"] = between;
  exports["option"] = option;
  exports["optional"] = optional;
  exports["try"] = $$try;
  exports["tryRethrow"] = tryRethrow;
  exports["lookAhead"] = lookAhead;
  exports["sepBy1"] = sepBy1;
})(PS);
(function(exports) {
  "use strict";

  exports.showCharImpl = function (c) {
    var code = c.charCodeAt(0);
    if (code < 0x20 || code === 0x7F) {
      switch (c) {
        case "\x07": return "'\\a'";
        case "\b": return "'\\b'";
        case "\f": return "'\\f'";
        case "\n": return "'\\n'";
        case "\r": return "'\\r'";
        case "\t": return "'\\t'";
        case "\v": return "'\\v'";
      }
      return "'\\" + code.toString(10) + "'";
    }
    return c === "'" || c === "\\" ? "'\\" + c + "'" : "'" + c + "'";
  };

  exports.showStringImpl = function (s) {
    var l = s.length;
    return "\"" + s.replace(
      /[\0-\x1F\x7F"\\]/g, // eslint-disable-line no-control-regex
      function (c, i) {
        switch (c) {
          case "\"":
          case "\\":
            return "\\" + c;
          case "\x07": return "\\a";
          case "\b": return "\\b";
          case "\f": return "\\f";
          case "\n": return "\\n";
          case "\r": return "\\r";
          case "\t": return "\\t";
          case "\v": return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
      }
    ) + "\"";
  };

  exports.showArrayImpl = function (f) {
    return function (xs) {
      var ss = [];
      for (var i = 0, l = xs.length; i < l; i++) {
        ss[i] = f(xs[i]);
      }
      return "[" + ss.join(",") + "]";
    };
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];
  var Show = function (show) {
      this.show = show;
  };
  var showString = new Show($foreign.showStringImpl);
  var showChar = new Show($foreign.showCharImpl);
  var show = function (dict) {
      return dict.show;
  };
  var showArray = function (dictShow) {
      return new Show($foreign.showArrayImpl(show(dictShow)));
  };
  exports["show"] = show;
  exports["showChar"] = showChar;
  exports["showString"] = showString;
  exports["showArray"] = showArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Text.Parsing.Parser.String"] = $PS["Text.Parsing.Parser.String"] || {};
  var exports = $PS["Text.Parsing.Parser.String"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_Combinators = $PS["Text.Parsing.Parser.Combinators"];
  var Text_Parsing_Parser_Pos = $PS["Text.Parsing.Parser.Pos"];                
  var StringLike = function (drop, $$null, stripPrefix, uncons) {
      this.drop = drop;
      this["null"] = $$null;
      this.stripPrefix = stripPrefix;
      this.uncons = uncons;
  };
  var uncons = function (dict) {
      return dict.uncons;
  };
  var stripPrefix = function (dict) {
      return dict.stripPrefix;
  };
  var stringLikeString = new StringLike(Data_String_CodePoints.drop, Data_String_Common["null"], Data_String_CodeUnits.stripPrefix, Data_String_CodeUnits.uncons);
  var string = function (dictStringLike) {
      return function (dictMonad) {
          return function (str) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.gets(Text_Parsing_Parser.monadStateParserT(dictMonad))(function (v) {
                  return v.value0;
              }))(function (input) {
                  var v = stripPrefix(dictStringLike)(Data_Newtype.wrap()(str))(input);
                  if (v instanceof Data_Maybe.Just) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.modify_(Text_Parsing_Parser.monadStateParserT(dictMonad))(function (v1) {
                          return new Text_Parsing_Parser.ParseState(v.value0, Text_Parsing_Parser_Pos.updatePosString(v1.value1)(str), true);
                      }))(function () {
                          return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(str);
                      });
                  };
                  return Text_Parsing_Parser.fail(dictMonad)("Expected " + Data_Show.show(Data_Show.showString)(str));
              });
          };
      };
  };
  var drop = function (dict) {
      return dict.drop;
  };
  var anyChar = function (dictStringLike) {
      return function (dictMonad) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.gets(Text_Parsing_Parser.monadStateParserT(dictMonad))(function (v) {
              return v.value0;
          }))(function (input) {
              var v = uncons(dictStringLike)(input);
              if (v instanceof Data_Maybe.Nothing) {
                  return Text_Parsing_Parser.fail(dictMonad)("Unexpected EOF");
              };
              if (v instanceof Data_Maybe.Just) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.modify_(Text_Parsing_Parser.monadStateParserT(dictMonad))(function (v1) {
                      return new Text_Parsing_Parser.ParseState(v.value0.tail, Text_Parsing_Parser_Pos.updatePosString(v1.value1)(Data_String_CodeUnits.singleton(v.value0.head)), true);
                  }))(function () {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(v.value0.head);
                  });
              };
              throw new Error("Failed pattern match at Text.Parsing.Parser.String (line 56, column 3 - line 63, column 16): " + [ v.constructor.name ]);
          });
      };
  };
  var satisfy = function (dictStringLike) {
      return function (dictMonad) {
          return function (f) {
              return Text_Parsing_Parser_Combinators.tryRethrow(dictMonad)(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(anyChar(dictStringLike)(dictMonad))(function (c) {
                  var $52 = f(c);
                  if ($52) {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(c);
                  };
                  return Text_Parsing_Parser.fail(dictMonad)("Character '" + (Data_String_CodeUnits.singleton(c) + "' did not satisfy predicate"));
              }));
          };
      };
  };
  var $$char = function (dictStringLike) {
      return function (dictMonad) {
          return function (c) {
              return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(satisfy(dictStringLike)(dictMonad)(function (v) {
                  return v === c;
              }))(Data_Show.show(Data_Show.showChar)(c));
          };
      };
  };
  var noneOf = function (dictStringLike) {
      return function (dictMonad) {
          return function (ss) {
              return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(satisfy(dictStringLike)(dictMonad)(Data_Function.flip(Data_Foldable.notElem(Data_Foldable.foldableArray)(Data_Eq.eqChar))(ss)))("none of " + Data_Show.show(Data_Show.showArray(Data_Show.showChar))(ss));
          };
      };
  };
  var oneOf = function (dictStringLike) {
      return function (dictMonad) {
          return function (ss) {
              return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(satisfy(dictStringLike)(dictMonad)(Data_Function.flip(Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqChar))(ss)))("one of " + Data_Show.show(Data_Show.showArray(Data_Show.showChar))(ss));
          };
      };
  };
  exports["string"] = string;
  exports["anyChar"] = anyChar;
  exports["char"] = $$char;
  exports["oneOf"] = oneOf;
  exports["noneOf"] = noneOf;
  exports["stringLikeString"] = stringLikeString;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.GraphQL.Parser"] = $PS["Data.GraphQL.Parser"] || {};
  var exports = $PS["Data.GraphQL.Parser"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Data_Array = $PS["Data.Array"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_GraphQL_AST = $PS["Data.GraphQL.AST"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Int = $PS["Data.Int"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Number = $PS["Data.Number"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Unit = $PS["Data.Unit"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_Combinators = $PS["Text.Parsing.Parser.Combinators"];
  var Text_Parsing_Parser_String = $PS["Text.Parsing.Parser.String"];                
  var whitespace = function (dictStringLike) {
      return Data_Functor["void"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Text_Parsing_Parser_String.oneOf(dictStringLike)(Data_Identity.monadIdentity)([ " ", "\x09" ]));
  };
  var upper = [ "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z" ];
  var typeSystemDirectiveLocation = function (dictStringLike) {
      return Text_Parsing_Parser_Combinators.withErrorMessage(Data_Identity.monadIdentity)(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Text_Parsing_Parser_String.string(dictStringLike)(Data_Identity.monadIdentity)("SCHEMA")))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_GraphQL_AST.SCHEMA.value)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Text_Parsing_Parser_String.string(dictStringLike)(Data_Identity.monadIdentity)("SCALAR")))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_GraphQL_AST.SCALAR.value))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Text_Parsing_Parser_String.string(dictStringLike)(Data_Identity.monadIdentity)("OBJECT")))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_GraphQL_AST.OBJECT.value))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Text_Parsing_Parser_String.string(dictStringLike)(Data_Identity.monadIdentity)("FIELD_DEFINITION")))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_GraphQL_AST.FIELD_DEFINITION.value))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Text_Parsing_Parser_String.string(dictStringLike)(Data_Identity.monadIdentity)("ARGUMENT_DEFINITION")))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_GraphQL_AST.ARGUMENT_DEFINITION.value))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Text_Parsing_Parser_String.string(dictStringLike)(Data_Identity.monadIdentity)("INTERFACE")))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_GraphQL_AST.INTERFACE.value))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Text_Parsing_Parser_String.string(dictStringLike)(Data_Identity.monadIdentity)("UNION")))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_GraphQL_AST.UNION.value))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Text_Parsing_Parser_String.string(dictStringLike)(Data_Identity.monadIdentity)("ENUM")))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_GraphQL_AST.ENUM.value))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Text_Parsing_Parser_String.string(dictStringLike)(Data_Identity.monadIdentity)("ENUM_VALUE")))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_GraphQL_AST.ENUM_VALUE.value))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Text_Parsing_Parser_String.string(dictStringLike)(Data_Identity.monadIdentity)("INPUT_OBJECT")))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_GraphQL_AST.INPUT_OBJECT.value))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(dictStringLike)(Data_Identity.monadIdentity)("INPUT_FIELD_DEFINITION"))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_GraphQL_AST.INPUT_FIELD_DEFINITION.value))))("typeSystemDirectiveLocation");
  };
  var toCA = (function () {
      var $234 = Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity));
      return function ($235) {
          return $234(Data_Array.singleton($235));
      };
  })();
  var sepEndBy_ = function (dictMonad) {
      return function (p) {
          return function (sep) {
              return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(sepEndBy1_(dictMonad)(p)(sep))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_List_Types.Nil.value));
          };
      };
  };
  var sepEndBy1_ = function (dictMonad) {
      return function (p) {
          return function (sep) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(p)(function (a) {
                  return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(sep)(function () {
                      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(sepEndBy_(dictMonad)(p)(sep))(function (as) {
                          return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(new Data_List_Types.Cons(a, as));
                      });
                  }))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_List.singleton(a)));
              });
          };
      };
  };
  var operationType = function (dictStringLike) {
      return Text_Parsing_Parser_Combinators.withErrorMessage(Data_Identity.monadIdentity)(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(dictStringLike)(Data_Identity.monadIdentity)("query"))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_GraphQL_AST.Query.value))))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(dictStringLike)(Data_Identity.monadIdentity)("mutation"))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_GraphQL_AST.Mutation.value)))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(dictStringLike)(Data_Identity.monadIdentity)("subscription"))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_GraphQL_AST.Subscription.value))))("operation type");
  };
  var ooo = function (dictStringLike) {
      return function (p) {
          return Text_Parsing_Parser_Combinators.option(Data_Identity.monadIdentity)(Data_Maybe.Nothing.value)(Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(p))((function () {
              var $236 = Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity));
              return function ($237) {
                  return $236(Data_Maybe.Just.create($237));
              };
          })()));
      };
  };
  var nullValue = function (dictStringLike) {
      return Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(dictStringLike)(Data_Identity.monadIdentity)("null"))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_GraphQL_AST.NullValue.value));
  };
  var nonZeroDigits = [ "1", "2", "3", "4", "5", "6", "7", "8", "9" ];
  var lower = [ "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" ];
  var lineTerminator = function (dictStringLike) {
      return Data_Functor["void"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Text_Parsing_Parser_String["char"](dictStringLike)(Data_Identity.monadIdentity)("\x0a"));
  };
  var executableDirectiveLocation = function (dictStringLike) {
      return Text_Parsing_Parser_Combinators.withErrorMessage(Data_Identity.monadIdentity)(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Text_Parsing_Parser_String.string(dictStringLike)(Data_Identity.monadIdentity)("QUERY")))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_GraphQL_AST.QUERY.value)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Text_Parsing_Parser_String.string(dictStringLike)(Data_Identity.monadIdentity)("MUTATION")))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_GraphQL_AST.MUTATION.value))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Text_Parsing_Parser_String.string(dictStringLike)(Data_Identity.monadIdentity)("SUBSCRIPTION")))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_GraphQL_AST.SUBSCRIPTION.value))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Text_Parsing_Parser_String.string(dictStringLike)(Data_Identity.monadIdentity)("FIELD")))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_GraphQL_AST.FIELD.value))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Text_Parsing_Parser_String.string(dictStringLike)(Data_Identity.monadIdentity)("FRAGMENT_DEFINITION")))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_GraphQL_AST.FRAGMENT_DEFINITION.value))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Text_Parsing_Parser_String.string(dictStringLike)(Data_Identity.monadIdentity)("FRAGMENT_SPREAD")))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_GraphQL_AST.FRAGMENT_SPREAD.value))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(dictStringLike)(Data_Identity.monadIdentity)("INLINE_FRAGMENT"))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_GraphQL_AST.INLINE_FRAGMENT.value))))("executableDirectiveLocation");
  };
  var directiveLocation = function (dictStringLike) {
      return Text_Parsing_Parser_Combinators.withErrorMessage(Data_Identity.monadIdentity)(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.DirectiveLocation_TypeSystemDirectiveLocation.create)(typeSystemDirectiveLocation(dictStringLike))))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.DirectiveLocation_ExecutableDirectiveLocation.create)(executableDirectiveLocation(dictStringLike))))("directiveLocation");
  };
  var digits = [ "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" ];
  var name = function (dictStringLike) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_String_CodeUnits.fromCharArray)(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Semigroup.append(Data_Semigroup.semigroupArray))(Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.oneOf(dictStringLike)(Data_Identity.monadIdentity)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(upper)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(lower)([ "_" ]))))(toCA)))(Data_Array.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Text_Parsing_Parser_String.oneOf(dictStringLike)(Data_Identity.monadIdentity)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(upper)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(lower)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(digits)([ "_" ])))))));
  };
  var enumValue = function (dictStringLike) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.EnumValue)(Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(name(dictStringLike))(function (x) {
          var $229 = x === "null" || (x === "true" || x === "false");
          if ($229) {
              return Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("Name cannot be null, false or true");
          };
          return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(x);
      }));
  };
  var fragmentName = function (dictStringLike) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(name(dictStringLike))(function (x) {
          var $230 = x === "on";
          if ($230) {
              return Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("Fragment name cannot be 'on'");
          };
          return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(x);
      });
  };
  var namedType = function (dictStringLike) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.NamedType)(name(dictStringLike));
  };
  var variable = function (dictStringLike) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.Variable)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String["char"](dictStringLike)(Data_Identity.monadIdentity)("$"))(name(dictStringLike)));
  };
  var uni = function (dictStringLike) {
      return Text_Parsing_Parser_String.oneOf(dictStringLike)(Data_Identity.monadIdentity)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(digits)(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ "A", "B", "C", "D", "E", "F" ])([ "a", "b", "c", "d", "e", "f" ])));
  };
  var comment = function (dictStringLike) {
      return Data_Functor["void"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String["char"](dictStringLike)(Data_Identity.monadIdentity)("#"))(Data_Array.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Text_Parsing_Parser_String.noneOf(dictStringLike)(Data_Identity.monadIdentity)([ "\x0a" ]))));
  };
  var comma = function (dictStringLike) {
      return Data_Functor["void"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Text_Parsing_Parser_String["char"](dictStringLike)(Data_Identity.monadIdentity)(","));
  };
  var ignorable = function (dictStringLike) {
      return Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(lineTerminator(dictStringLike))(comma(dictStringLike)))(comment(dictStringLike)))(whitespace(dictStringLike));
  };
  var ignoreMe = function (dictStringLike) {
      return Data_Functor["void"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Array.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(ignorable(dictStringLike)));
  };
  var directiveLocations = function (dictStringLike) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))((function () {
          var $238 = Data_List.fromFoldable(Data_List_Types.foldableNonEmptyList);
          return function ($239) {
              return Data_GraphQL_AST.DirectiveLocations($238($239));
          };
      })())(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(Text_Parsing_Parser_Combinators.optional(Data_Identity.monadIdentity)(Text_Parsing_Parser_String["char"](dictStringLike)(Data_Identity.monadIdentity)("|"))))(Text_Parsing_Parser_Combinators.sepBy1(Data_Identity.monadIdentity)(Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(directiveLocation(dictStringLike)))(ignoreMe(dictStringLike)))(Text_Parsing_Parser_String["char"](dictStringLike)(Data_Identity.monadIdentity)("|"))));
  };
  var ignorableExtension = function (dictStringLike) {
      return function (s) {
          return Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(dictStringLike)(Data_Identity.monadIdentity)("extend"))(ignoreMe(dictStringLike)))(Text_Parsing_Parser_String.string(dictStringLike)(Data_Identity.monadIdentity)(s)))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_Unit.unit));
      };
  };
  var implementsInterfaces = function (dictStringLike) {
      return Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(dictStringLike)(Data_Identity.monadIdentity)("implements"))(ignoreMe(dictStringLike)))(Text_Parsing_Parser_Combinators.optional(Data_Identity.monadIdentity)(Text_Parsing_Parser_String["char"](dictStringLike)(Data_Identity.monadIdentity)("&"))))(ignoreMe(dictStringLike)))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))((function () {
          var $240 = Data_List.fromFoldable(Data_List_Types.foldableNonEmptyList);
          return function ($241) {
              return Data_GraphQL_AST.ImplementsInterfaces($240($241));
          };
      })())(Text_Parsing_Parser_Combinators.sepBy1(Data_Identity.monadIdentity)(Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(namedType(dictStringLike)))(ignoreMe(dictStringLike)))(Text_Parsing_Parser_String["char"](dictStringLike)(Data_Identity.monadIdentity)("&"))));
  };
  var listType = function (dictStringLike) {
      return function (t) {
          return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.ListType)(Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(dictStringLike)(Data_Identity.monadIdentity)("["))(ignoreMe(dictStringLike)))(t))(ignoreMe(dictStringLike)))(Text_Parsing_Parser_String.string(dictStringLike)(Data_Identity.monadIdentity)("]")));
      };
  };
  var nonNullType = function (dictStringLike) {
      return function (v) {
          return Text_Parsing_Parser_Combinators.withErrorMessage(Data_Identity.monadIdentity)(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.NonNullType_NamedType.create)(Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(namedType(dictStringLike))(Text_Parsing_Parser_String["char"](dictStringLike)(Data_Identity.monadIdentity)("!")))))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.NonNullType_ListType.create)(Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(listType(dictStringLike)(v))(Text_Parsing_Parser_String["char"](dictStringLike)(Data_Identity.monadIdentity)("!")))))("nonNullType");
      };
  };
  var objectTypeExtensionWithImplementsInterfaces = function (dictStringLike) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.ObjectTypeExtension_With_ImplementsInterfaces.create)(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function (v) {
          return function (v1) {
              return {
                  name: v,
                  implementsInterfaces: v1
              };
          };
      })(name(dictStringLike)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(implementsInterfaces(dictStringLike))));
  };
  var operationTypeDefinition = function (dictStringLike) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.OperationTypeDefinition)(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function (v) {
          return function (v1) {
              return {
                  operationType: v,
                  namedType: v1
              };
          };
      })(operationType(dictStringLike)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(Text_Parsing_Parser_String["char"](dictStringLike)(Data_Identity.monadIdentity)(":")))(ignoreMe(dictStringLike)))(namedType(dictStringLike))));
  };
  var rootOperationDefinition = function (dictStringLike) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.RootOperationTypeDefinition)(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function (v) {
          return function (v1) {
              return {
                  operationType: v,
                  namedType: v1
              };
          };
      })(operationType(dictStringLike)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(Text_Parsing_Parser_String["char"](dictStringLike)(Data_Identity.monadIdentity)(":")))(ignoreMe(dictStringLike)))(namedType(dictStringLike))));
  };
  var typeCondition = function (dictStringLike) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.TypeCondition)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(dictStringLike)(Data_Identity.monadIdentity)("on"))(ignoreMe(dictStringLike)))(namedType(dictStringLike)));
  };
  var unionMemberTypes = function (dictStringLike) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))((function () {
          var $242 = Data_List.fromFoldable(Data_List_Types.foldableNonEmptyList);
          return function ($243) {
              return Data_GraphQL_AST.UnionMemberTypes($242($243));
          };
      })())(Text_Parsing_Parser_Combinators.sepBy1(Data_Identity.monadIdentity)(Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(namedType(dictStringLike)))(ignoreMe(dictStringLike)))(Text_Parsing_Parser_String["char"](dictStringLike)(Data_Identity.monadIdentity)("|")));
  };
  var ca2str = (function () {
      var $244 = Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity));
      return function ($245) {
          return $244(Data_String_CodeUnits.fromCharArray($245));
      };
  })();
  var simpleUnicodeString = function (dictStringLike) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Traversable.sequence(Data_Traversable.traversableArray)(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))([ Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String["char"](dictStringLike)(Data_Identity.monadIdentity)("\\"))(Text_Parsing_Parser_String["char"](dictStringLike)(Data_Identity.monadIdentity)("u")))(uni(dictStringLike)), uni(dictStringLike), uni(dictStringLike), uni(dictStringLike) ]))(ca2str))((function () {
          var $246 = Data_Maybe.maybe(Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("Unrepresentable code point"))((function () {
              var $249 = Data_Maybe.maybe(Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("Unrepresentable code point"))((function () {
                  var $252 = Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity));
                  return function ($253) {
                      return $252(Data_String_CodePoints.singleton(Data_String_CodePoints.codePointFromChar($253)));
                  };
              })());
              var $250 = Data_Enum.toEnum(Data_Enum.boundedEnumChar);
              return function ($251) {
                  return $249($250($251));
              };
          })());
          var $247 = Data_Int.fromStringAs(Data_Int.hexadecimal);
          return function ($248) {
              return $246($247($248));
          };
      })());
  };
  var tripleQuote = function (dictStringLike) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Traversable.sequence(Data_Traversable.traversableArray)(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))([ Text_Parsing_Parser_String["char"](dictStringLike)(Data_Identity.monadIdentity)("\""), Text_Parsing_Parser_String["char"](dictStringLike)(Data_Identity.monadIdentity)("\""), Text_Parsing_Parser_String["char"](dictStringLike)(Data_Identity.monadIdentity)("\"") ]))(ca2str);
  };
  var c2str = (function () {
      var $254 = Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity));
      return function ($255) {
          return $254(Data_String_CodeUnits.fromCharArray(Data_Array.singleton($255)));
      };
  })();
  var exponentPart = function (dictStringLike) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Monoid.monoidString))(Data_Traversable.sequence(Data_Traversable.traversableArray)(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))([ Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.oneOf(dictStringLike)(Data_Identity.monadIdentity)([ "e", "E" ]))(c2str), Text_Parsing_Parser_Combinators.option(Data_Identity.monadIdentity)("")(Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.oneOf(dictStringLike)(Data_Identity.monadIdentity)([ "+", "-" ]))(c2str)), Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Array.some(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Text_Parsing_Parser_String.oneOf(dictStringLike)(Data_Identity.monadIdentity)(digits)))(ca2str) ]));
  };
  var fractionalPart = function (dictStringLike) {
      return Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Semigroup.append(Data_Semigroup.semigroupString))(Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String["char"](dictStringLike)(Data_Identity.monadIdentity)("."))(c2str)))(Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Array.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Text_Parsing_Parser_String.oneOf(dictStringLike)(Data_Identity.monadIdentity)(digits)))(ca2str));
  };
  var negativeSign = function (dictStringLike) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String["char"](dictStringLike)(Data_Identity.monadIdentity)("-"))(c2str);
  };
  var ip0 = function (dictStringLike) {
      return Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Semigroup.append(Data_Semigroup.semigroupString))(Text_Parsing_Parser_Combinators.option(Data_Identity.monadIdentity)("")(negativeSign(dictStringLike))))(Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String["char"](dictStringLike)(Data_Identity.monadIdentity)("0"))(c2str));
  };
  var ipOther = function (dictStringLike) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Monoid.monoidString))(Data_Traversable.sequence(Data_Traversable.traversableArray)(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))([ Text_Parsing_Parser_Combinators.option(Data_Identity.monadIdentity)("")(negativeSign(dictStringLike)), Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.oneOf(dictStringLike)(Data_Identity.monadIdentity)(nonZeroDigits))(c2str), Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Array.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Text_Parsing_Parser_String.oneOf(dictStringLike)(Data_Identity.monadIdentity)(digits)))(ca2str) ]));
  };
  var integerPart = function (dictStringLike) {
      return Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(ip0(dictStringLike)))(ipOther(dictStringLike));
  };
  var floatValueExp = function (dictStringLike) {
      return Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Semigroup.append(Data_Semigroup.semigroupString))(integerPart(dictStringLike)))(exponentPart(dictStringLike));
  };
  var floatValueFrac = function (dictStringLike) {
      return Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Semigroup.append(Data_Semigroup.semigroupString))(integerPart(dictStringLike)))(fractionalPart(dictStringLike));
  };
  var floatValueFracExp = function (dictStringLike) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Monoid.monoidString))(Data_Traversable.sequence(Data_Traversable.traversableArray)(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))([ integerPart(dictStringLike), fractionalPart(dictStringLike), exponentPart(dictStringLike) ]));
  };
  var floatValue = function (dictStringLike) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(floatValueFracExp(dictStringLike)))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(floatValueExp(dictStringLike))))(floatValueFrac(dictStringLike)))((function () {
          var $256 = Data_Maybe.maybe(Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("String not a float"))((function () {
              var $258 = Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity));
              return function ($259) {
                  return $258(Data_GraphQL_AST.FloatValue($259));
              };
          })());
          return function ($257) {
              return $256(Data_Number.fromString($257));
          };
      })());
  };
  var intValue = function (dictStringLike) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(integerPart(dictStringLike))((function () {
          var $260 = Data_Maybe.maybe(Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("String not an int"))((function () {
              var $262 = Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity));
              return function ($263) {
                  return $262(Data_GraphQL_AST.IntValue($263));
              };
          })());
          return function ($261) {
              return $260(Data_Int.fromString($261));
          };
      })());
  };
  var notTripleQuote = function (dictStringLike) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.lookAhead(Data_Identity.monadIdentity)(Data_Traversable.sequence(Data_Traversable.traversableArray)(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))([ Text_Parsing_Parser_String.anyChar(dictStringLike)(Data_Identity.monadIdentity), Text_Parsing_Parser_String.anyChar(dictStringLike)(Data_Identity.monadIdentity), Text_Parsing_Parser_String.anyChar(dictStringLike)(Data_Identity.monadIdentity) ])))(function (s) {
          var $231 = Data_Eq.eq(Data_Eq.eqArray(Data_Eq.eqChar))(s)([ "\"", "\"", "\"" ]);
          if ($231) {
              return Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("this is a triple quote");
          };
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.anyChar(dictStringLike)(Data_Identity.monadIdentity))(c2str);
      });
  };
  var simpleEscapedString = function (dictStringLike) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String["char"](dictStringLike)(Data_Identity.monadIdentity)("\\"))(Text_Parsing_Parser_String.oneOf(dictStringLike)(Data_Identity.monadIdentity)([ "\"", "\\", "/", "b", "f", "n", "r", "t" ])))(function (x) {
          if (x === "\"") {
              return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))("\"");
          };
          if (x === "\\") {
              return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))("\\");
          };
          if (x === "/") {
              return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))("/");
          };
          if (x === "n") {
              return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))("\x0a");
          };
          if (x === "r") {
              return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))("\x0d");
          };
          if (x === "t") {
              return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))("\x09");
          };
          if (x === "b") {
              return Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("Cannot handle backspace yet");
          };
          if (x === "f") {
              return Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("Cannot handle formfeed yet");
          };
          return Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("No clue how to parse this escapedString");
      }))(c2str);
  };
  var simpleUnescapedString = function (dictStringLike) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.noneOf(dictStringLike)(Data_Identity.monadIdentity)([ "\\", "\"", "\x0a" ]))(c2str);
  };
  var simpleStringSingleton = function (dictStringLike) {
      return Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(simpleUnescapedString(dictStringLike)))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(simpleUnicodeString(dictStringLike))))(simpleEscapedString(dictStringLike));
  };
  var singleQuote = function (dictStringLike) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String["char"](dictStringLike)(Data_Identity.monadIdentity)("\""))(c2str);
  };
  var simpleStringValue = function (dictStringLike) {
      return Text_Parsing_Parser_Combinators.between(Data_Identity.monadIdentity)(singleQuote(dictStringLike))(singleQuote(dictStringLike))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Monoid.monoidString))(Data_Array.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(simpleStringSingleton(dictStringLike))));
  };
  var booleanValue = function (dictStringLike) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.BooleanValue)(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(dictStringLike)(Data_Identity.monadIdentity)("true"))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(true)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(dictStringLike)(Data_Identity.monadIdentity)("false"))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(false))));
  };
  var blockStringValue = function (dictStringLike) {
      return Text_Parsing_Parser_Combinators.between(Data_Identity.monadIdentity)(tripleQuote(dictStringLike))(tripleQuote(dictStringLike))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Monoid.monoidString))(Data_Array.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(notTripleQuote(dictStringLike))));
  };
  var stringValue = function (dictStringLike) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.StringValue)(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(blockStringValue(dictStringLike)))(simpleStringValue(dictStringLike)));
  };
  var description = function (dictStringLike) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(stringValue(dictStringLike))(function (v) {
          return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(v);
      });
  };
  var optDesc = function (dictStringLike) {
      return ooo(dictStringLike)(description(dictStringLike));
  };
  var argument = function (dictStringLike) {
      return function (vc) {
          return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.Argument)(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function (v) {
              return function (v1) {
                  return {
                      name: v,
                      value: v1
                  };
              };
          })(name(dictStringLike)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(Text_Parsing_Parser_String["char"](dictStringLike)(Data_Identity.monadIdentity)(":")))(ignoreMe(dictStringLike)))(vc)));
      };
  };
  var alias = function (dictStringLike) {
      return Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(name(dictStringLike))(ignoreMe(dictStringLike)))(Text_Parsing_Parser_String["char"](dictStringLike)(Data_Identity.monadIdentity)(":"));
  };
  var _type = function (dictStringLike) {
      return Control_Lazy.fix(Text_Parsing_Parser.lazyParserT)(function (p) {
          return Text_Parsing_Parser_Combinators.withErrorMessage(Data_Identity.monadIdentity)(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.Type_NonNullType.create)(nonNullType(dictStringLike)(p))))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.Type_NamedType.create)(namedType(dictStringLike)))))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.Type_ListType.create)(listType(dictStringLike)(p))))("type");
      });
  };
  var _listish1 = function (dictStringLike) {
      return function (p) {
          return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_List.fromFoldable(Data_List_Types.foldableList))(sepEndBy1_(Data_Identity.monadIdentity)(p)(ignoreMe(dictStringLike)));
      };
  };
  var _listish = function (dictStringLike) {
      return function (p) {
          return sepEndBy_(Data_Identity.monadIdentity)(p)(ignoreMe(dictStringLike));
      };
  };
  var listish = function (dictStringLike) {
      return function (o) {
          return function (c) {
              return function (p) {
                  return Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(dictStringLike)(Data_Identity.monadIdentity)(o))(ignoreMe(dictStringLike)))(_listish(dictStringLike)(p)))(Text_Parsing_Parser_String.string(dictStringLike)(Data_Identity.monadIdentity)(c));
              };
          };
      };
  };
  var listValue = function (dictStringLike) {
      var $264 = Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.ListValue);
      var $265 = listish(dictStringLike)("[")("]");
      return function ($266) {
          return $264($265($266));
      };
  };
  var objectValue = function (dictStringLike) {
      var $267 = Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.ObjectValue);
      var $268 = listish(dictStringLike)("{")("}");
      var $269 = argument(dictStringLike);
      return function ($270) {
          return $267($268($269($270)));
      };
  };
  var value = function (dictStringLike) {
      return Control_Lazy.fix(Text_Parsing_Parser.lazyParserT)(function (p) {
          return Text_Parsing_Parser_Combinators.withErrorMessage(Data_Identity.monadIdentity)(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.Value_Variable.create)(variable(dictStringLike))))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.Value_NullValue.create)(nullValue(dictStringLike)))))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.Value_BooleanValue.create)(booleanValue(dictStringLike)))))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.Value_StringValue.create)(stringValue(dictStringLike)))))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.Value_FloatValue.create)(floatValue(dictStringLike)))))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.Value_IntValue.create)(intValue(dictStringLike)))))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.Value_EnumValue.create)(enumValue(dictStringLike)))))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.Value_ListValue.create)(listValue(dictStringLike)(p)))))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.Value_ObjectValue.create)(objectValue(dictStringLike)(p))))("value");
      });
  };
  var $$arguments = function (dictStringLike) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.Arguments)(listish(dictStringLike)("(")(")")(argument(dictStringLike)(value(dictStringLike))));
  };
  var directive = function (dictStringLike) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.Directive)(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function (v) {
          return function (v1) {
              return {
                  name: v,
                  "arguments": v1
              };
          };
      })(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String["char"](dictStringLike)(Data_Identity.monadIdentity)("@"))(name(dictStringLike))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(ooo(dictStringLike)($$arguments(dictStringLike)))));
  };
  var directives = function (dictStringLike) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.Directives)(_listish1(dictStringLike)(directive(dictStringLike)));
  };
  var enumTypeExtensionWithDirectives = function (dictStringLike) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.EnumTypeExtension_With_Directives.create)(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function (v) {
          return function (v1) {
              return {
                  name: v,
                  directives: v1
              };
          };
      })(name(dictStringLike)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(directives(dictStringLike))));
  };
  var inputObjectTypeExtensionWithDirectives = function (dictStringLike) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.InputObjectTypeExtension_With_Directives.create)(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function (v) {
          return function (v1) {
              return {
                  name: v,
                  directives: v1
              };
          };
      })(name(dictStringLike)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(directives(dictStringLike))));
  };
  var interfaceTypeExtensionWithDirectives = function (dictStringLike) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.InterfaceTypeExtension_With_Directives.create)(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function (v) {
          return function (v1) {
              return {
                  name: v,
                  directives: v1
              };
          };
      })(name(dictStringLike)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(directives(dictStringLike))));
  };
  var objectTypeExtensionWithDirectives = function (dictStringLike) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.ObjectTypeExtension_With_Directives.create)(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function (v) {
          return function (v1) {
              return function (v2) {
                  return {
                      name: v,
                      implementsInterfaces: v1,
                      directives: v2
                  };
              };
          };
      })(name(dictStringLike)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(ooo(dictStringLike)(implementsInterfaces(dictStringLike)))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(directives(dictStringLike))));
  };
  var optDir = function (dictStringLike) {
      return ooo(dictStringLike)(directives(dictStringLike));
  };
  var enumValueDefinition = function (dictStringLike) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.EnumValueDefinition)(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function (v) {
          return function (v1) {
              return function (v2) {
                  return {
                      description: v,
                      enumValue: v1,
                      directives: v2
                  };
              };
          };
      })(optDesc(dictStringLike)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(enumValue(dictStringLike))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(optDir(dictStringLike))));
  };
  var enumValuesDefinition = function (dictStringLike) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.EnumValuesDefinition)(listish(dictStringLike)("{")("}")(enumValueDefinition(dictStringLike)));
  };
  var enumTypeDefinition = function (dictStringLike) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.EnumTypeDefinition)(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function (v) {
          return function (v1) {
              return function (v2) {
                  return function (v3) {
                      return {
                          description: v,
                          name: v1,
                          directives: v2,
                          enumValuesDefinition: v3
                      };
                  };
              };
          };
      })(optDesc(dictStringLike)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(Text_Parsing_Parser_String.string(dictStringLike)(Data_Identity.monadIdentity)("enum")))(ignoreMe(dictStringLike)))(name(dictStringLike))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(optDir(dictStringLike))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(ooo(dictStringLike)(enumValuesDefinition(dictStringLike)))));
  };
  var enumTypeExtensionWithEnumValuesDefinition = function (dictStringLike) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.EnumTypeExtension_With_EnumValuesDefinition.create)(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function (v) {
          return function (v1) {
              return function (v2) {
                  return {
                      name: v,
                      directives: v1,
                      enumValuesDefinition: v2
                  };
              };
          };
      })(name(dictStringLike)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(optDir(dictStringLike))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(enumValuesDefinition(dictStringLike))));
  };
  var enumTypeExtension = function (dictStringLike) {
      return Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignorableExtension(dictStringLike)("enum"))(ignoreMe(dictStringLike)))(Text_Parsing_Parser_Combinators.withErrorMessage(Data_Identity.monadIdentity)(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(enumTypeExtensionWithEnumValuesDefinition(dictStringLike)))(enumTypeExtensionWithDirectives(dictStringLike)))("enumTypeExtension"));
  };
  var fragmentSpread = function (dictStringLike) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.FragmentSpread)(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function (v) {
          return function (v1) {
              return {
                  fragmentName: v,
                  directives: v1
              };
          };
      })(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(dictStringLike)(Data_Identity.monadIdentity)("..."))(ignoreMe(dictStringLike)))(fragmentName(dictStringLike))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(optDir(dictStringLike))));
  };
  var inlineFragment = function (dictStringLike) {
      return function (ss) {
          return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.InlineFragment)(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function (v) {
              return function (v1) {
                  return function (v2) {
                      return {
                          typeCondition: v,
                          directives: v1,
                          selectionSet: v2
                      };
                  };
              };
          })(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(dictStringLike)(Data_Identity.monadIdentity)("..."))(ignoreMe(dictStringLike)))(ooo(dictStringLike)(typeCondition(dictStringLike)))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(optDir(dictStringLike))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(ss)));
      };
  };
  var scalarTypeDefinition = function (dictStringLike) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.ScalarTypeDefinition)(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function (v) {
          return function (v1) {
              return function (v2) {
                  return {
                      description: v,
                      name: v1,
                      directives: v2
                  };
              };
          };
      })(optDesc(dictStringLike)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(Text_Parsing_Parser_String.string(dictStringLike)(Data_Identity.monadIdentity)("scalar")))(ignoreMe(dictStringLike)))(name(dictStringLike))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(optDir(dictStringLike))));
  };
  var unionTypeDefinition = function (dictStringLike) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.UnionTypeDefinition)(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function (v) {
          return function (v1) {
              return function (v2) {
                  return function (v3) {
                      return {
                          description: v,
                          name: v1,
                          directives: v2,
                          unionMemberTypes: v3
                      };
                  };
              };
          };
      })(optDesc(dictStringLike)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(Text_Parsing_Parser_String.string(dictStringLike)(Data_Identity.monadIdentity)("union")))(ignoreMe(dictStringLike)))(name(dictStringLike))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(optDir(dictStringLike))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(Text_Parsing_Parser_String["char"](dictStringLike)(Data_Identity.monadIdentity)("=")))(ignoreMe(dictStringLike)))(ooo(dictStringLike)(unionMemberTypes(dictStringLike)))));
  };
  var unionTypeExtensionWithUnionMemberTypes = function (dictStringLike) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.UnionTypeExtension_With_UnionMemberTypes.create)(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function (v) {
          return function (v1) {
              return function (v2) {
                  return {
                      name: v,
                      directives: v1,
                      unionMemberTypes: v2
                  };
              };
          };
      })(name(dictStringLike)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(optDir(dictStringLike))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(Text_Parsing_Parser_String["char"](dictStringLike)(Data_Identity.monadIdentity)("=")))(ignoreMe(dictStringLike)))(unionMemberTypes(dictStringLike))));
  };
  var scalarTypeExtension = function (dictStringLike) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.ScalarTypeExtension)(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function (v) {
          return function (v1) {
              return {
                  name: v,
                  directives: v1
              };
          };
      })(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignorableExtension(dictStringLike)("scalar"))(ignoreMe(dictStringLike)))(name(dictStringLike))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(directives(dictStringLike))));
  };
  var schemaExtensionWithDirectives = function (dictStringLike) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.SchemaExtension_With_Directives.create)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function (v) {
          return {
              directives: v
          };
      })(directives(dictStringLike)));
  };
  var unionTypeExtensionWithDirectives = function (dictStringLike) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.UnionTypeExtension_With_Directives.create)(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function (v) {
          return function (v1) {
              return {
                  name: v,
                  directives: v1
              };
          };
      })(name(dictStringLike)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(directives(dictStringLike))));
  };
  var unionTypeExtension = function (dictStringLike) {
      return Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignorableExtension(dictStringLike)("union"))(ignoreMe(dictStringLike)))(Text_Parsing_Parser_Combinators.withErrorMessage(Data_Identity.monadIdentity)(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(unionTypeExtensionWithUnionMemberTypes(dictStringLike)))(unionTypeExtensionWithDirectives(dictStringLike)))("unionTypeExtension"));
  };
  var field = function (dictStringLike) {
      return function (ss) {
          return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.Field)(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function (v) {
              return function (v1) {
                  return function (v2) {
                      return function (v3) {
                          return function (v4) {
                              return {
                                  alias: v,
                                  name: v1,
                                  "arguments": v2,
                                  directives: v3,
                                  selectionSet: v4
                              };
                          };
                      };
                  };
              };
          })(ooo(dictStringLike)(alias(dictStringLike))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(name(dictStringLike))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(ooo(dictStringLike)($$arguments(dictStringLike)))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(optDir(dictStringLike))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(ooo(dictStringLike)(ss))));
      };
  };
  var selection = function (dictStringLike) {
      return function (ss) {
          return Text_Parsing_Parser_Combinators.withErrorMessage(Data_Identity.monadIdentity)(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.Selection_Field.create)(field(dictStringLike)(ss))))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.Selection_FragmentSpread.create)(fragmentSpread(dictStringLike)))))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.Selection_InlineFragment.create)(inlineFragment(dictStringLike)(ss))))("selection");
      };
  };
  var defaultValue = function (dictStringLike) {
      return Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String["char"](dictStringLike)(Data_Identity.monadIdentity)("="))(ignoreMe(dictStringLike)))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.DefaultValue)(value(dictStringLike)));
  };
  var optDv = function (dictStringLike) {
      return ooo(dictStringLike)(defaultValue(dictStringLike));
  };
  var inputValueDefinition = function (dictStringLike) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.InputValueDefinition)(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function (v) {
          return function (v1) {
              return function (v2) {
                  return function (v3) {
                      return function (v4) {
                          return {
                              description: v,
                              name: v1,
                              type: v2,
                              defaultValue: v3,
                              directives: v4
                          };
                      };
                  };
              };
          };
      })(optDesc(dictStringLike)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(name(dictStringLike))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(Text_Parsing_Parser_String["char"](dictStringLike)(Data_Identity.monadIdentity)(":")))(ignoreMe(dictStringLike)))(_type(dictStringLike))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(optDv(dictStringLike))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(optDir(dictStringLike))));
  };
  var argumentsDefinition = function (dictStringLike) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.ArgumentsDefinition)(listish(dictStringLike)("(")(")")(inputValueDefinition(dictStringLike)));
  };
  var directiveDefinition = function (dictStringLike) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.DirectiveDefinition)(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function (v) {
          return function (v1) {
              return function (v2) {
                  return function (v3) {
                      return {
                          description: v,
                          name: v1,
                          argumentsDefinition: v2,
                          directiveLocations: v3
                      };
                  };
              };
          };
      })(optDesc(dictStringLike)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(Text_Parsing_Parser_String.string(dictStringLike)(Data_Identity.monadIdentity)("directive")))(ignoreMe(dictStringLike)))(Text_Parsing_Parser_String["char"](dictStringLike)(Data_Identity.monadIdentity)("@")))(name(dictStringLike))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(ooo(dictStringLike)(argumentsDefinition(dictStringLike)))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(Text_Parsing_Parser_String.string(dictStringLike)(Data_Identity.monadIdentity)("on")))(ignoreMe(dictStringLike)))(directiveLocations(dictStringLike))));
  };
  var fieldDefinition = function (dictStringLike) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.FieldDefinition)(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function (v) {
          return function (v1) {
              return function (v2) {
                  return function (v3) {
                      return function (v4) {
                          return {
                              description: v,
                              name: v1,
                              argumentsDefinition: v2,
                              type: v3,
                              directives: v4
                          };
                      };
                  };
              };
          };
      })(optDesc(dictStringLike)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(name(dictStringLike))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(ooo(dictStringLike)(argumentsDefinition(dictStringLike)))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(Text_Parsing_Parser_String["char"](dictStringLike)(Data_Identity.monadIdentity)(":")))(ignoreMe(dictStringLike)))(_type(dictStringLike))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(optDir(dictStringLike))));
  };
  var fieldsDefinition = function (dictStringLike) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.FieldsDefinition)(listish(dictStringLike)("{")("}")(fieldDefinition(dictStringLike)));
  };
  var interfaceTypeDefinition = function (dictStringLike) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.InterfaceTypeDefinition)(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function (v) {
          return function (v1) {
              return function (v2) {
                  return function (v3) {
                      return {
                          description: v,
                          name: v1,
                          directives: v2,
                          fieldsDefinition: v3
                      };
                  };
              };
          };
      })(optDesc(dictStringLike)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(Text_Parsing_Parser_String.string(dictStringLike)(Data_Identity.monadIdentity)("interface")))(ignoreMe(dictStringLike)))(name(dictStringLike))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(optDir(dictStringLike))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(ooo(dictStringLike)(fieldsDefinition(dictStringLike)))));
  };
  var interfaceTypeExtensionWithFieldsDefinition = function (dictStringLike) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.InterfaceTypeExtension_With_FieldsDefinition.create)(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function (v) {
          return function (v1) {
              return function (v2) {
                  return {
                      name: v,
                      directives: v1,
                      fieldsDefinition: v2
                  };
              };
          };
      })(name(dictStringLike)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(optDir(dictStringLike))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(fieldsDefinition(dictStringLike))));
  };
  var interfaceTypeExtension = function (dictStringLike) {
      return Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignorableExtension(dictStringLike)("input"))(ignoreMe(dictStringLike)))(Text_Parsing_Parser_Combinators.withErrorMessage(Data_Identity.monadIdentity)(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(interfaceTypeExtensionWithFieldsDefinition(dictStringLike)))(interfaceTypeExtensionWithDirectives(dictStringLike)))("interfaceTypeExtension"));
  };
  var objectTypeDefinition = function (dictStringLike) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.ObjectTypeDefinition)(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function (v) {
          return function (v1) {
              return function (v2) {
                  return function (v3) {
                      return function (v4) {
                          return {
                              description: v,
                              name: v1,
                              implementsInterfaces: v2,
                              directives: v3,
                              fieldsDefinition: v4
                          };
                      };
                  };
              };
          };
      })(optDesc(dictStringLike)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(Text_Parsing_Parser_String.string(dictStringLike)(Data_Identity.monadIdentity)("type")))(ignoreMe(dictStringLike)))(name(dictStringLike))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(ooo(dictStringLike)(implementsInterfaces(dictStringLike)))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(optDir(dictStringLike))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(ooo(dictStringLike)(fieldsDefinition(dictStringLike)))));
  };
  var objectTypeExtensionWithFieldsDefinition = function (dictStringLike) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.ObjectTypeExtension_With_FieldsDefinition.create)(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function (v) {
          return function (v1) {
              return function (v2) {
                  return function (v3) {
                      return {
                          name: v,
                          implementsInterfaces: v1,
                          directives: v2,
                          fieldsDefinition: v3
                      };
                  };
              };
          };
      })(name(dictStringLike)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(ooo(dictStringLike)(implementsInterfaces(dictStringLike)))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(optDir(dictStringLike))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(fieldsDefinition(dictStringLike))));
  };
  var objectTypeExtension = function (dictStringLike) {
      return Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignorableExtension(dictStringLike)("type"))(ignoreMe(dictStringLike)))(Text_Parsing_Parser_Combinators.withErrorMessage(Data_Identity.monadIdentity)(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(objectTypeExtensionWithFieldsDefinition(dictStringLike)))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(objectTypeExtensionWithDirectives(dictStringLike))))(objectTypeExtensionWithImplementsInterfaces(dictStringLike)))("objectTypeExtension"));
  };
  var inputFieldsDefinition = function (dictStringLike) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.InputFieldsDefinition)(listish(dictStringLike)("{")("}")(inputValueDefinition(dictStringLike)));
  };
  var inputObjectTypeDefinition = function (dictStringLike) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.InputObjectTypeDefinition)(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function (v) {
          return function (v1) {
              return function (v2) {
                  return function (v3) {
                      return {
                          description: v,
                          name: v1,
                          directives: v2,
                          inputFieldsDefinition: v3
                      };
                  };
              };
          };
      })(optDesc(dictStringLike)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(Text_Parsing_Parser_String.string(dictStringLike)(Data_Identity.monadIdentity)("input")))(ignoreMe(dictStringLike)))(name(dictStringLike))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(optDir(dictStringLike))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(ooo(dictStringLike)(inputFieldsDefinition(dictStringLike)))));
  };
  var typeDefinition = function (dictStringLike) {
      return Text_Parsing_Parser_Combinators.withErrorMessage(Data_Identity.monadIdentity)(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.TypeDefinition_ScalarTypeDefinition.create)(scalarTypeDefinition(dictStringLike))))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.TypeDefinition_ObjectTypeDefinition.create)(objectTypeDefinition(dictStringLike)))))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.TypeDefinition_InterfaceTypeDefinition.create)(interfaceTypeDefinition(dictStringLike)))))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.TypeDefinition_UnionTypeDefinition.create)(unionTypeDefinition(dictStringLike)))))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.TypeDefinition_EnumTypeDefinition.create)(enumTypeDefinition(dictStringLike)))))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.TypeDefinition_InputObjectTypeDefinition.create)(inputObjectTypeDefinition(dictStringLike))))("typeDefinition");
  };
  var inputObjectTypeExtensionWithInputFieldsDefinition = function (dictStringLike) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.InputObjectTypeExtension_With_InputFieldsDefinition.create)(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function (v) {
          return function (v1) {
              return function (v2) {
                  return {
                      name: v,
                      directives: v1,
                      inputFieldsDefinition: v2
                  };
              };
          };
      })(name(dictStringLike)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(optDir(dictStringLike))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(inputFieldsDefinition(dictStringLike))));
  };
  var inputObjectTypeExtension = function (dictStringLike) {
      return Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignorableExtension(dictStringLike)("input"))(ignoreMe(dictStringLike)))(Text_Parsing_Parser_Combinators.withErrorMessage(Data_Identity.monadIdentity)(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(inputObjectTypeExtensionWithInputFieldsDefinition(dictStringLike)))(inputObjectTypeExtensionWithDirectives(dictStringLike)))("inputObjectTypeExtension"));
  };
  var typeExtension = function (dictStringLike) {
      return Text_Parsing_Parser_Combinators.withErrorMessage(Data_Identity.monadIdentity)(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.TypeExtension_ScalarTypeExtension.create)(scalarTypeExtension(dictStringLike))))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.TypeExtension_ObjectTypeExtension.create)(objectTypeExtension(dictStringLike)))))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.TypeExtension_InterfaceTypeExtension.create)(interfaceTypeExtension(dictStringLike)))))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.TypeExtension_UnionTypeExtension.create)(unionTypeExtension(dictStringLike)))))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.TypeExtension_EnumTypeExtension.create)(enumTypeExtension(dictStringLike)))))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.TypeExtension_InputObjectTypeExtension.create)(inputObjectTypeExtension(dictStringLike))))("typeExtension");
  };
  var variableDefinition = function (dictStringLike) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.VariableDefinition)(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function (v) {
          return function (v1) {
              return function (v2) {
                  return {
                      variable: v,
                      type: v1,
                      defaultValue: v2
                  };
              };
          };
      })(variable(dictStringLike)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(Text_Parsing_Parser_String["char"](dictStringLike)(Data_Identity.monadIdentity)(":")))(ignoreMe(dictStringLike)))(_type(dictStringLike))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(optDv(dictStringLike))));
  };
  var operationTypesDefinition = function (dictStringLike) {
      return listish(dictStringLike)("{")("}")(operationTypeDefinition(dictStringLike));
  };
  var schemaExtensionWithOperationTypeDefinition = function (dictStringLike) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.SchemaExtension_With_OperationTypeDefinition.create)(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function (v) {
          return function (v1) {
              return {
                  directives: v,
                  operationTypesDefinition: v1
              };
          };
      })(optDir(dictStringLike)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(operationTypesDefinition(dictStringLike))));
  };
  var schemaExtension = function (dictStringLike) {
      return Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignorableExtension(dictStringLike)("schema"))(ignoreMe(dictStringLike)))(Text_Parsing_Parser_Combinators.withErrorMessage(Data_Identity.monadIdentity)(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(schemaExtensionWithOperationTypeDefinition(dictStringLike)))(schemaExtensionWithDirectives(dictStringLike)))("schemaExtension"));
  };
  var typeSystemExtension = function (dictStringLike) {
      return Text_Parsing_Parser_Combinators.withErrorMessage(Data_Identity.monadIdentity)(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.TypeSystemExtension_SchemaExtension.create)(schemaExtension(dictStringLike))))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.TypeSystemExtension_TypeExtension.create)(typeExtension(dictStringLike))))("typeSystemExtension");
  };
  var schemaDefinition = function (dictStringLike) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.SchemaDefinition)(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function (v) {
          return function (v1) {
              return {
                  directives: v,
                  rootOperationTypeDefinition: v1
              };
          };
      })(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(dictStringLike)(Data_Identity.monadIdentity)("schema"))(ignoreMe(dictStringLike)))(optDir(dictStringLike))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(listish(dictStringLike)("{")("}")(rootOperationDefinition(dictStringLike)))));
  };
  var typeSystemDefinition = function (dictStringLike) {
      return Text_Parsing_Parser_Combinators.withErrorMessage(Data_Identity.monadIdentity)(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.TypeSystemDefinition_SchemaDefinition.create)(schemaDefinition(dictStringLike))))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.TypeSystemDefinition_TypeDefinition.create)(typeDefinition(dictStringLike)))))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.TypeSystemDefinition_DirectiveDefinition.create)(directiveDefinition(dictStringLike))))("typeSystemDefinition");
  };
  var selectionSet = function (dictStringLike) {
      return Control_Lazy.fix(Text_Parsing_Parser.lazyParserT)(function (p) {
          return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.SelectionSet)(listish(dictStringLike)("{")("}")(selection(dictStringLike)(p)));
      });
  };
  var fragmentDefinition = function (dictStringLike) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.FragmentDefinition)(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function (v) {
          return function (v1) {
              return function (v2) {
                  return function (v3) {
                      return {
                          fragmentName: v,
                          typeCondition: v1,
                          directives: v2,
                          selectionSet: v3
                      };
                  };
              };
          };
      })(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(dictStringLike)(Data_Identity.monadIdentity)("fragment"))(ignoreMe(dictStringLike)))(fragmentName(dictStringLike))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(typeCondition(dictStringLike))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(optDir(dictStringLike))))(selectionSet(dictStringLike)));
  };
  var variableDefinitions = function (dictStringLike) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.VariableDefinitions)(listish(dictStringLike)("(")(")")(variableDefinition(dictStringLike)));
  };
  var operationDefinition = function (dictStringLike) {
      return Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.OperationDefinition_SelectionSet.create)(selectionSet(dictStringLike))))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.OperationDefinition_OperationType.create)(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function (v) {
          return function (v1) {
              return function (v2) {
                  return function (v3) {
                      return function (v4) {
                          return {
                              operationType: v,
                              name: v1,
                              variableDefinitions: v2,
                              directives: v3,
                              selectionSet: v4
                          };
                      };
                  };
              };
          };
      })(operationType(dictStringLike)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(ooo(dictStringLike)(name(dictStringLike)))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(ooo(dictStringLike)(variableDefinitions(dictStringLike)))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(optDir(dictStringLike))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(selectionSet(dictStringLike)))));
  };
  var executableDefinition = function (dictStringLike) {
      return Text_Parsing_Parser_Combinators.withErrorMessage(Data_Identity.monadIdentity)(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.ExecutableDefinition_OperationDefinition.create)(operationDefinition(dictStringLike))))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.ExecutableDefinition_FragmentDefinition.create)(fragmentDefinition(dictStringLike))))("executableDefinition");
  };
  var definition = function (dictStringLike) {
      return Text_Parsing_Parser_Combinators.withErrorMessage(Data_Identity.monadIdentity)(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.Definition_ExecutableDefinition.create)(executableDefinition(dictStringLike))))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.Definition_TypeSystemDefinition.create)(typeSystemDefinition(dictStringLike)))))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.Definition_TypeSystemExtension.create)(typeSystemExtension(dictStringLike))))("definition");
  };
  var document = function (dictStringLike) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_GraphQL_AST.Document)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(ignoreMe(dictStringLike))(_listish(dictStringLike)(definition(dictStringLike))));
  };
  exports["document"] = document;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Map.Internal"] = $PS["Data.Map.Internal"] || {};
  var exports = $PS["Data.Map.Internal"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_FoldableWithIndex = $PS["Data.FoldableWithIndex"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_FunctorWithIndex = $PS["Data.FunctorWithIndex"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];                
  var Leaf = (function () {
      function Leaf() {

      };
      Leaf.value = new Leaf();
      return Leaf;
  })();
  var Two = (function () {
      function Two(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Two.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Two(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Two;
  })();
  var Three = (function () {
      function Three(value0, value1, value2, value3, value4, value5, value6) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
      };
      Three.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return new Three(value0, value1, value2, value3, value4, value5, value6);
                              };
                          };
                      };
                  };
              };
          };
      };
      return Three;
  })();
  var TwoLeft = (function () {
      function TwoLeft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoLeft(value0, value1, value2);
              };
          };
      };
      return TwoLeft;
  })();
  var TwoRight = (function () {
      function TwoRight(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoRight(value0, value1, value2);
              };
          };
      };
      return TwoRight;
  })();
  var ThreeLeft = (function () {
      function ThreeLeft(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeLeft;
  })();
  var ThreeMiddle = (function () {
      function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeMiddle.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeMiddle;
  })();
  var ThreeRight = (function () {
      function ThreeRight(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeRight(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeRight;
  })();
  var KickUp = (function () {
      function KickUp(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      KickUp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new KickUp(value0, value1, value2, value3);
                  };
              };
          };
      };
      return KickUp;
  })();
  var values = function (v) {
      if (v instanceof Leaf) {
          return Data_List_Types.Nil.value;
      };
      if (v instanceof Two) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(values(v.value3)));
      };
      if (v instanceof Three) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value5))(values(v.value6)))));
      };
      throw new Error("Failed pattern match at Data.Map.Internal (line 626, column 1 - line 626, column 40): " + [ v.constructor.name ]);
  };
  var singleton = function (k) {
      return function (v) {
          return new Two(Leaf.value, k, v, Leaf.value);
      };
  };
  var toUnfoldable = function (dictUnfoldable) {
      return function (m) {
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof Leaf) {
                          $copy_v = v.value1;
                          return;
                      };
                      if (v.value0 instanceof Two && (v.value0.value0 instanceof Leaf && v.value0.value3 instanceof Leaf)) {
                          $tco_done = true;
                          return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), v.value1));
                      };
                      if (v.value0 instanceof Two && v.value0.value0 instanceof Leaf) {
                          $tco_done = true;
                          return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                      };
                      if (v.value0 instanceof Two) {
                          $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                          return;
                      };
                      if (v.value0 instanceof Three) {
                          $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, new Data_List_Types.Cons(singleton(v.value0.value4)(v.value0.value5), new Data_List_Types.Cons(v.value0.value6, v.value1)))));
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 591, column 18 - line 600, column 71): " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 590, column 3 - line 590, column 19): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return Data_Unfoldable.unfoldr(dictUnfoldable)(go)(new Data_List_Types.Cons(m, Data_List_Types.Nil.value));
      };
  };
  var lookup = function (dictOrd) {
      return function (k) {
          var comp = Data_Ord.compare(dictOrd);
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Leaf) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Two) {
                      var v2 = comp(k)(v.value1);
                      if (v2 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      if (v2 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  if (v instanceof Three) {
                      var v3 = comp(k)(v.value1);
                      if (v3 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      var v4 = comp(k)(v.value4);
                      if (v4 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value5);
                      };
                      if (v3 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      if (v4 instanceof Data_Ordering.GT) {
                          $copy_v = v.value6;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 211, column 5 - line 211, column 22): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return go;
      };
  };
  var functorMap = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Leaf) {
              return Leaf.value;
          };
          if (v1 instanceof Two) {
              return new Two(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3));
          };
          if (v1 instanceof Three) {
              return new Three(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3), v1.value4, v(v1.value5), Data_Functor.map(functorMap)(v)(v1.value6));
          };
          throw new Error("Failed pattern match at Data.Map.Internal (line 101, column 1 - line 104, column 110): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var functorWithIndexMap = new Data_FunctorWithIndex.FunctorWithIndex(function () {
      return functorMap;
  }, function (v) {
      return function (v1) {
          if (v1 instanceof Leaf) {
              return Leaf.value;
          };
          if (v1 instanceof Two) {
              return new Two(Data_FunctorWithIndex.mapWithIndex(functorWithIndexMap)(v)(v1.value0), v1.value1, v(v1.value1)(v1.value2), Data_FunctorWithIndex.mapWithIndex(functorWithIndexMap)(v)(v1.value3));
          };
          if (v1 instanceof Three) {
              return new Three(Data_FunctorWithIndex.mapWithIndex(functorWithIndexMap)(v)(v1.value0), v1.value1, v(v1.value1)(v1.value2), Data_FunctorWithIndex.mapWithIndex(functorWithIndexMap)(v)(v1.value3), v1.value4, v(v1.value4)(v1.value5), Data_FunctorWithIndex.mapWithIndex(functorWithIndexMap)(v)(v1.value6));
          };
          throw new Error("Failed pattern match at Data.Map.Internal (line 106, column 1 - line 109, column 152): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var fromZipper = function ($copy_dictOrd) {
      return function ($copy_v) {
          return function ($copy_tree) {
              var $tco_var_dictOrd = $copy_dictOrd;
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(dictOrd, v, tree) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return tree;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof TwoLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
                          return;
                      };
                      if (v.value0 instanceof TwoRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
                          return;
                      };
                      if (v.value0 instanceof ThreeLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeMiddle) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 432, column 3 - line 437, column 88): " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 429, column 1 - line 429, column 80): " + [ v.constructor.name, tree.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_dictOrd, $tco_var_v, $copy_tree);
              };
              return $tco_result;
          };
      };
  };
  var insert = function (dictOrd) {
      return function (k) {
          return function (v) {
              var up = function ($copy_v1) {
                  return function ($copy_v2) {
                      var $tco_var_v1 = $copy_v1;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(v1, v2) {
                          if (v1 instanceof Data_List_Types.Nil) {
                              $tco_done = true;
                              return new Two(v2.value0, v2.value1, v2.value2, v2.value3);
                          };
                          if (v1 instanceof Data_List_Types.Cons) {
                              if (v1.value0 instanceof TwoLeft) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v2.value0, v2.value1, v2.value2, v2.value3, v1.value0.value0, v1.value0.value1, v1.value0.value2));
                              };
                              if (v1.value0 instanceof TwoRight) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0, v2.value1, v2.value2, v2.value3));
                              };
                              if (v1.value0 instanceof ThreeLeft) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v2.value0, v2.value1, v2.value2, v2.value3), v1.value0.value0, v1.value0.value1, new Two(v1.value0.value2, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeMiddle) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0), v2.value1, v2.value2, new Two(v2.value3, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeRight) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v1.value0.value3), v1.value0.value4, v1.value0.value5, new Two(v2.value0, v2.value1, v2.value2, v2.value3));
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.Map.Internal (line 468, column 5 - line 473, column 108): " + [ v1.value0.constructor.name, v2.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 465, column 3 - line 465, column 56): " + [ v1.constructor.name, v2.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_v1, $copy_v2);
                      };
                      return $tco_result;
                  };
              };
              var comp = Data_Ord.compare(dictOrd);
              var down = function ($copy_ctx) {
                  return function ($copy_v1) {
                      var $tco_var_ctx = $copy_ctx;
                      var $tco_done1 = false;
                      var $tco_result;
                      function $tco_loop(ctx, v1) {
                          if (v1 instanceof Leaf) {
                              $tco_done1 = true;
                              return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
                          };
                          if (v1 instanceof Two) {
                              var v2 = comp(k)(v1.value1);
                              if (v2 instanceof Data_Ordering.EQ) {
                                  $tco_done1 = true;
                                  return fromZipper(dictOrd)(ctx)(new Two(v1.value0, k, v, v1.value3));
                              };
                              if (v2 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                              $copy_v1 = v1.value3;
                              return;
                          };
                          if (v1 instanceof Three) {
                              var v3 = comp(k)(v1.value1);
                              if (v3 instanceof Data_Ordering.EQ) {
                                  $tco_done1 = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
                              };
                              var v4 = comp(k)(v1.value4);
                              if (v4 instanceof Data_Ordering.EQ) {
                                  $tco_done1 = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
                              };
                              if (v3 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              if (v3 instanceof Data_Ordering.GT && v4 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value3;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                              $copy_v1 = v1.value6;
                              return;
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 448, column 3 - line 448, column 55): " + [ ctx.constructor.name, v1.constructor.name ]);
                      };
                      while (!$tco_done1) {
                          $tco_result = $tco_loop($tco_var_ctx, $copy_v1);
                      };
                      return $tco_result;
                  };
              };
              return down(Data_List_Types.Nil.value);
          };
      };
  };
  var pop = function (dictOrd) {
      return function (k) {
          var up = function ($copy_ctxs) {
              return function ($copy_tree) {
                  var $tco_var_ctxs = $copy_ctxs;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(ctxs, tree) {
                      if (ctxs instanceof Data_List_Types.Nil) {
                          $tco_done = true;
                          return tree;
                      };
                      if (ctxs instanceof Data_List_Types.Cons) {
                          if (ctxs.value0 instanceof TwoLeft && (ctxs.value0.value2 instanceof Leaf && tree instanceof Leaf)) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoRight && (ctxs.value0.value0 instanceof Leaf && tree instanceof Leaf)) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Two) {
                              $tco_var_ctxs = ctxs.value1;
                              $copy_tree = new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3);
                              return;
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Two) {
                              $tco_var_ctxs = ctxs.value1;
                              $copy_tree = new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree);
                              return;
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6)));
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && (ctxs.value0.value2 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeRight && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value3 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value4, ctxs.value0.value5, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0, ctxs.value0.value5.value1, ctxs.value0.value5.value2, ctxs.value0.value5.value3)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0), ctxs.value0.value5.value1, ctxs.value0.value5.value2, new Two(ctxs.value0.value5.value3, ctxs.value0.value5.value4, ctxs.value0.value5.value5, ctxs.value0.value5.value6)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3), ctxs.value0.value3.value4, ctxs.value0.value3.value5, new Two(ctxs.value0.value3.value6, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 525, column 9 - line 542, column 136): " + [ ctxs.value0.constructor.name, tree.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 522, column 5 - line 542, column 136): " + [ ctxs.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_ctxs, $copy_tree);
                  };
                  return $tco_result;
              };
          };
          var removeMaxNode = function ($copy_ctx) {
              return function ($copy_m) {
                  var $tco_var_ctx = $copy_ctx;
                  var $tco_done1 = false;
                  var $tco_result;
                  function $tco_loop(ctx, m) {
                      if (m instanceof Two && (m.value0 instanceof Leaf && m.value3 instanceof Leaf)) {
                          $tco_done1 = true;
                          return up(ctx)(Leaf.value);
                      };
                      if (m instanceof Two) {
                          $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                          $copy_m = m.value3;
                          return;
                      };
                      if (m instanceof Three && (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf))) {
                          $tco_done1 = true;
                          return up(new Data_List_Types.Cons(new TwoRight(Leaf.value, m.value1, m.value2), ctx))(Leaf.value);
                      };
                      if (m instanceof Three) {
                          $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                          $copy_m = m.value6;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 554, column 5 - line 558, column 107): " + [ m.constructor.name ]);
                  };
                  while (!$tco_done1) {
                      $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                  };
                  return $tco_result;
              };
          };
          var maxNode = function ($copy_m) {
              var $tco_done2 = false;
              var $tco_result;
              function $tco_loop(m) {
                  if (m instanceof Two && m.value3 instanceof Leaf) {
                      $tco_done2 = true;
                      return {
                          key: m.value1,
                          value: m.value2
                      };
                  };
                  if (m instanceof Two) {
                      $copy_m = m.value3;
                      return;
                  };
                  if (m instanceof Three && m.value6 instanceof Leaf) {
                      $tco_done2 = true;
                      return {
                          key: m.value4,
                          value: m.value5
                      };
                  };
                  if (m instanceof Three) {
                      $copy_m = m.value6;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 545, column 33 - line 549, column 45): " + [ m.constructor.name ]);
              };
              while (!$tco_done2) {
                  $tco_result = $tco_loop($copy_m);
              };
              return $tco_result;
          };
          var comp = Data_Ord.compare(dictOrd);
          var down = function ($copy_ctx) {
              return function ($copy_m) {
                  var $tco_var_ctx = $copy_ctx;
                  var $tco_done3 = false;
                  var $tco_result;
                  function $tco_loop(ctx, m) {
                      if (m instanceof Leaf) {
                          $tco_done3 = true;
                          return Data_Maybe.Nothing.value;
                      };
                      if (m instanceof Two) {
                          var v = comp(k)(m.value1);
                          if (m.value3 instanceof Leaf && v instanceof Data_Ordering.EQ) {
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, up(ctx)(Leaf.value)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new TwoLeft(max.key, max.value, m.value3), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(m.value1, m.value2, m.value3), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                          $copy_m = m.value3;
                          return;
                      };
                      if (m instanceof Three) {
                          var leaves = (function () {
                              if (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf)) {
                                  return true;
                              };
                              return false;
                          })();
                          var v = comp(k)(m.value4);
                          var v3 = comp(k)(m.value1);
                          if (leaves && v3 instanceof Data_Ordering.EQ) {
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value4, m.value5, Leaf.value))));
                          };
                          if (leaves && v instanceof Data_Ordering.EQ) {
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value1, m.value2, Leaf.value))));
                          };
                          if (v3 instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new ThreeLeft(max.key, max.value, m.value3, m.value4, m.value5, m.value6), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value3);
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, removeMaxNode(new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, max.key, max.value, m.value6), ctx))(m.value3)));
                          };
                          if (v3 instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(m.value1, m.value2, m.value3, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          if (v3 instanceof Data_Ordering.GT && v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value3;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                          $copy_m = m.value6;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 495, column 34 - line 518, column 80): " + [ m.constructor.name ]);
                  };
                  while (!$tco_done3) {
                      $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                  };
                  return $tco_result;
              };
          };
          return down(Data_List_Types.Nil.value);
      };
  };
  var foldableMap = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (m) {
              return Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(f)(values(m));
          };
      };
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldl(Data_List_Types.foldableList)(f)(z)(values(m));
          };
      };
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldr(Data_List_Types.foldableList)(f)(z)(values(m));
          };
      };
  });
  var empty = Leaf.value;
  var fromFoldable = function (dictOrd) {
      return function (dictFoldable) {
          return Data_Foldable.foldl(dictFoldable)(function (m) {
              return function (v) {
                  return insert(dictOrd)(v.value0)(v.value1)(m);
              };
          })(empty);
      };
  };
  var fromFoldableWithIndex = function (dictOrd) {
      return function (dictFoldableWithIndex) {
          return Data_FoldableWithIndex.foldlWithIndex(dictFoldableWithIndex)(function (k) {
              return function (m) {
                  return function (v) {
                      return insert(dictOrd)(k)(v)(m);
                  };
              };
          })(empty);
      };
  };
  var $$delete = function (dictOrd) {
      return function (k) {
          return function (m) {
              return Data_Maybe.maybe(m)(Data_Tuple.snd)(pop(dictOrd)(k)(m));
          };
      };
  };
  var alter = function (dictOrd) {
      return function (f) {
          return function (k) {
              return function (m) {
                  var v = f(lookup(dictOrd)(k)(m));
                  if (v instanceof Data_Maybe.Nothing) {
                      return $$delete(dictOrd)(k)(m);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return insert(dictOrd)(k)(v.value0)(m);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 563, column 15 - line 565, column 25): " + [ v.constructor.name ]);
              };
          };
      };
  };
  var unionWith = function (dictOrd) {
      return function (f) {
          return function (m1) {
              return function (m2) {
                  var go = function (m) {
                      return function (v) {
                          return alter(dictOrd)((function () {
                              var $775 = Data_Maybe.maybe(v.value1)(f(v.value1));
                              return function ($776) {
                                  return Data_Maybe.Just.create($775($776));
                              };
                          })())(v.value0)(m);
                      };
                  };
                  return Data_Foldable.foldl(Data_List_Types.foldableList)(go)(m2)(toUnfoldable(Data_List_Types.unfoldableList)(m1));
              };
          };
      };
  };
  var union = function (dictOrd) {
      return unionWith(dictOrd)(Data_Function["const"]);
  };
  var unions = function (dictOrd) {
      return function (dictFoldable) {
          return Data_Foldable.foldl(dictFoldable)(union(dictOrd))(empty);
      };
  };
  exports["lookup"] = lookup;
  exports["fromFoldable"] = fromFoldable;
  exports["fromFoldableWithIndex"] = fromFoldableWithIndex;
  exports["unions"] = unions;
  exports["functorMap"] = functorMap;
  exports["functorWithIndexMap"] = functorWithIndexMap;
  exports["foldableMap"] = foldableMap;
})(PS);
(function(exports) {
  /* eslint-disable no-eq-null, eqeqeq */

  "use strict";          

  exports.nullable = function (a, r, f) {
    return a == null ? r : f(a);
  };
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Nullable"] = $PS["Data.Nullable"] || {};
  var exports = $PS["Data.Nullable"];
  var $foreign = $PS["Data.Nullable"];
  var Data_Maybe = $PS["Data.Maybe"];                                   
  var toMaybe = function (n) {
      return $foreign.nullable(n, Data_Maybe.Nothing.value, Data_Maybe.Just.create);
  };
  exports["toMaybe"] = toMaybe;
})(PS);
(function(exports) {
  "use strict";

  exports.regexImpl = function (left) {
    return function (right) {
      return function (s1) {
        return function (s2) {
          try {
            return right(new RegExp(s1, s2));
          } catch (e) {
            return left(e.message);
          }
        };
      };
    };
  };

  exports.test = function (r) {
    return function (s) {
      var lastIndex = r.lastIndex;
      var result = r.test(s);
      r.lastIndex = lastIndex;
      return result;
    };
  };

  exports._match = function (just) {
    return function (nothing) {
      return function (r) {
        return function (s) {
          var m = s.match(r);
          if (m == null || m.length === 0) {
            return nothing;
          } else {
            for (var i = 0; i < m.length; i++) {
              m[i] = m[i] == null ? nothing : just(m[i]);
            }
            return just(m);
          }
        };
      };
    };
  };

  exports.split = function (r) {
    return function (s) {
      return s.split(r);
    };
  };
})(PS["Data.String.Regex"] = PS["Data.String.Regex"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.String.Regex"] = $PS["Data.String.Regex"] || {};
  var exports = $PS["Data.String.Regex"];
  var $foreign = $PS["Data.String.Regex"];
  var Data_Either = $PS["Data.Either"];
  var Data_Maybe = $PS["Data.Maybe"];                                                          
  var renderFlags = function (v) {
      return (function () {
          if (v.value0.global) {
              return "g";
          };
          return "";
      })() + ((function () {
          if (v.value0.ignoreCase) {
              return "i";
          };
          return "";
      })() + ((function () {
          if (v.value0.multiline) {
              return "m";
          };
          return "";
      })() + ((function () {
          if (v.value0.dotAll) {
              return "s";
          };
          return "";
      })() + ((function () {
          if (v.value0.sticky) {
              return "y";
          };
          return "";
      })() + (function () {
          if (v.value0.unicode) {
              return "u";
          };
          return "";
      })()))));
  };
  var regex = function (s) {
      return function (f) {
          return $foreign.regexImpl(Data_Either.Left.create)(Data_Either.Right.create)(s)(renderFlags(f));
      };
  };
  var match = $foreign["_match"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["regex"] = regex;
  exports["match"] = match;
  exports["test"] = $foreign.test;
  exports["split"] = $foreign.split;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.String.Regex.Flags"] = $PS["Data.String.Regex.Flags"] || {};
  var exports = $PS["Data.String.Regex.Flags"];                      
  var RegexFlags = (function () {
      function RegexFlags(value0) {
          this.value0 = value0;
      };
      RegexFlags.create = function (value0) {
          return new RegexFlags(value0);
      };
      return RegexFlags;
  })();
  var global = new RegexFlags({
      global: true,
      ignoreCase: false,
      multiline: false,
      dotAll: false,
      sticky: false,
      unicode: false
  });
  exports["global"] = global;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.String.Regex.Unsafe"] = $PS["Data.String.Regex.Unsafe"] || {};
  var exports = $PS["Data.String.Regex.Unsafe"];
  var Control_Category = $PS["Control.Category"];
  var Data_Either = $PS["Data.Either"];
  var Data_String_Regex = $PS["Data.String.Regex"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];                
  var unsafeRegex = function (s) {
      return function (f) {
          return Data_Either.either(Partial_Unsafe.unsafeCrashWith)(Control_Category.identity(Control_Category.categoryFn))(Data_String_Regex.regex(s)(f));
      };
  };
  exports["unsafeRegex"] = unsafeRegex;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.String.Unicode"] = $PS["Data.String.Unicode"] || {};
  var exports = $PS["Data.String.Unicode"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_CodePoint_Unicode = $PS["Data.CodePoint.Unicode"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];                
  var convertFull = function (f) {
      var $0 = Control_Bind.bindFlipped(Control_Bind.bindArray)(f);
      return function ($1) {
          return Data_String_CodePoints.fromCodePointArray($0(Data_String_CodePoints.toCodePointArray($1)));
      };
  };
  var toLower = convertFull(Data_CodePoint_Unicode.toLower);
  exports["toLower"] = toLower;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.String.Extra"] = $PS["Data.String.Extra"] || {};
  var exports = $PS["Data.String.Extra"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_CodePoint_Unicode = $PS["Data.CodePoint.Unicode"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_String_Regex = $PS["Data.String.Regex"];
  var Data_String_Regex_Flags = $PS["Data.String.Regex.Flags"];
  var Data_String_Regex_Unsafe = $PS["Data.String.Regex.Unsafe"];
  var Data_String_Unicode = $PS["Data.String.Unicode"];                
  var upperCaseFirst = (function () {
      var $9 = Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(function (v) {
          return Data_String_CodePoints.fromCodePointArray(Data_CodePoint_Unicode.toTitle(v.head)) + Data_String_Unicode.toLower(v.tail);
      });
      return function ($10) {
          return $9(Data_String_CodePoints.uncons($10));
      };
  })();
  var regexGlobal = function (regexStr) {
      return Data_String_Regex_Unsafe.unsafeRegex(regexStr)(Data_String_Regex_Flags.global);
  };
  var regexHasASCIIWords = regexGlobal("[^\x00-/:-@[-`{-\x7f]+");
  var regexHasUnicodeWords = regexGlobal("[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9]");
  var regexUnicodeWords = (function () {
      var rsUpper = "[" + ("A-Z\\xc0-\\xd6\\xd8-\\xde" + "]");
      var rsOptVar = "[" + ("\\ufe0e\\ufe0f" + "]?");
      var rsLower = "[" + ("a-z\\xdf-\\xf6\\xf8-\\xff" + "]");
      var rsDingbat = "[" + ("\\u2700-\\u27bf" + "]");
      var rsBreakRange = "\\xac\\xb1\\xd7\\xf7" + ("\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf" + ("\\u2000-\\u206f" + " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000"));
      var rsBreak = "[" + (rsBreakRange + "]");
      var rsMisc = "[^" + ("\\ud800-\\udfff" + (rsBreakRange + ("\\d" + ("\\u2700-\\u27bf" + ("a-z\\xdf-\\xf6\\xf8-\\xff" + ("A-Z\\xc0-\\xd6\\xd8-\\xde" + "]"))))));
      var rsMiscLower = "(?:" + (rsLower + ("|" + (rsMisc + ")")));
      var rsMiscUpper = "(?:" + (rsUpper + ("|" + (rsMisc + ")")));
      var rsNonAstral = "[^" + ("\\ud800-\\udfff" + "]");
      var rsOptContrLower = "(?:" + ("['\\u2019]" + "(?:d|ll|m|re|s|t|ve))?");
      var rsOptContrUpper = "(?:" + ("['\\u2019]" + "(?:D|LL|M|RE|S|T|VE))?");
      var rsComboRange = "\\u0300-\\u036f" + ("\\ufe20-\\ufe2f" + ("\\u20d0-\\u20ff" + ("\\u1ab0-\\u1aff" + "\\u1dc0-\\u1dff")));
      var rsCombo = "[" + (rsComboRange + "]");
      var rsModifier = "(?:" + (rsCombo + ("|" + "rsFitz)"));
      var reOptMod = rsModifier + "?";
      var rsOptJoin = "(?:" + ("\\u200d" + ("(?:" + (rsNonAstral + ("|" + ("(?:\\ud83c[\\udde6-\\uddff]){2}" + ("|" + ("[\\ud800-\\udbff][\\udc00-\\udfff]" + (")" + (rsOptVar + (reOptMod + ")*"))))))))));
      var rsSeq = rsOptVar + (reOptMod + rsOptJoin);
      var rsEmoji = "(?:" + (rsDingbat + ("|" + ("(?:\\ud83c[\\udde6-\\uddff]){2}" + ("|" + ("[\\ud800-\\udbff][\\udc00-\\udfff]" + (")" + rsSeq))))));
      return regexGlobal(Data_String_Common.joinWith("|")([ rsUpper + ("?" + (rsLower + ("+" + (rsOptContrLower + ("(?=" + (rsBreak + ("|" + (rsUpper + "|$)")))))))), rsMiscUpper + ("+" + (rsOptContrUpper + ("(?=" + (rsBreak + ("|" + (rsUpper + (rsMiscLower + "|$)"))))))), rsUpper + ("?" + (rsMiscLower + ("+" + rsOptContrLower))), rsUpper + ("+" + rsOptContrUpper), "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", "\\d" + "+", rsEmoji ]));
  })();
  var unicodeWords = (function () {
      var $11 = Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Data_Monoid.monoidArray)(Data_Array_NonEmpty.catMaybes);
      var $12 = Data_String_Regex.match(regexUnicodeWords);
      return function ($13) {
          return $11($12($13));
      };
  })();
  var hasUnicodeWords = Data_String_Regex.test(regexHasUnicodeWords);
  var asciiWords = (function () {
      var $14 = Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Data_Monoid.monoidArray)(Data_Array_NonEmpty.catMaybes);
      var $15 = Data_String_Regex.match(regexHasASCIIWords);
      return function ($16) {
          return $14($15($16));
      };
  })();
  var words = function (string) {
      var $5 = hasUnicodeWords(string);
      if ($5) {
          return unicodeWords(string);
      };
      return asciiWords(string);
  };   
  var pascalCase = (function () {
      var $20 = Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(upperCaseFirst);
      return function ($21) {
          return $20(words($21));
      };
  })();
  exports["pascalCase"] = pascalCase;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["GraphQL.Client.CodeGen.GetSymbols"] = $PS["GraphQL.Client.CodeGen.GetSymbols"] || {};
  var exports = $PS["GraphQL.Client.CodeGen.GetSymbols"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_GraphQL_AST = $PS["Data.GraphQL.AST"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Show = $PS["Data.Show"];                
  var symbolsToCode = function (dictFoldable) {
      return function (modulePrefix) {
          return function (symbols) {
              var symbolsString = Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(function (s) {
                  return "\x0a" + (s + (" = Proxy :: Proxy" + Data_Show.show(Data_Show.showString)(s)));
              })(Data_Array.nub(Data_Ord.ordString)(Data_Array.fromFoldable(dictFoldable)(symbols)));
              return "module " + (modulePrefix + ("Symbols where\x0a\x0aimport Type.Proxy (Proxy(..))\x0a" + symbolsString));
          };
      };
  };
  var getSymbols = function (doc) {
      var argumentsDefinitionToSymbols = function (v) {
          return Control_Bind.bind(Data_List_Types.bindList)(v)(Data_Monoid.mempty(Data_Monoid.monoidFn(Data_List_Types.monoidList)));
      };
      var fieldDefinitionToSymbols = function (v) {
          return new Data_List_Types.Cons(v.name, Data_Maybe.maybe(Data_Monoid.mempty(Data_List_Types.monoidList))(argumentsDefinitionToSymbols)(v.argumentsDefinition));
      };
      var fieldsDefinitionToSymbols = function (v) {
          return Control_Bind.bind(Data_List_Types.bindList)(v)(fieldDefinitionToSymbols);
      };
      var objectTypeDefinitionToSymbols = function (v) {
          return Data_Maybe.maybe(Data_Monoid.mempty(Data_List_Types.monoidList))(fieldsDefinitionToSymbols)(v.fieldsDefinition);
      };
      var typeDefinitionToSymbols = function (v) {
          if (v instanceof Data_GraphQL_AST.TypeDefinition_ScalarTypeDefinition) {
              return Data_Monoid.mempty(Data_List_Types.monoidList);
          };
          if (v instanceof Data_GraphQL_AST.TypeDefinition_ObjectTypeDefinition) {
              return objectTypeDefinitionToSymbols(v.value0);
          };
          if (v instanceof Data_GraphQL_AST.TypeDefinition_InterfaceTypeDefinition) {
              return Data_Monoid.mempty(Data_List_Types.monoidList);
          };
          if (v instanceof Data_GraphQL_AST.TypeDefinition_UnionTypeDefinition) {
              return Data_Monoid.mempty(Data_List_Types.monoidList);
          };
          if (v instanceof Data_GraphQL_AST.TypeDefinition_EnumTypeDefinition) {
              return Data_Monoid.mempty(Data_List_Types.monoidList);
          };
          if (v instanceof Data_GraphQL_AST.TypeDefinition_InputObjectTypeDefinition) {
              return Data_Monoid.mempty(Data_List_Types.monoidList);
          };
          throw new Error("Failed pattern match at GraphQL.Client.CodeGen.GetSymbols (line 44, column 29 - line 50, column 61): " + [ v.constructor.name ]);
      };
      var typeSystemDefinitionToSymbols = function (v) {
          if (v instanceof Data_GraphQL_AST.TypeSystemDefinition_SchemaDefinition) {
              return Data_Monoid.mempty(Data_List_Types.monoidList);
          };
          if (v instanceof Data_GraphQL_AST.TypeSystemDefinition_TypeDefinition) {
              return typeDefinitionToSymbols(v.value0);
          };
          if (v instanceof Data_GraphQL_AST.TypeSystemDefinition_DirectiveDefinition) {
              return Data_Monoid.mempty(Data_List_Types.monoidList);
          };
          throw new Error("Failed pattern match at GraphQL.Client.CodeGen.GetSymbols (line 38, column 35 - line 41, column 61): " + [ v.constructor.name ]);
      };
      var definitionToSymbols = function (v) {
          if (v instanceof Data_GraphQL_AST.Definition_ExecutableDefinition) {
              return Data_Monoid.mempty(Data_List_Types.monoidList);
          };
          if (v instanceof Data_GraphQL_AST.Definition_TypeSystemDefinition) {
              return typeSystemDefinitionToSymbols(v.value0);
          };
          if (v instanceof Data_GraphQL_AST.Definition_TypeSystemExtension) {
              return Data_Monoid.mempty(Data_List_Types.monoidList);
          };
          throw new Error("Failed pattern match at GraphQL.Client.CodeGen.GetSymbols (line 32, column 25 - line 35, column 51): " + [ v.constructor.name ]);
      };
      return Data_List.sort(Data_Ord.ordString)(Data_List.nub(Data_Ord.ordString)(Control_Bind.bind(Data_List_Types.bindList)(Data_Newtype.unwrap()(doc))(definitionToSymbols)));
  };
  exports["symbolsToCode"] = symbolsToCode;
  exports["getSymbols"] = getSymbols;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["GraphQL.Client.CodeGen.Lines"] = $PS["GraphQL.Client.CodeGen.Lines"] || {};
  var exports = $PS["GraphQL.Client.CodeGen.Lines"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_String_Regex = $PS["Data.String.Regex"];
  var Data_String_Regex_Flags = $PS["Data.String.Regex.Flags"];
  var Data_String_Regex_Unsafe = $PS["Data.String.Regex.Unsafe"];                
  var toLines = Data_String_Regex.split(Data_String_Regex_Unsafe.unsafeRegex("\\n")(Data_String_Regex_Flags.global));
  var fromLines = Data_String_Common.joinWith("\x0a");
  var prependLines = function (pre) {
      var $2 = Data_Functor.map(Data_Functor.functorArray)(function (l) {
          var $1 = l === "";
          if ($1) {
              return l;
          };
          return pre + l;
      });
      return function ($3) {
          return fromLines($2(toLines($3)));
      };
  };
  var indent = prependLines("  ");
  var docComment = function (dictFoldable) {
      return Data_Foldable.foldMap(dictFoldable)(Data_Monoid.monoidString)(function (str) {
          return "\x0a" + (prependLines(" -- | ")(str) + "\x0a");
      });
  };
  exports["docComment"] = docComment;
  exports["indent"] = indent;
})(PS);
(function($PS) {
  "use strict";
  $PS["GraphQL.Client.CodeGen.Template.Enum"] = $PS["GraphQL.Client.CodeGen.Template.Enum"] || {};
  var exports = $PS["GraphQL.Client.CodeGen.Template.Enum"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_String_Common = $PS["Data.String.Common"];
  var GraphQL_Client_CodeGen_Lines = $PS["GraphQL.Client.CodeGen.Lines"];                
  var upper1st = function (s) {
      return Data_String_Common.toUpper(Data_String_CodePoints.take(1)(s)) + Data_String_CodePoints.drop(1)(s);
  };
  var template = function (modulePrefix) {
      return function (v) {
          var showMember = Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)("\x0a")(Data_Functor.mapFlipped(Data_Functor.functorArray)(v.values)(function (v1) {
              return "    " + (upper1st(v1) + (" -> \"" + (v1 + "\"")));
          }));
          var enumCtrs = Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)("\x0a  | ")(Data_Functor.map(Data_Functor.functorArray)(upper1st)(v.values));
          var decodeMember = Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)("\x0a")(Data_Functor.mapFlipped(Data_Functor.functorArray)(v.values)(function (v1) {
              return "    \"" + (v1 + ("\" -> pure " + (upper1st(v1) + "")));
          }));
          return "module " + (modulePrefix + ("Enum." + (v.name + (" where\x0a\x0aimport Prelude\x0a\x0aimport Data.Argonaut.Decode (class DecodeJson, JsonDecodeError(..), decodeJson)\x0aimport Data.Argonaut.Encode (class EncodeJson, encodeJson)\x0aimport Data.Either (Either(..))\x0aimport Data.Function (on)\x0aimport GraphQL.Client.Args (class ArgGql)\x0aimport GraphQL.Client.ToGqlString (class GqlArgString)\x0aimport GraphQL.Hasura.Decode (class DecodeHasura)\x0aimport GraphQL.Hasura.Encode (class EncodeHasura)\x0a" + (Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)("\x0a")(v.imports) + ("\x0a\x0a" + (GraphQL_Client_CodeGen_Lines.docComment(Data_Foldable.foldableMaybe)(v.description) + ("data " + (v.name + (" \x0a  = " + (enumCtrs + ("\x0a" + (v.customCode({
              name: v.name,
              values: v.values
          }) + ("\x0a\x0ainstance eq" + (v.name + (" :: Eq " + (v.name + (" where \x0a  eq = eq `on` show\x0a\x0ainstance ord" + (v.name + (" :: Ord " + (v.name + (" where\x0a  compare = compare `on` show\x0a\x0ainstance argToGql" + (v.name + (" :: ArgGql " + (v.name + (" " + (v.name + ("\x0a\x0ainstance gqlArgString" + (v.name + (" :: GqlArgString " + (v.name + (" where\x0a  toGqlArgStringImpl = show\x0a\x0ainstance decodeJson" + (v.name + (" :: DecodeJson " + (v.name + (" where\x0a  decodeJson = decodeJson >=> case _ of \x0a" + (decodeMember + ("\x0a    s -> Left $ TypeMismatch $ \"Not a " + (v.name + (": \" <> s\x0a\x0ainstance encodeJson" + (v.name + (" :: EncodeJson " + (v.name + (" where \x0a  encodeJson = show >>> encodeJson\x0a\x0ainstance decdoeHasura" + (v.name + (" :: DecodeHasura " + (v.name + (" where \x0a  decodeHasura = decodeJson\x0a\x0ainstance encodeHasura" + (v.name + (" :: EncodeHasura " + (v.name + (" where \x0a  encodeHasura = encodeJson\x0a\x0ainstance show" + (v.name + (" :: Show " + (v.name + (" where\x0a  show a = case a of \x0a" + (showMember + "\x0a")))))))))))))))))))))))))))))))))))))))))))))))))))))))));
      };
  };
  exports["template"] = template;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["GraphQL.Client.CodeGen.Template.Schema"] = $PS["GraphQL.Client.CodeGen.Template.Schema"] || {};
  var exports = $PS["GraphQL.Client.CodeGen.Template.Schema"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];                
  var template = function (v) {
      var getImport = function (v1) {
          return v1.moduleName + (" (" + (v1.typeName + ")"));
      };
      var enumImports = Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)("\x0a")(Data_Functor.mapFlipped(Data_Functor.functorArray)(v.enums)(function (v1) {
          return "import " + (v.modulePrefix + ("Enum." + (v1 + (" (" + (v1 + ")")))));
      }));
      return "module " + (v.modulePrefix + ("Schema." + (v.name + (" where\x0a\x0aimport Data.Maybe (Maybe)\x0aimport Data.Newtype (class Newtype)\x0aimport GraphQL.Client.Args (class ArgGql, class RecordArg, type (==>), NotNull)\x0aimport " + (Data_Maybe.maybe("GraphQL.Client.ID (ID)")(getImport)(v.idImport) + ("\x0a" + (enumImports + ("\x0a\x0a" + (v.mainSchemaCode + "\x0a")))))))));
  };
  exports["template"] = template;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["GraphQL.Client.CodeGen.Schema"] = $PS["GraphQL.Client.CodeGen.Schema"] || {};
  var exports = $PS["GraphQL.Client.CodeGen.Schema"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Argonaut_Decode_Class = $PS["Data.Argonaut.Decode.Class"];
  var Data_Argonaut_Encode_Class = $PS["Data.Argonaut.Encode.Class"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_FunctorWithIndex = $PS["Data.FunctorWithIndex"];
  var Data_GraphQL_AST = $PS["Data.GraphQL.AST"];
  var Data_GraphQL_Parser = $PS["Data.GraphQL.Parser"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Extra = $PS["Data.String.Extra"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect_Aff = $PS["Effect.Aff"];
  var GraphQL_Client_CodeGen_GetSymbols = $PS["GraphQL.Client.CodeGen.GetSymbols"];
  var GraphQL_Client_CodeGen_Lines = $PS["GraphQL.Client.CodeGen.Lines"];
  var GraphQL_Client_CodeGen_Template_Enum = $PS["GraphQL.Client.CodeGen.Template.Enum"];
  var GraphQL_Client_CodeGen_Template_Schema = $PS["GraphQL.Client.CodeGen.Template.Schema"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_String = $PS["Text.Parsing.Parser.String"];                
  var typeName = function (str) {
      var v = Data_String_Extra.pascalCase(str);
      if (v === "Id") {
          return "ID";
      };
      if (v === "Float") {
          return "Number";
      };
      if (v === "Numeric") {
          return "Number";
      };
      if (v === "Bigint") {
          return "Int";
      };
      if (v === "Smallint") {
          return "Int";
      };
      if (v === "Integer") {
          return "Int";
      };
      if (v === "Int") {
          return "Int";
      };
      if (v === "Int2") {
          return "Int";
      };
      if (v === "Int4") {
          return "Int";
      };
      if (v === "Int8") {
          return "Int";
      };
      if (v === "Text") {
          return "String";
      };
      if (v === "Citext") {
          return "String";
      };
      if (v === "Jsonb") {
          return "Json";
      };
      if (v === "Timestamp") {
          return "DateTime";
      };
      if (v === "Timestamptz") {
          return "DateTime";
      };
      return v;
  };
  var toImport = function (mainCode) {
      return Data_Functor.map(Data_Functor.functorArray)(function (t) {
          return Data_Monoid.guard(Data_Monoid.monoidString)(Data_String_CodeUnits.contains(t.moduleName)(mainCode))("\x0aimport " + (t.moduleName + (" as " + t.moduleName)));
      });
  };
  var namedTypeToPurs = function (v) {
      return typeName(v);
  };
  var inlineComment = Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(function (str) {
      return "\x0a{- " + (str + " -}\x0a");
  });
  var gqlToPursMainSchemaCode = function (v) {
      return function (doc) {
          var wrapNotNull = function (s) {
              return "(NotNull " + (s + ")");
          };
          var wrapMaybe = function (s) {
              return "(Maybe " + (s + ")");
          };
          var wrapArray = function (s) {
              return "(Array " + (s + ")");
          };
          var unionTypeDefinitionToPurs = function (v1) {
              return Data_Maybe.Nothing.value;
          };
          var rootOperationTypeDefinitionToPurs = function (v1) {
              var opStr = (function () {
                  if (v1.operationType instanceof Data_GraphQL_AST.Query) {
                      return "Query";
                  };
                  if (v1.operationType instanceof Data_GraphQL_AST.Mutation) {
                      return "Mutation";
                  };
                  if (v1.operationType instanceof Data_GraphQL_AST.Subscription) {
                      return "Subscription";
                  };
                  throw new Error("Failed pattern match at GraphQL.Client.CodeGen.Schema (line 185, column 13 - line 188, column 41): " + [ v1.operationType.constructor.name ]);
              })();
              return "type " + (opStr + (" = " + typeName(namedTypeToPurs(v1.namedType))));
          };
          var schemaDefinitionToPurs = function (v1) {
              return Data_Foldable.intercalate(Data_List_Types.foldableList)(Data_Monoid.monoidString)("\x0a\x0a")(Data_Functor.map(Data_List_Types.functorList)(rootOperationTypeDefinitionToPurs)(v1.rootOperationTypeDefinition));
          };
          var namedTypeToPursNullable = function ($160) {
              return wrapMaybe(namedTypeToPurs($160));
          };
          var typeToPurs = function (v1) {
              if (v1 instanceof Data_GraphQL_AST.Type_NamedType) {
                  return namedTypeToPursNullable(v1.value0);
              };
              if (v1 instanceof Data_GraphQL_AST.Type_ListType) {
                  return listTypeToPursNullable(v1.value0);
              };
              if (v1 instanceof Data_GraphQL_AST.Type_NonNullType) {
                  return notNullTypeToPurs(v1.value0);
              };
              throw new Error("Failed pattern match at GraphQL.Client.CodeGen.Schema (line 383, column 16 - line 386, column 72): " + [ v1.constructor.name ]);
          };
          var notNullTypeToPurs = function (v1) {
              if (v1 instanceof Data_GraphQL_AST.NonNullType_NamedType) {
                  return namedTypeToPurs(v1.value0);
              };
              if (v1 instanceof Data_GraphQL_AST.NonNullType_ListType) {
                  return listTypeToPurs(v1.value0);
              };
              throw new Error("Failed pattern match at GraphQL.Client.CodeGen.Schema (line 397, column 23 - line 399, column 51): " + [ v1.constructor.name ]);
          };
          var listTypeToPursNullable = function (t) {
              return wrapMaybe(listTypeToPurs(t));
          };
          var listTypeToPurs = function (v1) {
              return wrapArray(typeToPurs(v1));
          };
          var interfaceTypeDefinitionToPurs = function (v1) {
              return Data_Maybe.Nothing.value;
          };
          var getDefinitionTypeName = Data_String_CodePoints.takeWhile(Data_Eq.notEq(Data_String_CodePoints.eqCodePoint)(Data_String_CodePoints.codePointFromChar("=")));
          var removeDuplicateDefinitions = (function () {
              var $161 = Data_List.fromFoldable(Data_Foldable.foldableArray);
              var $162 = Data_Array.nubBy(Data_Function.on(Data_Ord.compare(Data_Ord.ordString))(getDefinitionTypeName));
              var $163 = Data_Array.fromFoldable(Data_List_Types.foldableList);
              return function ($164) {
                  return $161($162($163($164)));
              };
          })();
          var enumTypeDefinitionToPurs = function (v1) {
              return Data_Maybe.Nothing.value;
          };
          var directiveDefinitionToPurs = function (v1) {
              return Data_Maybe.Nothing.value;
          };
          var builtInTypes = [ "Int", "Number", "String", "Boolean" ];
          var scalarTypeDefinitionToPurs = function (v1) {
              var tName = typeName(v1.name);
              var typeAndModule = Data_Maybe.fromMaybe({
                  moduleName: "Data.Argonaut.Core",
                  typeName: "Json -- Unknown scalar type. Add " + (tName + " to externalTypes in codegen options to override this behaviour")
              })(Data_Map_Internal.lookup(Data_Ord.ordString)(tName)(v.externalTypes));
              return Data_Monoid.guard(Data_Monoid.monoidString)(Data_Array.notElem(Data_Eq.eqString)(tName)(builtInTypes))(GraphQL_Client_CodeGen_Lines.docComment(Data_Foldable.foldableMaybe)(v1.description) + ("type " + (tName + (" = " + (typeAndModule.moduleName + ("." + typeAndModule.typeName))))));
          };
          var argTypeToPurs = function (v1) {
              if (v1 instanceof Data_GraphQL_AST.Type_NamedType) {
                  return namedTypeToPurs(v1.value0);
              };
              if (v1 instanceof Data_GraphQL_AST.Type_ListType) {
                  return argListTypeToPurs(v1.value0);
              };
              if (v1 instanceof Data_GraphQL_AST.Type_NonNullType) {
                  return wrapNotNull(argNotNullTypeToPurs(v1.value0));
              };
              throw new Error("Failed pattern match at GraphQL.Client.CodeGen.Schema (line 367, column 19 - line 370, column 89): " + [ v1.constructor.name ]);
          };
          var argNotNullTypeToPurs = function (v1) {
              if (v1 instanceof Data_GraphQL_AST.NonNullType_NamedType) {
                  return namedTypeToPurs(v1.value0);
              };
              if (v1 instanceof Data_GraphQL_AST.NonNullType_ListType) {
                  return argListTypeToPurs(v1.value0);
              };
              throw new Error("Failed pattern match at GraphQL.Client.CodeGen.Schema (line 373, column 26 - line 375, column 54): " + [ v1.constructor.name ]);
          };
          var argListTypeToPurs = function (v1) {
              return "(Array " + (argTypeToPurs(v1) + ")");
          };
          var inputValueDefinitionToPurs = function (objectName) {
              return function (v1) {
                  return inlineComment(v1.description) + (v1.name + (" :: " + (function () {
                      var v2 = Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Map_Internal.lookup(Data_Ord.ordString)(objectName)(v.fieldTypeOverrides))(Data_Map_Internal.lookup(Data_Ord.ordString)(v1.name));
                      if (v2 instanceof Data_Maybe.Nothing) {
                          return argTypeToPurs(v1.type);
                      };
                      if (v2 instanceof Data_Maybe.Just) {
                          if (v1.type instanceof Data_GraphQL_AST.Type_NonNullType) {
                              return wrapNotNull(v2.value0.moduleName + ("." + v2.value0.typeName));
                          };
                          if (v1.type instanceof Data_GraphQL_AST.Type_ListType) {
                              return wrapArray(v2.value0.moduleName + ("." + v2.value0.typeName));
                          };
                          return v2.value0.moduleName + ("." + v2.value0.typeName);
                      };
                      throw new Error("Failed pattern match at GraphQL.Client.CodeGen.Schema (line 356, column 10 - line 361, column 55): " + [ v2.constructor.name ]);
                  })()));
              };
          };
          var inputValueToFieldsDefinitionToPurs = function (objectName) {
              return function (definitions) {
                  return GraphQL_Client_CodeGen_Lines.indent("\x0a{ " + (Data_Foldable.intercalate(Data_List_Types.foldableList)(Data_Monoid.monoidString)("\x0a, ")(Data_Functor.map(Data_List_Types.functorList)(inputValueDefinitionToPurs(objectName))(definitions)) + "\x0a}"));
              };
          };
          var inputObjectTypeDefinitionToPurs = function (v1) {
              var tName = typeName(v1.name);
              return GraphQL_Client_CodeGen_Lines.docComment(Data_Foldable.foldableMaybe)(v1.description) + ("newtype " + (tName + (Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(function (v2) {
                  return " = " + (tName + inputValueToFieldsDefinitionToPurs(tName)(v2));
              })(v1.inputFieldsDefinition) + ("\x0aderive instance newtype" + (tName + (" :: Newtype " + (tName + (" _" + ("\x0ainstance argToGql" + (tName + (" :: (Newtype " + (tName + (" {| p},  RecordArg p a u) => ArgGql " + (tName + " { | a }"))))))))))))));
          };
          var inputValueDefinitionsToPurs = function (v1) {
              return inlineComment(v1.description) + (v1.name + (" :: " + argTypeToPurs(v1.type)));
          };
          var argumentsDefinitionToPurs = function (v1) {
              return GraphQL_Client_CodeGen_Lines.indent("\x0a{ " + (Data_Foldable.intercalate(Data_List_Types.foldableList)(Data_Monoid.monoidString)("\x0a, ")(Data_Functor.map(Data_List_Types.functorList)(inputValueDefinitionsToPurs)(v1)) + "\x0a}\x0a==> "));
          };
          var fieldDefinitionToPurs = function (objectName) {
              return function (v1) {
                  return inlineComment(v1.description) + (v1.name + (" :: " + (Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(argumentsDefinitionToPurs)(v1.argumentsDefinition) + (function () {
                      var v2 = Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Map_Internal.lookup(Data_Ord.ordString)(objectName)(v.fieldTypeOverrides))(Data_Map_Internal.lookup(Data_Ord.ordString)(v1.name));
                      if (v2 instanceof Data_Maybe.Nothing) {
                          return typeToPurs(v1.type);
                      };
                      if (v2 instanceof Data_Maybe.Just) {
                          if (v1.type instanceof Data_GraphQL_AST.Type_NonNullType) {
                              return v2.value0.moduleName + ("." + v2.value0.typeName);
                          };
                          if (v1.type instanceof Data_GraphQL_AST.Type_ListType) {
                              return wrapArray(v2.value0.moduleName + ("." + v2.value0.typeName));
                          };
                          return wrapMaybe(v2.value0.moduleName + ("." + v2.value0.typeName));
                      };
                      throw new Error("Failed pattern match at GraphQL.Client.CodeGen.Schema (line 272, column 10 - line 277, column 67): " + [ v2.constructor.name ]);
                  })())));
              };
          };
          var fieldsDefinitionToPurs = function (objectName) {
              return function (v1) {
                  return GraphQL_Client_CodeGen_Lines.indent("\x0a{ " + (Data_Foldable.intercalate(Data_List_Types.foldableList)(Data_Monoid.monoidString)("\x0a, ")(Data_Functor.map(Data_List_Types.functorList)(fieldDefinitionToPurs(objectName))(v1)) + "\x0a}"));
              };
          };
          var objectTypeDefinitionToPurs = function (v1) {
              var tName = typeName(v1.name);
              return GraphQL_Client_CodeGen_Lines.docComment(Data_Foldable.foldableMaybe)(v1.description) + (function () {
                  if (v.useNewtypesForRecords) {
                      return "newtype " + (typeName(v1.name) + (Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(function (fd) {
                          return " = " + (typeName(v1.name) + (" " + fieldsDefinitionToPurs(tName)(fd)));
                      })(v1.fieldsDefinition) + ("\x0aderive instance newtype" + (tName + (" :: Newtype " + (tName + (" _" + ("\x0ainstance argToGql" + (tName + (" :: (Newtype " + (tName + (" {| p},  RecordArg p a u) => ArgGql " + (tName + " { | a }")))))))))))));
                  };
                  return "type " + (typeName(v1.name) + Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(function (fd) {
                      return " = " + fieldsDefinitionToPurs(tName)(fd);
                  })(v1.fieldsDefinition));
              })();
          };
          var typeDefinitionToPurs = function (v1) {
              if (v1 instanceof Data_GraphQL_AST.TypeDefinition_ScalarTypeDefinition) {
                  return Data_Maybe.Just.create(scalarTypeDefinitionToPurs(v1.value0));
              };
              if (v1 instanceof Data_GraphQL_AST.TypeDefinition_ObjectTypeDefinition) {
                  return Data_Maybe.Just.create(objectTypeDefinitionToPurs(v1.value0));
              };
              if (v1 instanceof Data_GraphQL_AST.TypeDefinition_InterfaceTypeDefinition) {
                  return interfaceTypeDefinitionToPurs(v1.value0);
              };
              if (v1 instanceof Data_GraphQL_AST.TypeDefinition_UnionTypeDefinition) {
                  return unionTypeDefinitionToPurs(v1.value0);
              };
              if (v1 instanceof Data_GraphQL_AST.TypeDefinition_EnumTypeDefinition) {
                  return enumTypeDefinitionToPurs(v1.value0);
              };
              if (v1 instanceof Data_GraphQL_AST.TypeDefinition_InputObjectTypeDefinition) {
                  return Data_Maybe.Just.create(inputObjectTypeDefinitionToPurs(v1.value0));
              };
              throw new Error("Failed pattern match at GraphQL.Client.CodeGen.Schema (line 191, column 26 - line 197, column 143): " + [ v1.constructor.name ]);
          };
          var typeSystemDefinitionToPurs = function (v1) {
              if (v1 instanceof Data_GraphQL_AST.TypeSystemDefinition_SchemaDefinition) {
                  return Data_Maybe.Just.create(schemaDefinitionToPurs(v1.value0));
              };
              if (v1 instanceof Data_GraphQL_AST.TypeSystemDefinition_TypeDefinition) {
                  return typeDefinitionToPurs(v1.value0);
              };
              if (v1 instanceof Data_GraphQL_AST.TypeSystemDefinition_DirectiveDefinition) {
                  return directiveDefinitionToPurs(v1.value0);
              };
              throw new Error("Failed pattern match at GraphQL.Client.CodeGen.Schema (line 170, column 32 - line 173, column 118): " + [ v1.constructor.name ]);
          };
          var definitionToPurs = function (v1) {
              if (v1 instanceof Data_GraphQL_AST.Definition_ExecutableDefinition) {
                  return Data_Maybe.Nothing.value;
              };
              if (v1 instanceof Data_GraphQL_AST.Definition_TypeSystemDefinition) {
                  return typeSystemDefinitionToPurs(v1.value0);
              };
              if (v1 instanceof Data_GraphQL_AST.Definition_TypeSystemExtension) {
                  return Data_Maybe.Nothing.value;
              };
              throw new Error("Failed pattern match at GraphQL.Client.CodeGen.Schema (line 164, column 22 - line 167, column 52): " + [ v1.constructor.name ]);
          };
          var mainCode = Data_Foldable.intercalate(Data_List_Types.foldableList)(Data_Monoid.monoidString)("\x0a\x0a")(removeDuplicateDefinitions(Data_List.mapMaybe(definitionToPurs)(Data_Newtype.unwrap()(doc))));
          var imports = Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(Data_Array.nub(Data_Ord.ordString)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(toImport(mainCode)(Data_Array.fromFoldable(Data_Map_Internal.foldableMap)(v.externalTypes)))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(toImport(mainCode)(Data_Array.fromFoldable(Data_Map_Internal.foldableMap)(Data_Map_Internal.unions(Data_Ord.ordString)(Data_Map_Internal.foldableMap)(v.fieldTypeOverrides))))(toImport(mainCode)([ {
              moduleName: "Data.Argonaut.Core"
          } ])))));
          return imports + (Data_Monoid.guard(Data_Monoid.monoidString)(imports !== "")("\x0a") + ("\x0a" + mainCode));
      };
  };
  var gqlToPursEnums = (function () {
      var enumValuesDefinitionToPurs = function (def) {
          return Data_Array.fromFoldable(Data_List_Types.foldableList)(Data_Functor.mapFlipped(Data_List_Types.functorList)(Data_Newtype.unwrap()(def))(function (v) {
              return Data_Newtype.unwrap()(v.enumValue);
          }));
      };
      var typeDefinitionToPurs = function (v) {
          if (v instanceof Data_GraphQL_AST.TypeDefinition_EnumTypeDefinition) {
              return new Data_Maybe.Just({
                  name: typeName(v.value0.name),
                  description: v.value0.description,
                  values: Data_Maybe.maybe([  ])(enumValuesDefinitionToPurs)(v.value0.enumValuesDefinition)
              });
          };
          return Data_Maybe.Nothing.value;
      };
      var typeSystemDefinitionToPurs = function (v) {
          if (v instanceof Data_GraphQL_AST.TypeSystemDefinition_TypeDefinition) {
              return typeDefinitionToPurs(v.value0);
          };
          return Data_Maybe.Nothing.value;
      };
      var definitionToEnum = function (v) {
          if (v instanceof Data_GraphQL_AST.Definition_TypeSystemDefinition) {
              return typeSystemDefinitionToPurs(v.value0);
          };
          return Data_Maybe.Nothing.value;
      };
      var $165 = Data_Array.fromFoldable(Data_List_Types.foldableList);
      var $166 = Data_List.mapMaybe(definitionToEnum);
      var $167 = Data_Newtype.unwrap();
      return function ($168) {
          return $165($166($167($168)));
      };
  })();
  var schemaFromGqlToPurs = function (opts) {
      return function (v) {
          return Data_Functor.mapFlipped(Data_Either.functorEither)(Text_Parsing_Parser.runParser(v.schema)(Data_GraphQL_Parser.document(Text_Parsing_Parser_String.stringLikeString)))(function (ast) {
              var symbols = Data_Array.fromFoldable(Data_List_Types.foldableList)(GraphQL_Client_CodeGen_GetSymbols.getSymbols(ast));
              return {
                  mainSchemaCode: gqlToPursMainSchemaCode(opts)(ast),
                  enums: gqlToPursEnums(ast),
                  symbols: symbols,
                  moduleName: v.moduleName
              };
          });
      };
  };
  var schemaFromGqlToPursWithCache = function (opts) {
      return function (v) {
          var go = function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(schemaFromGqlToPurs(opts)({
                      schema: v.schema,
                      moduleName: v.moduleName
                  }));
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(v1.value0.get(v.schema))(function (jsonMay) {
                      return Control_Bind.bind(Effect_Aff.bindAff)((function () {
                          var v2 = Control_Bind.bind(Data_Maybe.bindMaybe)(jsonMay)((function () {
                              var $169 = Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeRecord(Data_Argonaut_Decode_Class.gDecodeJsonCons(Data_Argonaut_Decode_Class.decodeFieldId(Data_Argonaut_Decode_Class.decodeArray(Data_Argonaut_Decode_Class.decodeRecord(Data_Argonaut_Decode_Class.gDecodeJsonCons(Data_Argonaut_Decode_Class.decodeFieldMaybe(Data_Argonaut_Decode_Class.decodeJsonString))(Data_Argonaut_Decode_Class.gDecodeJsonCons(Data_Argonaut_Decode_Class.decodeFieldId(Data_Argonaut_Decode_Class.decodeJsonString))(Data_Argonaut_Decode_Class.gDecodeJsonCons(Data_Argonaut_Decode_Class.decodeFieldId(Data_Argonaut_Decode_Class.decodeArray(Data_Argonaut_Decode_Class.decodeJsonString)))(Data_Argonaut_Decode_Class.gDecodeJsonNil)(new Data_Symbol.IsSymbol(function () {
                                  return "values";
                              }))()())(new Data_Symbol.IsSymbol(function () {
                                  return "name";
                              }))()())(new Data_Symbol.IsSymbol(function () {
                                  return "description";
                              }))()())())))(Data_Argonaut_Decode_Class.gDecodeJsonCons(Data_Argonaut_Decode_Class.decodeFieldId(Data_Argonaut_Decode_Class.decodeJsonString))(Data_Argonaut_Decode_Class.gDecodeJsonCons(Data_Argonaut_Decode_Class.decodeFieldId(Data_Argonaut_Decode_Class.decodeJsonString))(Data_Argonaut_Decode_Class.gDecodeJsonCons(Data_Argonaut_Decode_Class.decodeFieldId(Data_Argonaut_Decode_Class.decodeArray(Data_Argonaut_Decode_Class.decodeJsonString)))(Data_Argonaut_Decode_Class.gDecodeJsonNil)(new Data_Symbol.IsSymbol(function () {
                                  return "symbols";
                              }))()())(new Data_Symbol.IsSymbol(function () {
                                  return "moduleName";
                              }))()())(new Data_Symbol.IsSymbol(function () {
                                  return "mainSchemaCode";
                              }))()())(new Data_Symbol.IsSymbol(function () {
                                  return "enums";
                              }))()())());
                              return function ($170) {
                                  return Data_Either.hush($169($170));
                              };
                          })());
                          if (v2 instanceof Data_Maybe.Nothing) {
                              return go(Data_Maybe.Nothing.value);
                          };
                          if (v2 instanceof Data_Maybe.Just) {
                              return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Data_Either.Right(v2.value0));
                          };
                          throw new Error("Failed pattern match at GraphQL.Client.CodeGen.Schema (line 104, column 13 - line 106, column 35): " + [ v2.constructor.name ]);
                      })())(function (eVal) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)((function () {
                              if (eVal instanceof Data_Either.Right) {
                                  return v1.value0.set({
                                      key: v.schema,
                                      val: Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeRecord(Data_Argonaut_Encode_Class.gEncodeJsonCons(Data_Argonaut_Encode_Class.encodeJsonArray(Data_Argonaut_Encode_Class.encodeRecord(Data_Argonaut_Encode_Class.gEncodeJsonCons(Data_Argonaut_Encode_Class.encodeJsonMaybe(Data_Argonaut_Encode_Class.encodeJsonJString))(Data_Argonaut_Encode_Class.gEncodeJsonCons(Data_Argonaut_Encode_Class.encodeJsonJString)(Data_Argonaut_Encode_Class.gEncodeJsonCons(Data_Argonaut_Encode_Class.encodeJsonArray(Data_Argonaut_Encode_Class.encodeJsonJString))(Data_Argonaut_Encode_Class.gEncodeJsonNil)(new Data_Symbol.IsSymbol(function () {
                                          return "values";
                                      }))())(new Data_Symbol.IsSymbol(function () {
                                          return "name";
                                      }))())(new Data_Symbol.IsSymbol(function () {
                                          return "description";
                                      }))())()))(Data_Argonaut_Encode_Class.gEncodeJsonCons(Data_Argonaut_Encode_Class.encodeJsonJString)(Data_Argonaut_Encode_Class.gEncodeJsonCons(Data_Argonaut_Encode_Class.encodeJsonJString)(Data_Argonaut_Encode_Class.gEncodeJsonCons(Data_Argonaut_Encode_Class.encodeJsonArray(Data_Argonaut_Encode_Class.encodeJsonJString))(Data_Argonaut_Encode_Class.gEncodeJsonNil)(new Data_Symbol.IsSymbol(function () {
                                          return "symbols";
                                      }))())(new Data_Symbol.IsSymbol(function () {
                                          return "moduleName";
                                      }))())(new Data_Symbol.IsSymbol(function () {
                                          return "mainSchemaCode";
                                      }))())(new Data_Symbol.IsSymbol(function () {
                                          return "enums";
                                      }))())())(eVal.value0)
                                  });
                              };
                              return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
                          })())(function () {
                              return Control_Applicative.pure(Effect_Aff.applicativeAff)(eVal);
                          });
                      });
                  });
              };
              throw new Error("Failed pattern match at GraphQL.Client.CodeGen.Schema (line 100, column 3 - line 100, column 70): " + [ v1.constructor.name ]);
          };
          return go(opts.cache);
      };
  };
  var schemasFromGqlToPurs = function (opts_) {
      var fieldTypeOverrides = Data_Map_Internal.unions(Data_Ord.ordString)(Data_Map_Internal.foldableMap)(Data_FunctorWithIndex.mapWithIndex(Data_Map_Internal.functorWithIndexMap)(function (gqlObjectName) {
          return function (obj) {
              return Data_Map_Internal.fromFoldable(Data_Ord.ordString)(Data_Foldable.foldableArray)([ new Data_Tuple.Tuple(gqlObjectName, obj), new Data_Tuple.Tuple(gqlObjectName + "InsertInput", obj), new Data_Tuple.Tuple(gqlObjectName + "MinFields", obj), new Data_Tuple.Tuple(gqlObjectName + "MaxFields", obj), new Data_Tuple.Tuple(gqlObjectName + "SetInput", obj), Data_Tuple.Tuple.create(gqlObjectName + "BoolExp")(Data_Functor.map(Data_Map_Internal.functorMap)(function (o) {
                  return {
                      typeName: o.typeName + "ComparisonExp",
                      moduleName: o.moduleName
                  };
              })(obj)) ]);
          };
      })(opts_.fieldTypeOverrides));
      var opts = {
          fieldTypeOverrides: fieldTypeOverrides,
          cache: opts_.cache,
          customEnumCode: opts_.customEnumCode,
          dir: opts_.dir,
          enumImports: opts_.enumImports,
          externalTypes: opts_.externalTypes,
          idImport: opts_.idImport,
          isHasura: opts_.isHasura,
          modulePath: opts_.modulePath,
          useNewtypesForRecords: opts_.useNewtypesForRecords
      };
      var modulePrefix = Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(function (v) {
          return v + ".";
      })(opts.modulePath);
      var collectSchemas = function (pursGqls) {
          return {
              schemas: Data_Functor.mapFlipped(Data_Functor.functorArray)(pursGqls)(function (pg) {
                  return {
                      code: GraphQL_Client_CodeGen_Template_Schema.template({
                          name: pg.moduleName,
                          mainSchemaCode: pg.mainSchemaCode,
                          idImport: opts.idImport,
                          enums: Data_Functor.map(Data_Functor.functorArray)(function (v) {
                              return v.name;
                          })(pg.enums),
                          modulePrefix: modulePrefix
                      }),
                      path: opts.dir + ("/Schema/" + (pg.moduleName + ".purs"))
                  };
              }),
              enums: Data_Array.nubBy(Data_Function.on(Data_Ord.compare(Data_Ord.ordString))(function (v) {
                  return v.path;
              }))(Control_Bind.bind(Control_Bind.bindArray)(pursGqls)(function (pg) {
                  return Data_Functor.mapFlipped(Data_Functor.functorArray)(pg.enums)(function (v) {
                      return {
                          code: GraphQL_Client_CodeGen_Template_Enum.template(modulePrefix)({
                              name: v.name,
                              values: v.values,
                              description: v.description,
                              imports: opts.enumImports,
                              customCode: opts.customEnumCode
                          }),
                          path: opts.dir + ("/Enum/" + (v.name + ".purs"))
                      };
                  });
              })),
              symbols: (function (syms) {
                  return {
                      path: opts.dir + "/Symbols.purs",
                      code: GraphQL_Client_CodeGen_GetSymbols.symbolsToCode(Data_Foldable.foldableArray)(modulePrefix)(syms)
                  };
              })(Control_Bind.bind(Control_Bind.bindArray)(pursGqls)(function (v) {
                  return v.symbols;
              }))
          };
      };
      var $171 = Data_Functor.map(Effect_Aff.functorAff)(Data_Functor.map(Data_Either.functorEither)(collectSchemas));
      var $172 = Data_Functor.map(Effect_Aff.functorAff)(Data_Traversable.sequence(Data_Traversable.traversableArray)(Data_Either.applicativeEither));
      var $173 = Data_Traversable.traverse(Data_Traversable.traversableArray)(Effect_Aff.applicativeAff)(schemaFromGqlToPursWithCache(opts));
      return function ($174) {
          return $171($172($173($174)));
      };
  };
  exports["schemasFromGqlToPurs"] = schemasFromGqlToPurs;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["GraphQL.Client.CodeGen.Js"] = $PS["GraphQL.Client.CodeGen.Js"] || {};
  var exports = $PS["GraphQL.Client.CodeGen.Js"];
  var Control_Promise = $PS["Control.Promise"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Function_Uncurried = $PS["Data.Function.Uncurried"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Foreign_Object = $PS["Foreign.Object"];
  var GraphQL_Client_CodeGen_Schema = $PS["GraphQL.Client.CodeGen.Schema"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];                
  var fromNullable = function (a) {
      var $5 = Data_Maybe.fromMaybe(a);
      return function ($6) {
          return $5(Data_Nullable.toMaybe($6));
      };
  };
  var schemasFromGqlToPursJs = (function () {
      var go = function (optsJs) {
          var opts = {
              externalTypes: Data_Map_Internal.fromFoldableWithIndex(Data_Ord.ordString)(Foreign_Object.foldableWithIndexObject)(fromNullable(Data_Monoid.mempty(Foreign_Object.monoidObject(Data_Semigroup.semigroupRecord()(Data_Semigroup.semigroupRecordCons(new Data_Symbol.IsSymbol(function () {
                  return "moduleName";
              }))()(Data_Semigroup.semigroupRecordCons(new Data_Symbol.IsSymbol(function () {
                  return "typeName";
              }))()(Data_Semigroup.semigroupRecordNil)(Data_Semigroup.semigroupString))(Data_Semigroup.semigroupString)))))(optsJs.externalTypes)),
              fieldTypeOverrides: Data_Functor.map(Data_Map_Internal.functorMap)(Data_Map_Internal.fromFoldableWithIndex(Data_Ord.ordString)(Foreign_Object.foldableWithIndexObject))(Data_Map_Internal.fromFoldableWithIndex(Data_Ord.ordString)(Foreign_Object.foldableWithIndexObject)(fromNullable(Data_Monoid.mempty(Foreign_Object.monoidObject(Foreign_Object.semigroupObject(Data_Semigroup.semigroupRecord()(Data_Semigroup.semigroupRecordCons(new Data_Symbol.IsSymbol(function () {
                  return "moduleName";
              }))()(Data_Semigroup.semigroupRecordCons(new Data_Symbol.IsSymbol(function () {
                  return "typeName";
              }))()(Data_Semigroup.semigroupRecordNil)(Data_Semigroup.semigroupString))(Data_Semigroup.semigroupString))))))(optsJs.fieldTypeOverrides))),
              dir: fromNullable("")(optsJs.dir),
              modulePath: fromNullable([  ])(optsJs.modulePath),
              isHasura: fromNullable(false)(optsJs.isHasura),
              useNewtypesForRecords: fromNullable(true)(optsJs.useNewtypesForRecords),
              enumImports: fromNullable([  ])(optsJs.enumImports),
              customEnumCode: fromNullable(Data_Function["const"](""))(optsJs.customEnumCode),
              idImport: Data_Nullable.toMaybe(optsJs.idImport),
              cache: Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(Data_Nullable.toMaybe(optsJs.cache))(function (v) {
                  return {
                      get: Data_Functor.map(Data_Functor.functorFn)((function () {
                          var $7 = Data_Functor.map(Effect_Aff.functorAff)(Data_Nullable.toMaybe);
                          return function ($8) {
                              return $7(Control_Promise.toAff($8));
                          };
                      })())(v.get),
                      set: Data_Functor.map(Data_Functor.functorFn)(Control_Promise.toAff)(v.set)
                  };
              })
          };
          var getError = function (err) {
              return {
                  parseError: Text_Parsing_Parser.parseErrorMessage(err),
                  argsTypeError: Data_Monoid.mempty(Data_Monoid.monoidString),
                  result: Data_Monoid.mempty(Data_Monoid.monoidRecord()(Data_Monoid.monoidRecordCons(new Data_Symbol.IsSymbol(function () {
                      return "enums";
                  }))(Data_Monoid.monoidArray)()(Data_Monoid.monoidRecordCons(new Data_Symbol.IsSymbol(function () {
                      return "schemas";
                  }))(Data_Monoid.monoidArray)()(Data_Monoid.monoidRecordCons(new Data_Symbol.IsSymbol(function () {
                      return "symbols";
                  }))(Data_Monoid.monoidRecord()(Data_Monoid.monoidRecordCons(new Data_Symbol.IsSymbol(function () {
                      return "code";
                  }))(Data_Monoid.monoidString)()(Data_Monoid.monoidRecordCons(new Data_Symbol.IsSymbol(function () {
                      return "path";
                  }))(Data_Monoid.monoidString)()(Data_Monoid.monoidRecordNil))))()(Data_Monoid.monoidRecordNil)))))
              };
          };
          var $9 = Data_Functor.map(Effect_Aff.functorAff)(Data_Either.either(getError)(function (v) {
              return {
                  result: v,
                  parseError: "",
                  argsTypeError: ""
              };
          }));
          var $10 = GraphQL_Client_CodeGen_Schema.schemasFromGqlToPurs(opts);
          return function ($11) {
              return Control_Promise.fromAff($9($10($11)));
          };
      };
      return Data_Function_Uncurried.mkFn2(go);
  })();
  exports["schemasFromGqlToPursJs"] = schemasFromGqlToPursJs;
  exports["fromNullable"] = fromNullable;
})(PS);
module.exports = PS["GraphQL.Client.CodeGen.Js"];
